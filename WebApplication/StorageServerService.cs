//------------------------------------------------------------------------------
// <auto-generated>
//     Этот код создан программой.
//     Исполняемая версия:4.0.30319.42000
//
//     Изменения в этом файле могут привести к неправильной работе и будут потеряны в случае
//     повторной генерации кода.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.ComponentModel;
using System.Diagnostics;
using System.Web.Services;
using System.Web.Services.Protocols;
using System.Xml.Serialization;

// 
// This source code was auto-generated by wsdl, Version=4.8.3928.0.
// 


/// <remarks/>
[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.8.3928.0")]
[System.Diagnostics.DebuggerStepThroughAttribute()]
[System.ComponentModel.DesignerCategoryAttribute("code")]
[System.Web.Services.WebServiceBindingAttribute(Name="StorageServerServiceSoap", Namespace="http://schemas.docsvision.com/Platform/2009-02-03/StorageServer/")]
public partial class StorageServerService : System.Web.Services.Protocols.SoapHttpClientProtocol {
    
    private System.Threading.SendOrPostCallback HealthCheckOperationCompleted;
    
    private System.Threading.SendOrPostCallback BatchUpdateOperationCompleted;
    
    private System.Threading.SendOrPostCallback CardAddToTopicChainOperationCompleted;
    
    private System.Threading.SendOrPostCallback CardArchiveOperationCompleted;
    
    private System.Threading.SendOrPostCallback CardArchiveGroupOperationCompleted;
    
    private System.Threading.SendOrPostCallback CardCopyOperationCompleted;
    
    private System.Threading.SendOrPostCallback CardCopyGroupOperationCompleted;
    
    private System.Threading.SendOrPostCallback CardCreateOperationCompleted;
    
    private System.Threading.SendOrPostCallback CardCreateExOperationCompleted;
    
    private System.Threading.SendOrPostCallback CardDearchiveOperationCompleted;
    
    private System.Threading.SendOrPostCallback CardDearchiveGroupOperationCompleted;
    
    private System.Threading.SendOrPostCallback CardDeleteOperationCompleted;
    
    private System.Threading.SendOrPostCallback CardDeleteGroupOperationCompleted;
    
    private System.Threading.SendOrPostCallback CardGetInfoOperationCompleted;
    
    private System.Threading.SendOrPostCallback CardGetInfoExOperationCompleted;
    
    private System.Threading.SendOrPostCallback CardGetListOperationCompleted;
    
    private System.Threading.SendOrPostCallback CardGetStateOperationCompleted;
    
    private System.Threading.SendOrPostCallback CardLibGetInfoOperationCompleted;
    
    private System.Threading.SendOrPostCallback CardLibGetInfoInstallOperationCompleted;
    
    private System.Threading.SendOrPostCallback CardLibGetListOperationCompleted;
    
    private System.Threading.SendOrPostCallback CardPurgeOperationCompleted;
    
    private System.Threading.SendOrPostCallback CardRestoreOperationCompleted;
    
    private System.Threading.SendOrPostCallback CardRestoreGroupOperationCompleted;
    
    private System.Threading.SendOrPostCallback CardSetInfoOperationCompleted;
    
    private System.Threading.SendOrPostCallback CardSetInfoExOperationCompleted;
    
    private System.Threading.SendOrPostCallback CardSetReadStatusOperationCompleted;
    
    private System.Threading.SendOrPostCallback CardSetStatusOperationCompleted;
    
    private System.Threading.SendOrPostCallback CardTypeGetInfoOperationCompleted;
    
    private System.Threading.SendOrPostCallback CardTypeGetListOperationCompleted;
    
    private System.Threading.SendOrPostCallback CardTypeSetOptionsOperationCompleted;
    
    private System.Threading.SendOrPostCallback CryptoAddObjectOperationCompleted;
    
    private System.Threading.SendOrPostCallback CryptoAddObjectExOperationCompleted;
    
    private System.Threading.SendOrPostCallback CryptoAddObjectWithIDOperationCompleted;
    
    private System.Threading.SendOrPostCallback CryptoDeleteObjectOperationCompleted;
    
    private System.Threading.SendOrPostCallback CryptoDeleteObjectByIDOperationCompleted;
    
    private System.Threading.SendOrPostCallback CryptoGetObjectOperationCompleted;
    
    private System.Threading.SendOrPostCallback CryptoGetObjectByIDOperationCompleted;
    
    private System.Threading.SendOrPostCallback CryptoGetObjectInfoOperationCompleted;
    
    private System.Threading.SendOrPostCallback CryptoListObjectsOperationCompleted;
    
    private System.Threading.SendOrPostCallback CursorCloseOperationCompleted;
    
    private System.Threading.SendOrPostCallback CursorGetPageCountOperationCompleted;
    
    private System.Threading.SendOrPostCallback CursorOpenCardDataOperationCompleted;
    
    private System.Threading.SendOrPostCallback CursorOpenSectionDataOperationCompleted;
    
    private System.Threading.SendOrPostCallback CursorReadPageOperationCompleted;
    
    private System.Threading.SendOrPostCallback CursorRefreshCardDataOperationCompleted;
    
    private System.Threading.SendOrPostCallback CursorRefreshSectionDataOperationCompleted;
    
    private System.Threading.SendOrPostCallback DecrementFeatureUsageOperationCompleted;
    
    private System.Threading.SendOrPostCallback DynamicFieldCreateOperationCompleted;
    
    private System.Threading.SendOrPostCallback DynamicFieldDeleteOperationCompleted;
    
    private System.Threading.SendOrPostCallback DynamicFieldGetInfoOperationCompleted;
    
    private System.Threading.SendOrPostCallback DynamicFieldUpdateOperationCompleted;
    
    private System.Threading.SendOrPostCallback DynamicMetadataGetInfoOperationCompleted;
    
    private System.Threading.SendOrPostCallback DynamicMetadataUpdateOperationCompleted;
    
    private System.Threading.SendOrPostCallback DynamicSectionCreateOperationCompleted;
    
    private System.Threading.SendOrPostCallback DynamicSectionDeleteOperationCompleted;
    
    private System.Threading.SendOrPostCallback DynamicSectionGetInfoOperationCompleted;
    
    private System.Threading.SendOrPostCallback DynamicSectionUpdateOperationCompleted;
    
    private System.Threading.SendOrPostCallback ExtensionExecuteCursorMethodOperationCompleted;
    
    private System.Threading.SendOrPostCallback ExtensionExecuteMethodOperationCompleted;
    
    private System.Threading.SendOrPostCallback FileArchiveOperationCompleted;
    
    private System.Threading.SendOrPostCallback FileArchiveGroupOperationCompleted;
    
    private System.Threading.SendOrPostCallback FileBringOnLineOperationCompleted;
    
    private System.Threading.SendOrPostCallback FileBringOnLineGroupOperationCompleted;
    
    private System.Threading.SendOrPostCallback FileCloseOperationCompleted;
    
    private System.Threading.SendOrPostCallback FileCopyOperationCompleted;
    
    private System.Threading.SendOrPostCallback FileCreateOperationCompleted;
    
    private System.Threading.SendOrPostCallback FileCreateExOperationCompleted;
    
    private System.Threading.SendOrPostCallback FileDearchiveOperationCompleted;
    
    private System.Threading.SendOrPostCallback FileDearchiveGroupOperationCompleted;
    
    private System.Threading.SendOrPostCallback FileDeleteOperationCompleted;
    
    private System.Threading.SendOrPostCallback FileExistsOperationCompleted;
    
    private System.Threading.SendOrPostCallback FileFindOperationCompleted;
    
    private System.Threading.SendOrPostCallback FileGetInfoOperationCompleted;
    
    private System.Threading.SendOrPostCallback FileGetPreviewOperationCompleted;
    
    private System.Threading.SendOrPostCallback FileOpenOperationCompleted;
    
    private System.Threading.SendOrPostCallback FileReadOperationCompleted;
    
    private System.Threading.SendOrPostCallback FileReplaceOperationCompleted;
    
    private System.Threading.SendOrPostCallback FileSetInfoOperationCompleted;
    
    private System.Threading.SendOrPostCallback FileTakeOffLineOperationCompleted;
    
    private System.Threading.SendOrPostCallback FileTakeOffLineGroupOperationCompleted;
    
    private System.Threading.SendOrPostCallback FileWriteOperationCompleted;
    
    private System.Threading.SendOrPostCallback FolderCopyOperationCompleted;
    
    private System.Threading.SendOrPostCallback FolderCopyDataOperationCompleted;
    
    private System.Threading.SendOrPostCallback FolderCopyExOperationCompleted;
    
    private System.Threading.SendOrPostCallback FolderDeleteOperationCompleted;
    
    private System.Threading.SendOrPostCallback FolderDeleteCardOperationCompleted;
    
    private System.Threading.SendOrPostCallback FolderFindHardLinkOperationCompleted;
    
    private System.Threading.SendOrPostCallback FolderGetInfoGroupOperationCompleted;
    
    private System.Threading.SendOrPostCallback FolderGetShortcutsOperationCompleted;
    
    private System.Threading.SendOrPostCallback FolderGetUnreadCountOperationCompleted;
    
    private System.Threading.SendOrPostCallback FolderGetUnreadCountExOperationCompleted;
    
    private System.Threading.SendOrPostCallback FolderMakeHardLinkOperationCompleted;
    
    private System.Threading.SendOrPostCallback FolderMarkAllOperationCompleted;
    
    private System.Threading.SendOrPostCallback FolderPurgeOperationCompleted;
    
    private System.Threading.SendOrPostCallback FolderSetCardDescriptorOperationCompleted;
    
    private System.Threading.SendOrPostCallback GetServerDateTimeOperationCompleted;
    
    private System.Threading.SendOrPostCallback IconCreateOperationCompleted;
    
    private System.Threading.SendOrPostCallback IconDeleteOperationCompleted;
    
    private System.Threading.SendOrPostCallback IconGetInfoGroupOperationCompleted;
    
    private System.Threading.SendOrPostCallback IconGetListOperationCompleted;
    
    private System.Threading.SendOrPostCallback IconSetInfoOperationCompleted;
    
    private System.Threading.SendOrPostCallback IncrementFeatureUsageOperationCompleted;
    
    private System.Threading.SendOrPostCallback LabelClearCardOperationCompleted;
    
    private System.Threading.SendOrPostCallback LabelCreateOperationCompleted;
    
    private System.Threading.SendOrPostCallback LabelDeleteOperationCompleted;
    
    private System.Threading.SendOrPostCallback LabelGetListOperationCompleted;
    
    private System.Threading.SendOrPostCallback LabelSetCardOperationCompleted;
    
    private System.Threading.SendOrPostCallback LabelSetInfoOperationCompleted;
    
    private System.Threading.SendOrPostCallback LinkClearOperationCompleted;
    
    private System.Threading.SendOrPostCallback LinkGetCardInfoOperationCompleted;
    
    private System.Threading.SendOrPostCallback LinkGetParentOperationCompleted;
    
    private System.Threading.SendOrPostCallback LockClearOperationCompleted;
    
    private System.Threading.SendOrPostCallback LockClearGroupOperationCompleted;
    
    private System.Threading.SendOrPostCallback LockGetInfoOperationCompleted;
    
    private System.Threading.SendOrPostCallback LockGetListOperationCompleted;
    
    private System.Threading.SendOrPostCallback LockSetOperationCompleted;
    
    private System.Threading.SendOrPostCallback LogClearOperationCompleted;
    
    private System.Threading.SendOrPostCallback LogFindOperationCompleted;
    
    private System.Threading.SendOrPostCallback LogGetStrategyOperationCompleted;
    
    private System.Threading.SendOrPostCallback LogReadOperationCompleted;
    
    private System.Threading.SendOrPostCallback LogReadExOperationCompleted;
    
    private System.Threading.SendOrPostCallback LogSetStrategyOperationCompleted;
    
    private System.Threading.SendOrPostCallback LogWriteOperationCompleted;
    
    private System.Threading.SendOrPostCallback LogWriteExOperationCompleted;
    
    private System.Threading.SendOrPostCallback NumAllocateNumberOperationCompleted;
    
    private System.Threading.SendOrPostCallback NumAllocateNumbersOperationCompleted;
    
    private System.Threading.SendOrPostCallback NumChangeLeftBoundOperationCompleted;
    
    private System.Threading.SendOrPostCallback NumChangeRightBoundOperationCompleted;
    
    private System.Threading.SendOrPostCallback NumGetFirstFreeOperationCompleted;
    
    private System.Threading.SendOrPostCallback NumGetLastFreeOperationCompleted;
    
    private System.Threading.SendOrPostCallback NumGetNumberByIDOperationCompleted;
    
    private System.Threading.SendOrPostCallback NumGetNumberIDOperationCompleted;
    
    private System.Threading.SendOrPostCallback NumGetNumberInfoOperationCompleted;
    
    private System.Threading.SendOrPostCallback NumGetNumbersStatusOperationCompleted;
    
    private System.Threading.SendOrPostCallback NumGetNumberStatusOperationCompleted;
    
    private System.Threading.SendOrPostCallback NumReleaseNumberOperationCompleted;
    
    private System.Threading.SendOrPostCallback NumReleaseNumberByIDOperationCompleted;
    
    private System.Threading.SendOrPostCallback NumReleaseNumbersOperationCompleted;
    
    private System.Threading.SendOrPostCallback ReportGetDataOperationCompleted;
    
    private System.Threading.SendOrPostCallback ReportGetInfoOperationCompleted;
    
    private System.Threading.SendOrPostCallback ReportGetListOperationCompleted;
    
    private System.Threading.SendOrPostCallback RowCopyOperationCompleted;
    
    private System.Threading.SendOrPostCallback RowCreateOperationCompleted;
    
    private System.Threading.SendOrPostCallback RowDeleteOperationCompleted;
    
    private System.Threading.SendOrPostCallback RowExistsOperationCompleted;
    
    private System.Threading.SendOrPostCallback RowGetDataOperationCompleted;
    
    private System.Threading.SendOrPostCallback RowGetDataByInstanceIDOperationCompleted;
    
    private System.Threading.SendOrPostCallback RowGetHierarchyOperationCompleted;
    
    private System.Threading.SendOrPostCallback RowGetInfoOperationCompleted;
    
    private System.Threading.SendOrPostCallback RowMoveOperationCompleted;
    
    private System.Threading.SendOrPostCallback RowSetDataOperationCompleted;
    
    private System.Threading.SendOrPostCallback SearchCardsOperationCompleted;
    
    private System.Threading.SendOrPostCallback SearchCardsExOperationCompleted;
    
    private System.Threading.SendOrPostCallback SearchCardsToFolderOperationCompleted;
    
    private System.Threading.SendOrPostCallback SearchCardsToStoreOperationCompleted;
    
    private System.Threading.SendOrPostCallback SearchCreateOperationCompleted;
    
    private System.Threading.SendOrPostCallback SearchDeleteOperationCompleted;
    
    private System.Threading.SendOrPostCallback SearchRowsOperationCompleted;
    
    private System.Threading.SendOrPostCallback SearchWordResolveOperationCompleted;
    
    private System.Threading.SendOrPostCallback SecurityCheckAccessOperationCompleted;
    
    private System.Threading.SendOrPostCallback SecurityCheckAccessExOperationCompleted;
    
    private System.Threading.SendOrPostCallback SecurityGetObjectDescriptorOperationCompleted;
    
    private System.Threading.SendOrPostCallback SecurityGetObjectDescriptorExOperationCompleted;
    
    private System.Threading.SendOrPostCallback SecurityGetSchemaOperationCompleted;
    
    private System.Threading.SendOrPostCallback SecurityIsAdminOperationCompleted;
    
    private System.Threading.SendOrPostCallback SecuritySetObjectDescriptorOperationCompleted;
    
    private System.Threading.SendOrPostCallback SecuritySetObjectDescriptorExOperationCompleted;
    
    private System.Threading.SendOrPostCallback SessionGetListOperationCompleted;
    
    private System.Threading.SendOrPostCallback SessionGetSettingsOperationCompleted;
    
    private System.Threading.SendOrPostCallback SessionKeepAliveOperationCompleted;
    
    private System.Threading.SendOrPostCallback SessionLoginOperationCompleted;
    
    private System.Threading.SendOrPostCallback SessionLoginExOperationCompleted;
    
    private System.Threading.SendOrPostCallback SessionLoginCustomOperationCompleted;
    
    private System.Threading.SendOrPostCallback SessionLogoutOperationCompleted;
    
    private System.Threading.SendOrPostCallback SessionSetSettingsOperationCompleted;
    
    private System.Threading.SendOrPostCallback SessionTerminateOperationCompleted;
    
    private System.Threading.SendOrPostCallback SessionUpdateOfflineStateOperationCompleted;
    
    private System.Threading.SendOrPostCallback TransformCreateOperationCompleted;
    
    private System.Threading.SendOrPostCallback TransformDeleteOperationCompleted;
    
    private System.Threading.SendOrPostCallback TransformGetDataOperationCompleted;
    
    private System.Threading.SendOrPostCallback TransformGetDataExOperationCompleted;
    
    private System.Threading.SendOrPostCallback TransformGetListOperationCompleted;
    
    private System.Threading.SendOrPostCallback TransformSetDataOperationCompleted;
    
    private System.Threading.SendOrPostCallback TransformSetInfoOperationCompleted;
    
    private System.Threading.SendOrPostCallback UserProfileGetAccountOperationCompleted;
    
    private System.Threading.SendOrPostCallback UserProfileGetInfoOperationCompleted;
    
    private System.Threading.SendOrPostCallback UserProfileSetInfoOperationCompleted;
    
    private System.Threading.SendOrPostCallback ViewCreateOperationCompleted;
    
    private System.Threading.SendOrPostCallback ViewDeleteOperationCompleted;
    
    private System.Threading.SendOrPostCallback ViewGetDataOperationCompleted;
    
    private System.Threading.SendOrPostCallback ViewGetDataExOperationCompleted;
    
    private System.Threading.SendOrPostCallback ViewReadDataOperationCompleted;
    
    private System.Threading.SendOrPostCallback ViewReadDataExOperationCompleted;
    
    private System.Threading.SendOrPostCallback WorkflowGetActiveProcessesOperationCompleted;
    
    private System.Threading.SendOrPostCallback WorkflowGetProcessInfoOperationCompleted;
    
    private System.Threading.SendOrPostCallback WorkflowGetProcessListOperationCompleted;
    
    private System.Threading.SendOrPostCallback WorkflowGetProcessListExOperationCompleted;
    
    private System.Threading.SendOrPostCallback WorkflowLogMessageOperationCompleted;
    
    private System.Threading.SendOrPostCallback WorkflowPauseProcessOperationCompleted;
    
    private System.Threading.SendOrPostCallback WorkflowPrepareProcessOperationCompleted;
    
    private System.Threading.SendOrPostCallback WorkflowPromoteProcessOperationCompleted;
    
    private System.Threading.SendOrPostCallback WorkflowPromoteProcessesOperationCompleted;
    
    private System.Threading.SendOrPostCallback WorkflowResumeProcessOperationCompleted;
    
    private System.Threading.SendOrPostCallback WorkflowSetProcessPriorityOperationCompleted;
    
    private System.Threading.SendOrPostCallback WorkflowSetServiceStateOperationCompleted;
    
    private System.Threading.SendOrPostCallback WorkflowStartProcessOperationCompleted;
    
    private System.Threading.SendOrPostCallback WorkflowStepProcessOperationCompleted;
    
    private System.Threading.SendOrPostCallback WorkflowStopProcessOperationCompleted;
    
    /// <remarks/>
    public StorageServerService() {
        this.Url = "http://dvshowcase/Docsvision/StorageServer/StorageServerService.asmx";
    }
    
    /// <remarks/>
    public event HealthCheckCompletedEventHandler HealthCheckCompleted;
    
    /// <remarks/>
    public event BatchUpdateCompletedEventHandler BatchUpdateCompleted;
    
    /// <remarks/>
    public event CardAddToTopicChainCompletedEventHandler CardAddToTopicChainCompleted;
    
    /// <remarks/>
    public event CardArchiveCompletedEventHandler CardArchiveCompleted;
    
    /// <remarks/>
    public event CardArchiveGroupCompletedEventHandler CardArchiveGroupCompleted;
    
    /// <remarks/>
    public event CardCopyCompletedEventHandler CardCopyCompleted;
    
    /// <remarks/>
    public event CardCopyGroupCompletedEventHandler CardCopyGroupCompleted;
    
    /// <remarks/>
    public event CardCreateCompletedEventHandler CardCreateCompleted;
    
    /// <remarks/>
    public event CardCreateExCompletedEventHandler CardCreateExCompleted;
    
    /// <remarks/>
    public event CardDearchiveCompletedEventHandler CardDearchiveCompleted;
    
    /// <remarks/>
    public event CardDearchiveGroupCompletedEventHandler CardDearchiveGroupCompleted;
    
    /// <remarks/>
    public event CardDeleteCompletedEventHandler CardDeleteCompleted;
    
    /// <remarks/>
    public event CardDeleteGroupCompletedEventHandler CardDeleteGroupCompleted;
    
    /// <remarks/>
    public event CardGetInfoCompletedEventHandler CardGetInfoCompleted;
    
    /// <remarks/>
    public event CardGetInfoExCompletedEventHandler CardGetInfoExCompleted;
    
    /// <remarks/>
    public event CardGetListCompletedEventHandler CardGetListCompleted;
    
    /// <remarks/>
    public event CardGetStateCompletedEventHandler CardGetStateCompleted;
    
    /// <remarks/>
    public event CardLibGetInfoCompletedEventHandler CardLibGetInfoCompleted;
    
    /// <remarks/>
    public event CardLibGetInfoInstallCompletedEventHandler CardLibGetInfoInstallCompleted;
    
    /// <remarks/>
    public event CardLibGetListCompletedEventHandler CardLibGetListCompleted;
    
    /// <remarks/>
    public event CardPurgeCompletedEventHandler CardPurgeCompleted;
    
    /// <remarks/>
    public event CardRestoreCompletedEventHandler CardRestoreCompleted;
    
    /// <remarks/>
    public event CardRestoreGroupCompletedEventHandler CardRestoreGroupCompleted;
    
    /// <remarks/>
    public event CardSetInfoCompletedEventHandler CardSetInfoCompleted;
    
    /// <remarks/>
    public event CardSetInfoExCompletedEventHandler CardSetInfoExCompleted;
    
    /// <remarks/>
    public event CardSetReadStatusCompletedEventHandler CardSetReadStatusCompleted;
    
    /// <remarks/>
    public event CardSetStatusCompletedEventHandler CardSetStatusCompleted;
    
    /// <remarks/>
    public event CardTypeGetInfoCompletedEventHandler CardTypeGetInfoCompleted;
    
    /// <remarks/>
    public event CardTypeGetListCompletedEventHandler CardTypeGetListCompleted;
    
    /// <remarks/>
    public event CardTypeSetOptionsCompletedEventHandler CardTypeSetOptionsCompleted;
    
    /// <remarks/>
    public event CryptoAddObjectCompletedEventHandler CryptoAddObjectCompleted;
    
    /// <remarks/>
    public event CryptoAddObjectExCompletedEventHandler CryptoAddObjectExCompleted;
    
    /// <remarks/>
    public event CryptoAddObjectWithIDCompletedEventHandler CryptoAddObjectWithIDCompleted;
    
    /// <remarks/>
    public event CryptoDeleteObjectCompletedEventHandler CryptoDeleteObjectCompleted;
    
    /// <remarks/>
    public event CryptoDeleteObjectByIDCompletedEventHandler CryptoDeleteObjectByIDCompleted;
    
    /// <remarks/>
    public event CryptoGetObjectCompletedEventHandler CryptoGetObjectCompleted;
    
    /// <remarks/>
    public event CryptoGetObjectByIDCompletedEventHandler CryptoGetObjectByIDCompleted;
    
    /// <remarks/>
    public event CryptoGetObjectInfoCompletedEventHandler CryptoGetObjectInfoCompleted;
    
    /// <remarks/>
    public event CryptoListObjectsCompletedEventHandler CryptoListObjectsCompleted;
    
    /// <remarks/>
    public event CursorCloseCompletedEventHandler CursorCloseCompleted;
    
    /// <remarks/>
    public event CursorGetPageCountCompletedEventHandler CursorGetPageCountCompleted;
    
    /// <remarks/>
    public event CursorOpenCardDataCompletedEventHandler CursorOpenCardDataCompleted;
    
    /// <remarks/>
    public event CursorOpenSectionDataCompletedEventHandler CursorOpenSectionDataCompleted;
    
    /// <remarks/>
    public event CursorReadPageCompletedEventHandler CursorReadPageCompleted;
    
    /// <remarks/>
    public event CursorRefreshCardDataCompletedEventHandler CursorRefreshCardDataCompleted;
    
    /// <remarks/>
    public event CursorRefreshSectionDataCompletedEventHandler CursorRefreshSectionDataCompleted;
    
    /// <remarks/>
    public event DecrementFeatureUsageCompletedEventHandler DecrementFeatureUsageCompleted;
    
    /// <remarks/>
    public event DynamicFieldCreateCompletedEventHandler DynamicFieldCreateCompleted;
    
    /// <remarks/>
    public event DynamicFieldDeleteCompletedEventHandler DynamicFieldDeleteCompleted;
    
    /// <remarks/>
    public event DynamicFieldGetInfoCompletedEventHandler DynamicFieldGetInfoCompleted;
    
    /// <remarks/>
    public event DynamicFieldUpdateCompletedEventHandler DynamicFieldUpdateCompleted;
    
    /// <remarks/>
    public event DynamicMetadataGetInfoCompletedEventHandler DynamicMetadataGetInfoCompleted;
    
    /// <remarks/>
    public event DynamicMetadataUpdateCompletedEventHandler DynamicMetadataUpdateCompleted;
    
    /// <remarks/>
    public event DynamicSectionCreateCompletedEventHandler DynamicSectionCreateCompleted;
    
    /// <remarks/>
    public event DynamicSectionDeleteCompletedEventHandler DynamicSectionDeleteCompleted;
    
    /// <remarks/>
    public event DynamicSectionGetInfoCompletedEventHandler DynamicSectionGetInfoCompleted;
    
    /// <remarks/>
    public event DynamicSectionUpdateCompletedEventHandler DynamicSectionUpdateCompleted;
    
    /// <remarks/>
    public event ExtensionExecuteCursorMethodCompletedEventHandler ExtensionExecuteCursorMethodCompleted;
    
    /// <remarks/>
    public event ExtensionExecuteMethodCompletedEventHandler ExtensionExecuteMethodCompleted;
    
    /// <remarks/>
    public event FileArchiveCompletedEventHandler FileArchiveCompleted;
    
    /// <remarks/>
    public event FileArchiveGroupCompletedEventHandler FileArchiveGroupCompleted;
    
    /// <remarks/>
    public event FileBringOnLineCompletedEventHandler FileBringOnLineCompleted;
    
    /// <remarks/>
    public event FileBringOnLineGroupCompletedEventHandler FileBringOnLineGroupCompleted;
    
    /// <remarks/>
    public event FileCloseCompletedEventHandler FileCloseCompleted;
    
    /// <remarks/>
    public event FileCopyCompletedEventHandler FileCopyCompleted;
    
    /// <remarks/>
    public event FileCreateCompletedEventHandler FileCreateCompleted;
    
    /// <remarks/>
    public event FileCreateExCompletedEventHandler FileCreateExCompleted;
    
    /// <remarks/>
    public event FileDearchiveCompletedEventHandler FileDearchiveCompleted;
    
    /// <remarks/>
    public event FileDearchiveGroupCompletedEventHandler FileDearchiveGroupCompleted;
    
    /// <remarks/>
    public event FileDeleteCompletedEventHandler FileDeleteCompleted;
    
    /// <remarks/>
    public event FileExistsCompletedEventHandler FileExistsCompleted;
    
    /// <remarks/>
    public event FileFindCompletedEventHandler FileFindCompleted;
    
    /// <remarks/>
    public event FileGetInfoCompletedEventHandler FileGetInfoCompleted;
    
    /// <remarks/>
    public event FileGetPreviewCompletedEventHandler FileGetPreviewCompleted;
    
    /// <remarks/>
    public event FileOpenCompletedEventHandler FileOpenCompleted;
    
    /// <remarks/>
    public event FileReadCompletedEventHandler FileReadCompleted;
    
    /// <remarks/>
    public event FileReplaceCompletedEventHandler FileReplaceCompleted;
    
    /// <remarks/>
    public event FileSetInfoCompletedEventHandler FileSetInfoCompleted;
    
    /// <remarks/>
    public event FileTakeOffLineCompletedEventHandler FileTakeOffLineCompleted;
    
    /// <remarks/>
    public event FileTakeOffLineGroupCompletedEventHandler FileTakeOffLineGroupCompleted;
    
    /// <remarks/>
    public event FileWriteCompletedEventHandler FileWriteCompleted;
    
    /// <remarks/>
    public event FolderCopyCompletedEventHandler FolderCopyCompleted;
    
    /// <remarks/>
    public event FolderCopyDataCompletedEventHandler FolderCopyDataCompleted;
    
    /// <remarks/>
    public event FolderCopyExCompletedEventHandler FolderCopyExCompleted;
    
    /// <remarks/>
    public event FolderDeleteCompletedEventHandler FolderDeleteCompleted;
    
    /// <remarks/>
    public event FolderDeleteCardCompletedEventHandler FolderDeleteCardCompleted;
    
    /// <remarks/>
    public event FolderFindHardLinkCompletedEventHandler FolderFindHardLinkCompleted;
    
    /// <remarks/>
    public event FolderGetInfoGroupCompletedEventHandler FolderGetInfoGroupCompleted;
    
    /// <remarks/>
    public event FolderGetShortcutsCompletedEventHandler FolderGetShortcutsCompleted;
    
    /// <remarks/>
    public event FolderGetUnreadCountCompletedEventHandler FolderGetUnreadCountCompleted;
    
    /// <remarks/>
    public event FolderGetUnreadCountExCompletedEventHandler FolderGetUnreadCountExCompleted;
    
    /// <remarks/>
    public event FolderMakeHardLinkCompletedEventHandler FolderMakeHardLinkCompleted;
    
    /// <remarks/>
    public event FolderMarkAllCompletedEventHandler FolderMarkAllCompleted;
    
    /// <remarks/>
    public event FolderPurgeCompletedEventHandler FolderPurgeCompleted;
    
    /// <remarks/>
    public event FolderSetCardDescriptorCompletedEventHandler FolderSetCardDescriptorCompleted;
    
    /// <remarks/>
    public event GetServerDateTimeCompletedEventHandler GetServerDateTimeCompleted;
    
    /// <remarks/>
    public event IconCreateCompletedEventHandler IconCreateCompleted;
    
    /// <remarks/>
    public event IconDeleteCompletedEventHandler IconDeleteCompleted;
    
    /// <remarks/>
    public event IconGetInfoGroupCompletedEventHandler IconGetInfoGroupCompleted;
    
    /// <remarks/>
    public event IconGetListCompletedEventHandler IconGetListCompleted;
    
    /// <remarks/>
    public event IconSetInfoCompletedEventHandler IconSetInfoCompleted;
    
    /// <remarks/>
    public event IncrementFeatureUsageCompletedEventHandler IncrementFeatureUsageCompleted;
    
    /// <remarks/>
    public event LabelClearCardCompletedEventHandler LabelClearCardCompleted;
    
    /// <remarks/>
    public event LabelCreateCompletedEventHandler LabelCreateCompleted;
    
    /// <remarks/>
    public event LabelDeleteCompletedEventHandler LabelDeleteCompleted;
    
    /// <remarks/>
    public event LabelGetListCompletedEventHandler LabelGetListCompleted;
    
    /// <remarks/>
    public event LabelSetCardCompletedEventHandler LabelSetCardCompleted;
    
    /// <remarks/>
    public event LabelSetInfoCompletedEventHandler LabelSetInfoCompleted;
    
    /// <remarks/>
    public event LinkClearCompletedEventHandler LinkClearCompleted;
    
    /// <remarks/>
    public event LinkGetCardInfoCompletedEventHandler LinkGetCardInfoCompleted;
    
    /// <remarks/>
    public event LinkGetParentCompletedEventHandler LinkGetParentCompleted;
    
    /// <remarks/>
    public event LockClearCompletedEventHandler LockClearCompleted;
    
    /// <remarks/>
    public event LockClearGroupCompletedEventHandler LockClearGroupCompleted;
    
    /// <remarks/>
    public event LockGetInfoCompletedEventHandler LockGetInfoCompleted;
    
    /// <remarks/>
    public event LockGetListCompletedEventHandler LockGetListCompleted;
    
    /// <remarks/>
    public event LockSetCompletedEventHandler LockSetCompleted;
    
    /// <remarks/>
    public event LogClearCompletedEventHandler LogClearCompleted;
    
    /// <remarks/>
    public event LogFindCompletedEventHandler LogFindCompleted;
    
    /// <remarks/>
    public event LogGetStrategyCompletedEventHandler LogGetStrategyCompleted;
    
    /// <remarks/>
    public event LogReadCompletedEventHandler LogReadCompleted;
    
    /// <remarks/>
    public event LogReadExCompletedEventHandler LogReadExCompleted;
    
    /// <remarks/>
    public event LogSetStrategyCompletedEventHandler LogSetStrategyCompleted;
    
    /// <remarks/>
    public event LogWriteCompletedEventHandler LogWriteCompleted;
    
    /// <remarks/>
    public event LogWriteExCompletedEventHandler LogWriteExCompleted;
    
    /// <remarks/>
    public event NumAllocateNumberCompletedEventHandler NumAllocateNumberCompleted;
    
    /// <remarks/>
    public event NumAllocateNumbersCompletedEventHandler NumAllocateNumbersCompleted;
    
    /// <remarks/>
    public event NumChangeLeftBoundCompletedEventHandler NumChangeLeftBoundCompleted;
    
    /// <remarks/>
    public event NumChangeRightBoundCompletedEventHandler NumChangeRightBoundCompleted;
    
    /// <remarks/>
    public event NumGetFirstFreeCompletedEventHandler NumGetFirstFreeCompleted;
    
    /// <remarks/>
    public event NumGetLastFreeCompletedEventHandler NumGetLastFreeCompleted;
    
    /// <remarks/>
    public event NumGetNumberByIDCompletedEventHandler NumGetNumberByIDCompleted;
    
    /// <remarks/>
    public event NumGetNumberIDCompletedEventHandler NumGetNumberIDCompleted;
    
    /// <remarks/>
    public event NumGetNumberInfoCompletedEventHandler NumGetNumberInfoCompleted;
    
    /// <remarks/>
    public event NumGetNumbersStatusCompletedEventHandler NumGetNumbersStatusCompleted;
    
    /// <remarks/>
    public event NumGetNumberStatusCompletedEventHandler NumGetNumberStatusCompleted;
    
    /// <remarks/>
    public event NumReleaseNumberCompletedEventHandler NumReleaseNumberCompleted;
    
    /// <remarks/>
    public event NumReleaseNumberByIDCompletedEventHandler NumReleaseNumberByIDCompleted;
    
    /// <remarks/>
    public event NumReleaseNumbersCompletedEventHandler NumReleaseNumbersCompleted;
    
    /// <remarks/>
    public event ReportGetDataCompletedEventHandler ReportGetDataCompleted;
    
    /// <remarks/>
    public event ReportGetInfoCompletedEventHandler ReportGetInfoCompleted;
    
    /// <remarks/>
    public event ReportGetListCompletedEventHandler ReportGetListCompleted;
    
    /// <remarks/>
    public event RowCopyCompletedEventHandler RowCopyCompleted;
    
    /// <remarks/>
    public event RowCreateCompletedEventHandler RowCreateCompleted;
    
    /// <remarks/>
    public event RowDeleteCompletedEventHandler RowDeleteCompleted;
    
    /// <remarks/>
    public event RowExistsCompletedEventHandler RowExistsCompleted;
    
    /// <remarks/>
    public event RowGetDataCompletedEventHandler RowGetDataCompleted;
    
    /// <remarks/>
    public event RowGetDataByInstanceIDCompletedEventHandler RowGetDataByInstanceIDCompleted;
    
    /// <remarks/>
    public event RowGetHierarchyCompletedEventHandler RowGetHierarchyCompleted;
    
    /// <remarks/>
    public event RowGetInfoCompletedEventHandler RowGetInfoCompleted;
    
    /// <remarks/>
    public event RowMoveCompletedEventHandler RowMoveCompleted;
    
    /// <remarks/>
    public event RowSetDataCompletedEventHandler RowSetDataCompleted;
    
    /// <remarks/>
    public event SearchCardsCompletedEventHandler SearchCardsCompleted;
    
    /// <remarks/>
    public event SearchCardsExCompletedEventHandler SearchCardsExCompleted;
    
    /// <remarks/>
    public event SearchCardsToFolderCompletedEventHandler SearchCardsToFolderCompleted;
    
    /// <remarks/>
    public event SearchCardsToStoreCompletedEventHandler SearchCardsToStoreCompleted;
    
    /// <remarks/>
    public event SearchCreateCompletedEventHandler SearchCreateCompleted;
    
    /// <remarks/>
    public event SearchDeleteCompletedEventHandler SearchDeleteCompleted;
    
    /// <remarks/>
    public event SearchRowsCompletedEventHandler SearchRowsCompleted;
    
    /// <remarks/>
    public event SearchWordResolveCompletedEventHandler SearchWordResolveCompleted;
    
    /// <remarks/>
    public event SecurityCheckAccessCompletedEventHandler SecurityCheckAccessCompleted;
    
    /// <remarks/>
    public event SecurityCheckAccessExCompletedEventHandler SecurityCheckAccessExCompleted;
    
    /// <remarks/>
    public event SecurityGetObjectDescriptorCompletedEventHandler SecurityGetObjectDescriptorCompleted;
    
    /// <remarks/>
    public event SecurityGetObjectDescriptorExCompletedEventHandler SecurityGetObjectDescriptorExCompleted;
    
    /// <remarks/>
    public event SecurityGetSchemaCompletedEventHandler SecurityGetSchemaCompleted;
    
    /// <remarks/>
    public event SecurityIsAdminCompletedEventHandler SecurityIsAdminCompleted;
    
    /// <remarks/>
    public event SecuritySetObjectDescriptorCompletedEventHandler SecuritySetObjectDescriptorCompleted;
    
    /// <remarks/>
    public event SecuritySetObjectDescriptorExCompletedEventHandler SecuritySetObjectDescriptorExCompleted;
    
    /// <remarks/>
    public event SessionGetListCompletedEventHandler SessionGetListCompleted;
    
    /// <remarks/>
    public event SessionGetSettingsCompletedEventHandler SessionGetSettingsCompleted;
    
    /// <remarks/>
    public event SessionKeepAliveCompletedEventHandler SessionKeepAliveCompleted;
    
    /// <remarks/>
    public event SessionLoginCompletedEventHandler SessionLoginCompleted;
    
    /// <remarks/>
    public event SessionLoginExCompletedEventHandler SessionLoginExCompleted;
    
    /// <remarks/>
    public event SessionLoginCustomCompletedEventHandler SessionLoginCustomCompleted;
    
    /// <remarks/>
    public event SessionLogoutCompletedEventHandler SessionLogoutCompleted;
    
    /// <remarks/>
    public event SessionSetSettingsCompletedEventHandler SessionSetSettingsCompleted;
    
    /// <remarks/>
    public event SessionTerminateCompletedEventHandler SessionTerminateCompleted;
    
    /// <remarks/>
    public event SessionUpdateOfflineStateCompletedEventHandler SessionUpdateOfflineStateCompleted;
    
    /// <remarks/>
    public event TransformCreateCompletedEventHandler TransformCreateCompleted;
    
    /// <remarks/>
    public event TransformDeleteCompletedEventHandler TransformDeleteCompleted;
    
    /// <remarks/>
    public event TransformGetDataCompletedEventHandler TransformGetDataCompleted;
    
    /// <remarks/>
    public event TransformGetDataExCompletedEventHandler TransformGetDataExCompleted;
    
    /// <remarks/>
    public event TransformGetListCompletedEventHandler TransformGetListCompleted;
    
    /// <remarks/>
    public event TransformSetDataCompletedEventHandler TransformSetDataCompleted;
    
    /// <remarks/>
    public event TransformSetInfoCompletedEventHandler TransformSetInfoCompleted;
    
    /// <remarks/>
    public event UserProfileGetAccountCompletedEventHandler UserProfileGetAccountCompleted;
    
    /// <remarks/>
    public event UserProfileGetInfoCompletedEventHandler UserProfileGetInfoCompleted;
    
    /// <remarks/>
    public event UserProfileSetInfoCompletedEventHandler UserProfileSetInfoCompleted;
    
    /// <remarks/>
    public event ViewCreateCompletedEventHandler ViewCreateCompleted;
    
    /// <remarks/>
    public event ViewDeleteCompletedEventHandler ViewDeleteCompleted;
    
    /// <remarks/>
    public event ViewGetDataCompletedEventHandler ViewGetDataCompleted;
    
    /// <remarks/>
    public event ViewGetDataExCompletedEventHandler ViewGetDataExCompleted;
    
    /// <remarks/>
    public event ViewReadDataCompletedEventHandler ViewReadDataCompleted;
    
    /// <remarks/>
    public event ViewReadDataExCompletedEventHandler ViewReadDataExCompleted;
    
    /// <remarks/>
    public event WorkflowGetActiveProcessesCompletedEventHandler WorkflowGetActiveProcessesCompleted;
    
    /// <remarks/>
    public event WorkflowGetProcessInfoCompletedEventHandler WorkflowGetProcessInfoCompleted;
    
    /// <remarks/>
    public event WorkflowGetProcessListCompletedEventHandler WorkflowGetProcessListCompleted;
    
    /// <remarks/>
    public event WorkflowGetProcessListExCompletedEventHandler WorkflowGetProcessListExCompleted;
    
    /// <remarks/>
    public event WorkflowLogMessageCompletedEventHandler WorkflowLogMessageCompleted;
    
    /// <remarks/>
    public event WorkflowPauseProcessCompletedEventHandler WorkflowPauseProcessCompleted;
    
    /// <remarks/>
    public event WorkflowPrepareProcessCompletedEventHandler WorkflowPrepareProcessCompleted;
    
    /// <remarks/>
    public event WorkflowPromoteProcessCompletedEventHandler WorkflowPromoteProcessCompleted;
    
    /// <remarks/>
    public event WorkflowPromoteProcessesCompletedEventHandler WorkflowPromoteProcessesCompleted;
    
    /// <remarks/>
    public event WorkflowResumeProcessCompletedEventHandler WorkflowResumeProcessCompleted;
    
    /// <remarks/>
    public event WorkflowSetProcessPriorityCompletedEventHandler WorkflowSetProcessPriorityCompleted;
    
    /// <remarks/>
    public event WorkflowSetServiceStateCompletedEventHandler WorkflowSetServiceStateCompleted;
    
    /// <remarks/>
    public event WorkflowStartProcessCompletedEventHandler WorkflowStartProcessCompleted;
    
    /// <remarks/>
    public event WorkflowStepProcessCompletedEventHandler WorkflowStepProcessCompleted;
    
    /// <remarks/>
    public event WorkflowStopProcessCompletedEventHandler WorkflowStopProcessCompleted;
    
    /// <remarks/>
    [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://schemas.docsvision.com/Platform/2009-02-03/StorageServer/HealthCheck", RequestNamespace="http://schemas.docsvision.com/Platform/2009-02-03/StorageServer/", ResponseNamespace="http://schemas.docsvision.com/Platform/2009-02-03/StorageServer/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
    [return: System.Xml.Serialization.XmlElementAttribute("result")]
    public string HealthCheck() {
        object[] results = this.Invoke("HealthCheck", new object[0]);
        return ((string)(results[0]));
    }
    
    /// <remarks/>
    public System.IAsyncResult BeginHealthCheck(System.AsyncCallback callback, object asyncState) {
        return this.BeginInvoke("HealthCheck", new object[0], callback, asyncState);
    }
    
    /// <remarks/>
    public string EndHealthCheck(System.IAsyncResult asyncResult) {
        object[] results = this.EndInvoke(asyncResult);
        return ((string)(results[0]));
    }
    
    /// <remarks/>
    public void HealthCheckAsync() {
        this.HealthCheckAsync(null);
    }
    
    /// <remarks/>
    public void HealthCheckAsync(object userState) {
        if ((this.HealthCheckOperationCompleted == null)) {
            this.HealthCheckOperationCompleted = new System.Threading.SendOrPostCallback(this.OnHealthCheckOperationCompleted);
        }
        this.InvokeAsync("HealthCheck", new object[0], this.HealthCheckOperationCompleted, userState);
    }
    
    private void OnHealthCheckOperationCompleted(object arg) {
        if ((this.HealthCheckCompleted != null)) {
            System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
            this.HealthCheckCompleted(this, new HealthCheckCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
        }
    }
    
    /// <remarks/>
    [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://schemas.docsvision.com/Platform/2009-02-03/StorageServer/BatchUpdate", RequestNamespace="http://schemas.docsvision.com/Platform/2009-02-03/StorageServer/", ResponseNamespace="http://schemas.docsvision.com/Platform/2009-02-03/StorageServer/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
    public void BatchUpdate(System.Guid sessionId, string batchData, bool compressed) {
        this.Invoke("BatchUpdate", new object[] {
                    sessionId,
                    batchData,
                    compressed});
    }
    
    /// <remarks/>
    public System.IAsyncResult BeginBatchUpdate(System.Guid sessionId, string batchData, bool compressed, System.AsyncCallback callback, object asyncState) {
        return this.BeginInvoke("BatchUpdate", new object[] {
                    sessionId,
                    batchData,
                    compressed}, callback, asyncState);
    }
    
    /// <remarks/>
    public void EndBatchUpdate(System.IAsyncResult asyncResult) {
        this.EndInvoke(asyncResult);
    }
    
    /// <remarks/>
    public void BatchUpdateAsync(System.Guid sessionId, string batchData, bool compressed) {
        this.BatchUpdateAsync(sessionId, batchData, compressed, null);
    }
    
    /// <remarks/>
    public void BatchUpdateAsync(System.Guid sessionId, string batchData, bool compressed, object userState) {
        if ((this.BatchUpdateOperationCompleted == null)) {
            this.BatchUpdateOperationCompleted = new System.Threading.SendOrPostCallback(this.OnBatchUpdateOperationCompleted);
        }
        this.InvokeAsync("BatchUpdate", new object[] {
                    sessionId,
                    batchData,
                    compressed}, this.BatchUpdateOperationCompleted, userState);
    }
    
    private void OnBatchUpdateOperationCompleted(object arg) {
        if ((this.BatchUpdateCompleted != null)) {
            System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
            this.BatchUpdateCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
        }
    }
    
    /// <remarks/>
    [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://schemas.docsvision.com/Platform/2009-02-03/StorageServer/CardAddToTopicCha" +
        "in", RequestNamespace="http://schemas.docsvision.com/Platform/2009-02-03/StorageServer/", ResponseNamespace="http://schemas.docsvision.com/Platform/2009-02-03/StorageServer/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
    public void CardAddToTopicChain(System.Guid sessionId, System.Guid instanceID, System.Guid addToCardId) {
        this.Invoke("CardAddToTopicChain", new object[] {
                    sessionId,
                    instanceID,
                    addToCardId});
    }
    
    /// <remarks/>
    public System.IAsyncResult BeginCardAddToTopicChain(System.Guid sessionId, System.Guid instanceID, System.Guid addToCardId, System.AsyncCallback callback, object asyncState) {
        return this.BeginInvoke("CardAddToTopicChain", new object[] {
                    sessionId,
                    instanceID,
                    addToCardId}, callback, asyncState);
    }
    
    /// <remarks/>
    public void EndCardAddToTopicChain(System.IAsyncResult asyncResult) {
        this.EndInvoke(asyncResult);
    }
    
    /// <remarks/>
    public void CardAddToTopicChainAsync(System.Guid sessionId, System.Guid instanceID, System.Guid addToCardId) {
        this.CardAddToTopicChainAsync(sessionId, instanceID, addToCardId, null);
    }
    
    /// <remarks/>
    public void CardAddToTopicChainAsync(System.Guid sessionId, System.Guid instanceID, System.Guid addToCardId, object userState) {
        if ((this.CardAddToTopicChainOperationCompleted == null)) {
            this.CardAddToTopicChainOperationCompleted = new System.Threading.SendOrPostCallback(this.OnCardAddToTopicChainOperationCompleted);
        }
        this.InvokeAsync("CardAddToTopicChain", new object[] {
                    sessionId,
                    instanceID,
                    addToCardId}, this.CardAddToTopicChainOperationCompleted, userState);
    }
    
    private void OnCardAddToTopicChainOperationCompleted(object arg) {
        if ((this.CardAddToTopicChainCompleted != null)) {
            System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
            this.CardAddToTopicChainCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
        }
    }
    
    /// <remarks/>
    [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://schemas.docsvision.com/Platform/2009-02-03/StorageServer/CardArchive", RequestNamespace="http://schemas.docsvision.com/Platform/2009-02-03/StorageServer/", ResponseNamespace="http://schemas.docsvision.com/Platform/2009-02-03/StorageServer/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
    public void CardArchive(System.Guid sessionId, System.Guid instanceID, int options) {
        this.Invoke("CardArchive", new object[] {
                    sessionId,
                    instanceID,
                    options});
    }
    
    /// <remarks/>
    public System.IAsyncResult BeginCardArchive(System.Guid sessionId, System.Guid instanceID, int options, System.AsyncCallback callback, object asyncState) {
        return this.BeginInvoke("CardArchive", new object[] {
                    sessionId,
                    instanceID,
                    options}, callback, asyncState);
    }
    
    /// <remarks/>
    public void EndCardArchive(System.IAsyncResult asyncResult) {
        this.EndInvoke(asyncResult);
    }
    
    /// <remarks/>
    public void CardArchiveAsync(System.Guid sessionId, System.Guid instanceID, int options) {
        this.CardArchiveAsync(sessionId, instanceID, options, null);
    }
    
    /// <remarks/>
    public void CardArchiveAsync(System.Guid sessionId, System.Guid instanceID, int options, object userState) {
        if ((this.CardArchiveOperationCompleted == null)) {
            this.CardArchiveOperationCompleted = new System.Threading.SendOrPostCallback(this.OnCardArchiveOperationCompleted);
        }
        this.InvokeAsync("CardArchive", new object[] {
                    sessionId,
                    instanceID,
                    options}, this.CardArchiveOperationCompleted, userState);
    }
    
    private void OnCardArchiveOperationCompleted(object arg) {
        if ((this.CardArchiveCompleted != null)) {
            System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
            this.CardArchiveCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
        }
    }
    
    /// <remarks/>
    [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://schemas.docsvision.com/Platform/2009-02-03/StorageServer/CardArchiveGroup", RequestNamespace="http://schemas.docsvision.com/Platform/2009-02-03/StorageServer/", ResponseNamespace="http://schemas.docsvision.com/Platform/2009-02-03/StorageServer/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
    [return: System.Xml.Serialization.XmlElementAttribute("failedItems")]
    public string CardArchiveGroup(System.Guid sessionId, string items, int options) {
        object[] results = this.Invoke("CardArchiveGroup", new object[] {
                    sessionId,
                    items,
                    options});
        return ((string)(results[0]));
    }
    
    /// <remarks/>
    public System.IAsyncResult BeginCardArchiveGroup(System.Guid sessionId, string items, int options, System.AsyncCallback callback, object asyncState) {
        return this.BeginInvoke("CardArchiveGroup", new object[] {
                    sessionId,
                    items,
                    options}, callback, asyncState);
    }
    
    /// <remarks/>
    public string EndCardArchiveGroup(System.IAsyncResult asyncResult) {
        object[] results = this.EndInvoke(asyncResult);
        return ((string)(results[0]));
    }
    
    /// <remarks/>
    public void CardArchiveGroupAsync(System.Guid sessionId, string items, int options) {
        this.CardArchiveGroupAsync(sessionId, items, options, null);
    }
    
    /// <remarks/>
    public void CardArchiveGroupAsync(System.Guid sessionId, string items, int options, object userState) {
        if ((this.CardArchiveGroupOperationCompleted == null)) {
            this.CardArchiveGroupOperationCompleted = new System.Threading.SendOrPostCallback(this.OnCardArchiveGroupOperationCompleted);
        }
        this.InvokeAsync("CardArchiveGroup", new object[] {
                    sessionId,
                    items,
                    options}, this.CardArchiveGroupOperationCompleted, userState);
    }
    
    private void OnCardArchiveGroupOperationCompleted(object arg) {
        if ((this.CardArchiveGroupCompleted != null)) {
            System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
            this.CardArchiveGroupCompleted(this, new CardArchiveGroupCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
        }
    }
    
    /// <remarks/>
    [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://schemas.docsvision.com/Platform/2009-02-03/StorageServer/CardCopy", RequestNamespace="http://schemas.docsvision.com/Platform/2009-02-03/StorageServer/", ResponseNamespace="http://schemas.docsvision.com/Platform/2009-02-03/StorageServer/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
    [return: System.Xml.Serialization.XmlElementAttribute("newInstanceId")]
    public System.Guid CardCopy(System.Guid sessionId, System.Guid instanceID) {
        object[] results = this.Invoke("CardCopy", new object[] {
                    sessionId,
                    instanceID});
        return ((System.Guid)(results[0]));
    }
    
    /// <remarks/>
    public System.IAsyncResult BeginCardCopy(System.Guid sessionId, System.Guid instanceID, System.AsyncCallback callback, object asyncState) {
        return this.BeginInvoke("CardCopy", new object[] {
                    sessionId,
                    instanceID}, callback, asyncState);
    }
    
    /// <remarks/>
    public System.Guid EndCardCopy(System.IAsyncResult asyncResult) {
        object[] results = this.EndInvoke(asyncResult);
        return ((System.Guid)(results[0]));
    }
    
    /// <remarks/>
    public void CardCopyAsync(System.Guid sessionId, System.Guid instanceID) {
        this.CardCopyAsync(sessionId, instanceID, null);
    }
    
    /// <remarks/>
    public void CardCopyAsync(System.Guid sessionId, System.Guid instanceID, object userState) {
        if ((this.CardCopyOperationCompleted == null)) {
            this.CardCopyOperationCompleted = new System.Threading.SendOrPostCallback(this.OnCardCopyOperationCompleted);
        }
        this.InvokeAsync("CardCopy", new object[] {
                    sessionId,
                    instanceID}, this.CardCopyOperationCompleted, userState);
    }
    
    private void OnCardCopyOperationCompleted(object arg) {
        if ((this.CardCopyCompleted != null)) {
            System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
            this.CardCopyCompleted(this, new CardCopyCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
        }
    }
    
    /// <remarks/>
    [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://schemas.docsvision.com/Platform/2009-02-03/StorageServer/CardCopyGroup", RequestNamespace="http://schemas.docsvision.com/Platform/2009-02-03/StorageServer/", ResponseNamespace="http://schemas.docsvision.com/Platform/2009-02-03/StorageServer/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
    [return: System.Xml.Serialization.XmlElementAttribute("newItems")]
    public string CardCopyGroup(System.Guid sessionId, string items, out string failedItems) {
        object[] results = this.Invoke("CardCopyGroup", new object[] {
                    sessionId,
                    items});
        failedItems = ((string)(results[1]));
        return ((string)(results[0]));
    }
    
    /// <remarks/>
    public System.IAsyncResult BeginCardCopyGroup(System.Guid sessionId, string items, System.AsyncCallback callback, object asyncState) {
        return this.BeginInvoke("CardCopyGroup", new object[] {
                    sessionId,
                    items}, callback, asyncState);
    }
    
    /// <remarks/>
    public string EndCardCopyGroup(System.IAsyncResult asyncResult, out string failedItems) {
        object[] results = this.EndInvoke(asyncResult);
        failedItems = ((string)(results[1]));
        return ((string)(results[0]));
    }
    
    /// <remarks/>
    public void CardCopyGroupAsync(System.Guid sessionId, string items) {
        this.CardCopyGroupAsync(sessionId, items, null);
    }
    
    /// <remarks/>
    public void CardCopyGroupAsync(System.Guid sessionId, string items, object userState) {
        if ((this.CardCopyGroupOperationCompleted == null)) {
            this.CardCopyGroupOperationCompleted = new System.Threading.SendOrPostCallback(this.OnCardCopyGroupOperationCompleted);
        }
        this.InvokeAsync("CardCopyGroup", new object[] {
                    sessionId,
                    items}, this.CardCopyGroupOperationCompleted, userState);
    }
    
    private void OnCardCopyGroupOperationCompleted(object arg) {
        if ((this.CardCopyGroupCompleted != null)) {
            System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
            this.CardCopyGroupCompleted(this, new CardCopyGroupCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
        }
    }
    
    /// <remarks/>
    [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://schemas.docsvision.com/Platform/2009-02-03/StorageServer/CardCreate", RequestNamespace="http://schemas.docsvision.com/Platform/2009-02-03/StorageServer/", ResponseNamespace="http://schemas.docsvision.com/Platform/2009-02-03/StorageServer/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
    public void CardCreate(System.Guid sessionId, System.Guid cardId, ref System.Guid newInstanceId) {
        object[] results = this.Invoke("CardCreate", new object[] {
                    sessionId,
                    cardId,
                    newInstanceId});
        newInstanceId = ((System.Guid)(results[0]));
    }
    
    /// <remarks/>
    public System.IAsyncResult BeginCardCreate(System.Guid sessionId, System.Guid cardId, System.Guid newInstanceId, System.AsyncCallback callback, object asyncState) {
        return this.BeginInvoke("CardCreate", new object[] {
                    sessionId,
                    cardId,
                    newInstanceId}, callback, asyncState);
    }
    
    /// <remarks/>
    public void EndCardCreate(System.IAsyncResult asyncResult, out System.Guid newInstanceId) {
        object[] results = this.EndInvoke(asyncResult);
        newInstanceId = ((System.Guid)(results[0]));
    }
    
    /// <remarks/>
    public void CardCreateAsync(System.Guid sessionId, System.Guid cardId, System.Guid newInstanceId) {
        this.CardCreateAsync(sessionId, cardId, newInstanceId, null);
    }
    
    /// <remarks/>
    public void CardCreateAsync(System.Guid sessionId, System.Guid cardId, System.Guid newInstanceId, object userState) {
        if ((this.CardCreateOperationCompleted == null)) {
            this.CardCreateOperationCompleted = new System.Threading.SendOrPostCallback(this.OnCardCreateOperationCompleted);
        }
        this.InvokeAsync("CardCreate", new object[] {
                    sessionId,
                    cardId,
                    newInstanceId}, this.CardCreateOperationCompleted, userState);
    }
    
    private void OnCardCreateOperationCompleted(object arg) {
        if ((this.CardCreateCompleted != null)) {
            System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
            this.CardCreateCompleted(this, new CardCreateCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
        }
    }
    
    /// <remarks/>
    [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://schemas.docsvision.com/Platform/2009-02-03/StorageServer/CardCreateEx", RequestNamespace="http://schemas.docsvision.com/Platform/2009-02-03/StorageServer/", ResponseNamespace="http://schemas.docsvision.com/Platform/2009-02-03/StorageServer/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
    [return: System.Xml.Serialization.XmlElementAttribute("cardInfo")]
    public string CardCreateEx(System.Guid sessionId, System.Guid cardId, ref System.Guid newInstanceId) {
        object[] results = this.Invoke("CardCreateEx", new object[] {
                    sessionId,
                    cardId,
                    newInstanceId});
        newInstanceId = ((System.Guid)(results[1]));
        return ((string)(results[0]));
    }
    
    /// <remarks/>
    public System.IAsyncResult BeginCardCreateEx(System.Guid sessionId, System.Guid cardId, System.Guid newInstanceId, System.AsyncCallback callback, object asyncState) {
        return this.BeginInvoke("CardCreateEx", new object[] {
                    sessionId,
                    cardId,
                    newInstanceId}, callback, asyncState);
    }
    
    /// <remarks/>
    public string EndCardCreateEx(System.IAsyncResult asyncResult, out System.Guid newInstanceId) {
        object[] results = this.EndInvoke(asyncResult);
        newInstanceId = ((System.Guid)(results[1]));
        return ((string)(results[0]));
    }
    
    /// <remarks/>
    public void CardCreateExAsync(System.Guid sessionId, System.Guid cardId, System.Guid newInstanceId) {
        this.CardCreateExAsync(sessionId, cardId, newInstanceId, null);
    }
    
    /// <remarks/>
    public void CardCreateExAsync(System.Guid sessionId, System.Guid cardId, System.Guid newInstanceId, object userState) {
        if ((this.CardCreateExOperationCompleted == null)) {
            this.CardCreateExOperationCompleted = new System.Threading.SendOrPostCallback(this.OnCardCreateExOperationCompleted);
        }
        this.InvokeAsync("CardCreateEx", new object[] {
                    sessionId,
                    cardId,
                    newInstanceId}, this.CardCreateExOperationCompleted, userState);
    }
    
    private void OnCardCreateExOperationCompleted(object arg) {
        if ((this.CardCreateExCompleted != null)) {
            System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
            this.CardCreateExCompleted(this, new CardCreateExCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
        }
    }
    
    /// <remarks/>
    [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://schemas.docsvision.com/Platform/2009-02-03/StorageServer/CardDearchive", RequestNamespace="http://schemas.docsvision.com/Platform/2009-02-03/StorageServer/", ResponseNamespace="http://schemas.docsvision.com/Platform/2009-02-03/StorageServer/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
    public void CardDearchive(System.Guid sessionId, System.Guid instanceID, int options) {
        this.Invoke("CardDearchive", new object[] {
                    sessionId,
                    instanceID,
                    options});
    }
    
    /// <remarks/>
    public System.IAsyncResult BeginCardDearchive(System.Guid sessionId, System.Guid instanceID, int options, System.AsyncCallback callback, object asyncState) {
        return this.BeginInvoke("CardDearchive", new object[] {
                    sessionId,
                    instanceID,
                    options}, callback, asyncState);
    }
    
    /// <remarks/>
    public void EndCardDearchive(System.IAsyncResult asyncResult) {
        this.EndInvoke(asyncResult);
    }
    
    /// <remarks/>
    public void CardDearchiveAsync(System.Guid sessionId, System.Guid instanceID, int options) {
        this.CardDearchiveAsync(sessionId, instanceID, options, null);
    }
    
    /// <remarks/>
    public void CardDearchiveAsync(System.Guid sessionId, System.Guid instanceID, int options, object userState) {
        if ((this.CardDearchiveOperationCompleted == null)) {
            this.CardDearchiveOperationCompleted = new System.Threading.SendOrPostCallback(this.OnCardDearchiveOperationCompleted);
        }
        this.InvokeAsync("CardDearchive", new object[] {
                    sessionId,
                    instanceID,
                    options}, this.CardDearchiveOperationCompleted, userState);
    }
    
    private void OnCardDearchiveOperationCompleted(object arg) {
        if ((this.CardDearchiveCompleted != null)) {
            System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
            this.CardDearchiveCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
        }
    }
    
    /// <remarks/>
    [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://schemas.docsvision.com/Platform/2009-02-03/StorageServer/CardDearchiveGrou" +
        "p", RequestNamespace="http://schemas.docsvision.com/Platform/2009-02-03/StorageServer/", ResponseNamespace="http://schemas.docsvision.com/Platform/2009-02-03/StorageServer/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
    [return: System.Xml.Serialization.XmlElementAttribute("failedItems")]
    public string CardDearchiveGroup(System.Guid sessionId, string items, int options) {
        object[] results = this.Invoke("CardDearchiveGroup", new object[] {
                    sessionId,
                    items,
                    options});
        return ((string)(results[0]));
    }
    
    /// <remarks/>
    public System.IAsyncResult BeginCardDearchiveGroup(System.Guid sessionId, string items, int options, System.AsyncCallback callback, object asyncState) {
        return this.BeginInvoke("CardDearchiveGroup", new object[] {
                    sessionId,
                    items,
                    options}, callback, asyncState);
    }
    
    /// <remarks/>
    public string EndCardDearchiveGroup(System.IAsyncResult asyncResult) {
        object[] results = this.EndInvoke(asyncResult);
        return ((string)(results[0]));
    }
    
    /// <remarks/>
    public void CardDearchiveGroupAsync(System.Guid sessionId, string items, int options) {
        this.CardDearchiveGroupAsync(sessionId, items, options, null);
    }
    
    /// <remarks/>
    public void CardDearchiveGroupAsync(System.Guid sessionId, string items, int options, object userState) {
        if ((this.CardDearchiveGroupOperationCompleted == null)) {
            this.CardDearchiveGroupOperationCompleted = new System.Threading.SendOrPostCallback(this.OnCardDearchiveGroupOperationCompleted);
        }
        this.InvokeAsync("CardDearchiveGroup", new object[] {
                    sessionId,
                    items,
                    options}, this.CardDearchiveGroupOperationCompleted, userState);
    }
    
    private void OnCardDearchiveGroupOperationCompleted(object arg) {
        if ((this.CardDearchiveGroupCompleted != null)) {
            System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
            this.CardDearchiveGroupCompleted(this, new CardDearchiveGroupCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
        }
    }
    
    /// <remarks/>
    [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://schemas.docsvision.com/Platform/2009-02-03/StorageServer/CardDelete", RequestNamespace="http://schemas.docsvision.com/Platform/2009-02-03/StorageServer/", ResponseNamespace="http://schemas.docsvision.com/Platform/2009-02-03/StorageServer/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
    public void CardDelete(System.Guid sessionId, System.Guid instanceID, bool permanent) {
        this.Invoke("CardDelete", new object[] {
                    sessionId,
                    instanceID,
                    permanent});
    }
    
    /// <remarks/>
    public System.IAsyncResult BeginCardDelete(System.Guid sessionId, System.Guid instanceID, bool permanent, System.AsyncCallback callback, object asyncState) {
        return this.BeginInvoke("CardDelete", new object[] {
                    sessionId,
                    instanceID,
                    permanent}, callback, asyncState);
    }
    
    /// <remarks/>
    public void EndCardDelete(System.IAsyncResult asyncResult) {
        this.EndInvoke(asyncResult);
    }
    
    /// <remarks/>
    public void CardDeleteAsync(System.Guid sessionId, System.Guid instanceID, bool permanent) {
        this.CardDeleteAsync(sessionId, instanceID, permanent, null);
    }
    
    /// <remarks/>
    public void CardDeleteAsync(System.Guid sessionId, System.Guid instanceID, bool permanent, object userState) {
        if ((this.CardDeleteOperationCompleted == null)) {
            this.CardDeleteOperationCompleted = new System.Threading.SendOrPostCallback(this.OnCardDeleteOperationCompleted);
        }
        this.InvokeAsync("CardDelete", new object[] {
                    sessionId,
                    instanceID,
                    permanent}, this.CardDeleteOperationCompleted, userState);
    }
    
    private void OnCardDeleteOperationCompleted(object arg) {
        if ((this.CardDeleteCompleted != null)) {
            System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
            this.CardDeleteCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
        }
    }
    
    /// <remarks/>
    [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://schemas.docsvision.com/Platform/2009-02-03/StorageServer/CardDeleteGroup", RequestNamespace="http://schemas.docsvision.com/Platform/2009-02-03/StorageServer/", ResponseNamespace="http://schemas.docsvision.com/Platform/2009-02-03/StorageServer/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
    [return: System.Xml.Serialization.XmlElementAttribute("failedItems")]
    public string CardDeleteGroup(System.Guid sessionId, string items, bool permanent) {
        object[] results = this.Invoke("CardDeleteGroup", new object[] {
                    sessionId,
                    items,
                    permanent});
        return ((string)(results[0]));
    }
    
    /// <remarks/>
    public System.IAsyncResult BeginCardDeleteGroup(System.Guid sessionId, string items, bool permanent, System.AsyncCallback callback, object asyncState) {
        return this.BeginInvoke("CardDeleteGroup", new object[] {
                    sessionId,
                    items,
                    permanent}, callback, asyncState);
    }
    
    /// <remarks/>
    public string EndCardDeleteGroup(System.IAsyncResult asyncResult) {
        object[] results = this.EndInvoke(asyncResult);
        return ((string)(results[0]));
    }
    
    /// <remarks/>
    public void CardDeleteGroupAsync(System.Guid sessionId, string items, bool permanent) {
        this.CardDeleteGroupAsync(sessionId, items, permanent, null);
    }
    
    /// <remarks/>
    public void CardDeleteGroupAsync(System.Guid sessionId, string items, bool permanent, object userState) {
        if ((this.CardDeleteGroupOperationCompleted == null)) {
            this.CardDeleteGroupOperationCompleted = new System.Threading.SendOrPostCallback(this.OnCardDeleteGroupOperationCompleted);
        }
        this.InvokeAsync("CardDeleteGroup", new object[] {
                    sessionId,
                    items,
                    permanent}, this.CardDeleteGroupOperationCompleted, userState);
    }
    
    private void OnCardDeleteGroupOperationCompleted(object arg) {
        if ((this.CardDeleteGroupCompleted != null)) {
            System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
            this.CardDeleteGroupCompleted(this, new CardDeleteGroupCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
        }
    }
    
    /// <remarks/>
    [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://schemas.docsvision.com/Platform/2009-02-03/StorageServer/CardGetInfo", RequestNamespace="http://schemas.docsvision.com/Platform/2009-02-03/StorageServer/", ResponseNamespace="http://schemas.docsvision.com/Platform/2009-02-03/StorageServer/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
    [return: System.Xml.Serialization.XmlElementAttribute("cardInfo")]
    public string CardGetInfo(System.Guid sessionId, System.Guid instanceID) {
        object[] results = this.Invoke("CardGetInfo", new object[] {
                    sessionId,
                    instanceID});
        return ((string)(results[0]));
    }
    
    /// <remarks/>
    public System.IAsyncResult BeginCardGetInfo(System.Guid sessionId, System.Guid instanceID, System.AsyncCallback callback, object asyncState) {
        return this.BeginInvoke("CardGetInfo", new object[] {
                    sessionId,
                    instanceID}, callback, asyncState);
    }
    
    /// <remarks/>
    public string EndCardGetInfo(System.IAsyncResult asyncResult) {
        object[] results = this.EndInvoke(asyncResult);
        return ((string)(results[0]));
    }
    
    /// <remarks/>
    public void CardGetInfoAsync(System.Guid sessionId, System.Guid instanceID) {
        this.CardGetInfoAsync(sessionId, instanceID, null);
    }
    
    /// <remarks/>
    public void CardGetInfoAsync(System.Guid sessionId, System.Guid instanceID, object userState) {
        if ((this.CardGetInfoOperationCompleted == null)) {
            this.CardGetInfoOperationCompleted = new System.Threading.SendOrPostCallback(this.OnCardGetInfoOperationCompleted);
        }
        this.InvokeAsync("CardGetInfo", new object[] {
                    sessionId,
                    instanceID}, this.CardGetInfoOperationCompleted, userState);
    }
    
    private void OnCardGetInfoOperationCompleted(object arg) {
        if ((this.CardGetInfoCompleted != null)) {
            System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
            this.CardGetInfoCompleted(this, new CardGetInfoCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
        }
    }
    
    /// <remarks/>
    [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://schemas.docsvision.com/Platform/2009-02-03/StorageServer/CardGetInfoEx", RequestNamespace="http://schemas.docsvision.com/Platform/2009-02-03/StorageServer/", ResponseNamespace="http://schemas.docsvision.com/Platform/2009-02-03/StorageServer/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
    [return: System.Xml.Serialization.XmlElementAttribute("cardInfo")]
    public string CardGetInfoEx(System.Guid sessionId, System.Guid instanceID, string timestampRequest) {
        object[] results = this.Invoke("CardGetInfoEx", new object[] {
                    sessionId,
                    instanceID,
                    timestampRequest});
        return ((string)(results[0]));
    }
    
    /// <remarks/>
    public System.IAsyncResult BeginCardGetInfoEx(System.Guid sessionId, System.Guid instanceID, string timestampRequest, System.AsyncCallback callback, object asyncState) {
        return this.BeginInvoke("CardGetInfoEx", new object[] {
                    sessionId,
                    instanceID,
                    timestampRequest}, callback, asyncState);
    }
    
    /// <remarks/>
    public string EndCardGetInfoEx(System.IAsyncResult asyncResult) {
        object[] results = this.EndInvoke(asyncResult);
        return ((string)(results[0]));
    }
    
    /// <remarks/>
    public void CardGetInfoExAsync(System.Guid sessionId, System.Guid instanceID, string timestampRequest) {
        this.CardGetInfoExAsync(sessionId, instanceID, timestampRequest, null);
    }
    
    /// <remarks/>
    public void CardGetInfoExAsync(System.Guid sessionId, System.Guid instanceID, string timestampRequest, object userState) {
        if ((this.CardGetInfoExOperationCompleted == null)) {
            this.CardGetInfoExOperationCompleted = new System.Threading.SendOrPostCallback(this.OnCardGetInfoExOperationCompleted);
        }
        this.InvokeAsync("CardGetInfoEx", new object[] {
                    sessionId,
                    instanceID,
                    timestampRequest}, this.CardGetInfoExOperationCompleted, userState);
    }
    
    private void OnCardGetInfoExOperationCompleted(object arg) {
        if ((this.CardGetInfoExCompleted != null)) {
            System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
            this.CardGetInfoExCompleted(this, new CardGetInfoExCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
        }
    }
    
    /// <remarks/>
    [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://schemas.docsvision.com/Platform/2009-02-03/StorageServer/CardGetList", RequestNamespace="http://schemas.docsvision.com/Platform/2009-02-03/StorageServer/", ResponseNamespace="http://schemas.docsvision.com/Platform/2009-02-03/StorageServer/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
    [return: System.Xml.Serialization.XmlElementAttribute("cardInfo")]
    public string CardGetList(System.Guid sessionId, System.Guid cardId) {
        object[] results = this.Invoke("CardGetList", new object[] {
                    sessionId,
                    cardId});
        return ((string)(results[0]));
    }
    
    /// <remarks/>
    public System.IAsyncResult BeginCardGetList(System.Guid sessionId, System.Guid cardId, System.AsyncCallback callback, object asyncState) {
        return this.BeginInvoke("CardGetList", new object[] {
                    sessionId,
                    cardId}, callback, asyncState);
    }
    
    /// <remarks/>
    public string EndCardGetList(System.IAsyncResult asyncResult) {
        object[] results = this.EndInvoke(asyncResult);
        return ((string)(results[0]));
    }
    
    /// <remarks/>
    public void CardGetListAsync(System.Guid sessionId, System.Guid cardId) {
        this.CardGetListAsync(sessionId, cardId, null);
    }
    
    /// <remarks/>
    public void CardGetListAsync(System.Guid sessionId, System.Guid cardId, object userState) {
        if ((this.CardGetListOperationCompleted == null)) {
            this.CardGetListOperationCompleted = new System.Threading.SendOrPostCallback(this.OnCardGetListOperationCompleted);
        }
        this.InvokeAsync("CardGetList", new object[] {
                    sessionId,
                    cardId}, this.CardGetListOperationCompleted, userState);
    }
    
    private void OnCardGetListOperationCompleted(object arg) {
        if ((this.CardGetListCompleted != null)) {
            System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
            this.CardGetListCompleted(this, new CardGetListCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
        }
    }
    
    /// <remarks/>
    [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://schemas.docsvision.com/Platform/2009-02-03/StorageServer/CardGetState", RequestNamespace="http://schemas.docsvision.com/Platform/2009-02-03/StorageServer/", ResponseNamespace="http://schemas.docsvision.com/Platform/2009-02-03/StorageServer/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
    [return: System.Xml.Serialization.XmlElementAttribute("state")]
    public CardStateEnum CardGetState(System.Guid sessionId, System.Guid instanceID) {
        object[] results = this.Invoke("CardGetState", new object[] {
                    sessionId,
                    instanceID});
        return ((CardStateEnum)(results[0]));
    }
    
    /// <remarks/>
    public System.IAsyncResult BeginCardGetState(System.Guid sessionId, System.Guid instanceID, System.AsyncCallback callback, object asyncState) {
        return this.BeginInvoke("CardGetState", new object[] {
                    sessionId,
                    instanceID}, callback, asyncState);
    }
    
    /// <remarks/>
    public CardStateEnum EndCardGetState(System.IAsyncResult asyncResult) {
        object[] results = this.EndInvoke(asyncResult);
        return ((CardStateEnum)(results[0]));
    }
    
    /// <remarks/>
    public void CardGetStateAsync(System.Guid sessionId, System.Guid instanceID) {
        this.CardGetStateAsync(sessionId, instanceID, null);
    }
    
    /// <remarks/>
    public void CardGetStateAsync(System.Guid sessionId, System.Guid instanceID, object userState) {
        if ((this.CardGetStateOperationCompleted == null)) {
            this.CardGetStateOperationCompleted = new System.Threading.SendOrPostCallback(this.OnCardGetStateOperationCompleted);
        }
        this.InvokeAsync("CardGetState", new object[] {
                    sessionId,
                    instanceID}, this.CardGetStateOperationCompleted, userState);
    }
    
    private void OnCardGetStateOperationCompleted(object arg) {
        if ((this.CardGetStateCompleted != null)) {
            System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
            this.CardGetStateCompleted(this, new CardGetStateCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
        }
    }
    
    /// <remarks/>
    [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://schemas.docsvision.com/Platform/2009-02-03/StorageServer/CardLibGetInfo", RequestNamespace="http://schemas.docsvision.com/Platform/2009-02-03/StorageServer/", ResponseNamespace="http://schemas.docsvision.com/Platform/2009-02-03/StorageServer/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
    [return: System.Xml.Serialization.XmlElementAttribute("cardLibInfo")]
    public string CardLibGetInfo(System.Guid sessionId, System.Guid cardLibId, CardTypeInfoEnum infoType, out bool usingCompression) {
        object[] results = this.Invoke("CardLibGetInfo", new object[] {
                    sessionId,
                    cardLibId,
                    infoType});
        usingCompression = ((bool)(results[1]));
        return ((string)(results[0]));
    }
    
    /// <remarks/>
    public System.IAsyncResult BeginCardLibGetInfo(System.Guid sessionId, System.Guid cardLibId, CardTypeInfoEnum infoType, System.AsyncCallback callback, object asyncState) {
        return this.BeginInvoke("CardLibGetInfo", new object[] {
                    sessionId,
                    cardLibId,
                    infoType}, callback, asyncState);
    }
    
    /// <remarks/>
    public string EndCardLibGetInfo(System.IAsyncResult asyncResult, out bool usingCompression) {
        object[] results = this.EndInvoke(asyncResult);
        usingCompression = ((bool)(results[1]));
        return ((string)(results[0]));
    }
    
    /// <remarks/>
    public void CardLibGetInfoAsync(System.Guid sessionId, System.Guid cardLibId, CardTypeInfoEnum infoType) {
        this.CardLibGetInfoAsync(sessionId, cardLibId, infoType, null);
    }
    
    /// <remarks/>
    public void CardLibGetInfoAsync(System.Guid sessionId, System.Guid cardLibId, CardTypeInfoEnum infoType, object userState) {
        if ((this.CardLibGetInfoOperationCompleted == null)) {
            this.CardLibGetInfoOperationCompleted = new System.Threading.SendOrPostCallback(this.OnCardLibGetInfoOperationCompleted);
        }
        this.InvokeAsync("CardLibGetInfo", new object[] {
                    sessionId,
                    cardLibId,
                    infoType}, this.CardLibGetInfoOperationCompleted, userState);
    }
    
    private void OnCardLibGetInfoOperationCompleted(object arg) {
        if ((this.CardLibGetInfoCompleted != null)) {
            System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
            this.CardLibGetInfoCompleted(this, new CardLibGetInfoCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
        }
    }
    
    /// <remarks/>
    [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://schemas.docsvision.com/Platform/2009-02-03/StorageServer/CardLibGetInfoIns" +
        "tall", RequestNamespace="http://schemas.docsvision.com/Platform/2009-02-03/StorageServer/", ResponseNamespace="http://schemas.docsvision.com/Platform/2009-02-03/StorageServer/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
    [return: System.Xml.Serialization.XmlElementAttribute("cardLibInfo")]
    public string CardLibGetInfoInstall(System.Guid sessionId, System.Guid cardLibId, out bool usingCompression) {
        object[] results = this.Invoke("CardLibGetInfoInstall", new object[] {
                    sessionId,
                    cardLibId});
        usingCompression = ((bool)(results[1]));
        return ((string)(results[0]));
    }
    
    /// <remarks/>
    public System.IAsyncResult BeginCardLibGetInfoInstall(System.Guid sessionId, System.Guid cardLibId, System.AsyncCallback callback, object asyncState) {
        return this.BeginInvoke("CardLibGetInfoInstall", new object[] {
                    sessionId,
                    cardLibId}, callback, asyncState);
    }
    
    /// <remarks/>
    public string EndCardLibGetInfoInstall(System.IAsyncResult asyncResult, out bool usingCompression) {
        object[] results = this.EndInvoke(asyncResult);
        usingCompression = ((bool)(results[1]));
        return ((string)(results[0]));
    }
    
    /// <remarks/>
    public void CardLibGetInfoInstallAsync(System.Guid sessionId, System.Guid cardLibId) {
        this.CardLibGetInfoInstallAsync(sessionId, cardLibId, null);
    }
    
    /// <remarks/>
    public void CardLibGetInfoInstallAsync(System.Guid sessionId, System.Guid cardLibId, object userState) {
        if ((this.CardLibGetInfoInstallOperationCompleted == null)) {
            this.CardLibGetInfoInstallOperationCompleted = new System.Threading.SendOrPostCallback(this.OnCardLibGetInfoInstallOperationCompleted);
        }
        this.InvokeAsync("CardLibGetInfoInstall", new object[] {
                    sessionId,
                    cardLibId}, this.CardLibGetInfoInstallOperationCompleted, userState);
    }
    
    private void OnCardLibGetInfoInstallOperationCompleted(object arg) {
        if ((this.CardLibGetInfoInstallCompleted != null)) {
            System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
            this.CardLibGetInfoInstallCompleted(this, new CardLibGetInfoInstallCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
        }
    }
    
    /// <remarks/>
    [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://schemas.docsvision.com/Platform/2009-02-03/StorageServer/CardLibGetList", RequestNamespace="http://schemas.docsvision.com/Platform/2009-02-03/StorageServer/", ResponseNamespace="http://schemas.docsvision.com/Platform/2009-02-03/StorageServer/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
    [return: System.Xml.Serialization.XmlElementAttribute("cardLibInfo")]
    public string CardLibGetList(System.Guid sessionId, out bool usingCompression) {
        object[] results = this.Invoke("CardLibGetList", new object[] {
                    sessionId});
        usingCompression = ((bool)(results[1]));
        return ((string)(results[0]));
    }
    
    /// <remarks/>
    public System.IAsyncResult BeginCardLibGetList(System.Guid sessionId, System.AsyncCallback callback, object asyncState) {
        return this.BeginInvoke("CardLibGetList", new object[] {
                    sessionId}, callback, asyncState);
    }
    
    /// <remarks/>
    public string EndCardLibGetList(System.IAsyncResult asyncResult, out bool usingCompression) {
        object[] results = this.EndInvoke(asyncResult);
        usingCompression = ((bool)(results[1]));
        return ((string)(results[0]));
    }
    
    /// <remarks/>
    public void CardLibGetListAsync(System.Guid sessionId) {
        this.CardLibGetListAsync(sessionId, null);
    }
    
    /// <remarks/>
    public void CardLibGetListAsync(System.Guid sessionId, object userState) {
        if ((this.CardLibGetListOperationCompleted == null)) {
            this.CardLibGetListOperationCompleted = new System.Threading.SendOrPostCallback(this.OnCardLibGetListOperationCompleted);
        }
        this.InvokeAsync("CardLibGetList", new object[] {
                    sessionId}, this.CardLibGetListOperationCompleted, userState);
    }
    
    private void OnCardLibGetListOperationCompleted(object arg) {
        if ((this.CardLibGetListCompleted != null)) {
            System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
            this.CardLibGetListCompleted(this, new CardLibGetListCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
        }
    }
    
    /// <remarks/>
    [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://schemas.docsvision.com/Platform/2009-02-03/StorageServer/CardPurge", RequestNamespace="http://schemas.docsvision.com/Platform/2009-02-03/StorageServer/", ResponseNamespace="http://schemas.docsvision.com/Platform/2009-02-03/StorageServer/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
    public void CardPurge(System.Guid sessionId, System.Guid cardId, double maxDate) {
        this.Invoke("CardPurge", new object[] {
                    sessionId,
                    cardId,
                    maxDate});
    }
    
    /// <remarks/>
    public System.IAsyncResult BeginCardPurge(System.Guid sessionId, System.Guid cardId, double maxDate, System.AsyncCallback callback, object asyncState) {
        return this.BeginInvoke("CardPurge", new object[] {
                    sessionId,
                    cardId,
                    maxDate}, callback, asyncState);
    }
    
    /// <remarks/>
    public void EndCardPurge(System.IAsyncResult asyncResult) {
        this.EndInvoke(asyncResult);
    }
    
    /// <remarks/>
    public void CardPurgeAsync(System.Guid sessionId, System.Guid cardId, double maxDate) {
        this.CardPurgeAsync(sessionId, cardId, maxDate, null);
    }
    
    /// <remarks/>
    public void CardPurgeAsync(System.Guid sessionId, System.Guid cardId, double maxDate, object userState) {
        if ((this.CardPurgeOperationCompleted == null)) {
            this.CardPurgeOperationCompleted = new System.Threading.SendOrPostCallback(this.OnCardPurgeOperationCompleted);
        }
        this.InvokeAsync("CardPurge", new object[] {
                    sessionId,
                    cardId,
                    maxDate}, this.CardPurgeOperationCompleted, userState);
    }
    
    private void OnCardPurgeOperationCompleted(object arg) {
        if ((this.CardPurgeCompleted != null)) {
            System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
            this.CardPurgeCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
        }
    }
    
    /// <remarks/>
    [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://schemas.docsvision.com/Platform/2009-02-03/StorageServer/CardRestore", RequestNamespace="http://schemas.docsvision.com/Platform/2009-02-03/StorageServer/", ResponseNamespace="http://schemas.docsvision.com/Platform/2009-02-03/StorageServer/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
    public void CardRestore(System.Guid sessionId, System.Guid instanceID) {
        this.Invoke("CardRestore", new object[] {
                    sessionId,
                    instanceID});
    }
    
    /// <remarks/>
    public System.IAsyncResult BeginCardRestore(System.Guid sessionId, System.Guid instanceID, System.AsyncCallback callback, object asyncState) {
        return this.BeginInvoke("CardRestore", new object[] {
                    sessionId,
                    instanceID}, callback, asyncState);
    }
    
    /// <remarks/>
    public void EndCardRestore(System.IAsyncResult asyncResult) {
        this.EndInvoke(asyncResult);
    }
    
    /// <remarks/>
    public void CardRestoreAsync(System.Guid sessionId, System.Guid instanceID) {
        this.CardRestoreAsync(sessionId, instanceID, null);
    }
    
    /// <remarks/>
    public void CardRestoreAsync(System.Guid sessionId, System.Guid instanceID, object userState) {
        if ((this.CardRestoreOperationCompleted == null)) {
            this.CardRestoreOperationCompleted = new System.Threading.SendOrPostCallback(this.OnCardRestoreOperationCompleted);
        }
        this.InvokeAsync("CardRestore", new object[] {
                    sessionId,
                    instanceID}, this.CardRestoreOperationCompleted, userState);
    }
    
    private void OnCardRestoreOperationCompleted(object arg) {
        if ((this.CardRestoreCompleted != null)) {
            System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
            this.CardRestoreCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
        }
    }
    
    /// <remarks/>
    [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://schemas.docsvision.com/Platform/2009-02-03/StorageServer/CardRestoreGroup", RequestNamespace="http://schemas.docsvision.com/Platform/2009-02-03/StorageServer/", ResponseNamespace="http://schemas.docsvision.com/Platform/2009-02-03/StorageServer/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
    [return: System.Xml.Serialization.XmlElementAttribute("failedItems")]
    public string CardRestoreGroup(System.Guid sessionId, string items) {
        object[] results = this.Invoke("CardRestoreGroup", new object[] {
                    sessionId,
                    items});
        return ((string)(results[0]));
    }
    
    /// <remarks/>
    public System.IAsyncResult BeginCardRestoreGroup(System.Guid sessionId, string items, System.AsyncCallback callback, object asyncState) {
        return this.BeginInvoke("CardRestoreGroup", new object[] {
                    sessionId,
                    items}, callback, asyncState);
    }
    
    /// <remarks/>
    public string EndCardRestoreGroup(System.IAsyncResult asyncResult) {
        object[] results = this.EndInvoke(asyncResult);
        return ((string)(results[0]));
    }
    
    /// <remarks/>
    public void CardRestoreGroupAsync(System.Guid sessionId, string items) {
        this.CardRestoreGroupAsync(sessionId, items, null);
    }
    
    /// <remarks/>
    public void CardRestoreGroupAsync(System.Guid sessionId, string items, object userState) {
        if ((this.CardRestoreGroupOperationCompleted == null)) {
            this.CardRestoreGroupOperationCompleted = new System.Threading.SendOrPostCallback(this.OnCardRestoreGroupOperationCompleted);
        }
        this.InvokeAsync("CardRestoreGroup", new object[] {
                    sessionId,
                    items}, this.CardRestoreGroupOperationCompleted, userState);
    }
    
    private void OnCardRestoreGroupOperationCompleted(object arg) {
        if ((this.CardRestoreGroupCompleted != null)) {
            System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
            this.CardRestoreGroupCompleted(this, new CardRestoreGroupCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
        }
    }
    
    /// <remarks/>
    [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://schemas.docsvision.com/Platform/2009-02-03/StorageServer/CardSetInfo", RequestNamespace="http://schemas.docsvision.com/Platform/2009-02-03/StorageServer/", ResponseNamespace="http://schemas.docsvision.com/Platform/2009-02-03/StorageServer/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
    public void CardSetInfo(System.Guid sessionId, System.Guid instanceID, string description, bool template, string topic) {
        this.Invoke("CardSetInfo", new object[] {
                    sessionId,
                    instanceID,
                    description,
                    template,
                    topic});
    }
    
    /// <remarks/>
    public System.IAsyncResult BeginCardSetInfo(System.Guid sessionId, System.Guid instanceID, string description, bool template, string topic, System.AsyncCallback callback, object asyncState) {
        return this.BeginInvoke("CardSetInfo", new object[] {
                    sessionId,
                    instanceID,
                    description,
                    template,
                    topic}, callback, asyncState);
    }
    
    /// <remarks/>
    public void EndCardSetInfo(System.IAsyncResult asyncResult) {
        this.EndInvoke(asyncResult);
    }
    
    /// <remarks/>
    public void CardSetInfoAsync(System.Guid sessionId, System.Guid instanceID, string description, bool template, string topic) {
        this.CardSetInfoAsync(sessionId, instanceID, description, template, topic, null);
    }
    
    /// <remarks/>
    public void CardSetInfoAsync(System.Guid sessionId, System.Guid instanceID, string description, bool template, string topic, object userState) {
        if ((this.CardSetInfoOperationCompleted == null)) {
            this.CardSetInfoOperationCompleted = new System.Threading.SendOrPostCallback(this.OnCardSetInfoOperationCompleted);
        }
        this.InvokeAsync("CardSetInfo", new object[] {
                    sessionId,
                    instanceID,
                    description,
                    template,
                    topic}, this.CardSetInfoOperationCompleted, userState);
    }
    
    private void OnCardSetInfoOperationCompleted(object arg) {
        if ((this.CardSetInfoCompleted != null)) {
            System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
            this.CardSetInfoCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
        }
    }
    
    /// <remarks/>
    [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://schemas.docsvision.com/Platform/2009-02-03/StorageServer/CardSetInfoEx", RequestNamespace="http://schemas.docsvision.com/Platform/2009-02-03/StorageServer/", ResponseNamespace="http://schemas.docsvision.com/Platform/2009-02-03/StorageServer/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
    public void CardSetInfoEx(System.Guid sessionId, System.Guid instanceID, string description, bool template, string topic, string barcode) {
        this.Invoke("CardSetInfoEx", new object[] {
                    sessionId,
                    instanceID,
                    description,
                    template,
                    topic,
                    barcode});
    }
    
    /// <remarks/>
    public System.IAsyncResult BeginCardSetInfoEx(System.Guid sessionId, System.Guid instanceID, string description, bool template, string topic, string barcode, System.AsyncCallback callback, object asyncState) {
        return this.BeginInvoke("CardSetInfoEx", new object[] {
                    sessionId,
                    instanceID,
                    description,
                    template,
                    topic,
                    barcode}, callback, asyncState);
    }
    
    /// <remarks/>
    public void EndCardSetInfoEx(System.IAsyncResult asyncResult) {
        this.EndInvoke(asyncResult);
    }
    
    /// <remarks/>
    public void CardSetInfoExAsync(System.Guid sessionId, System.Guid instanceID, string description, bool template, string topic, string barcode) {
        this.CardSetInfoExAsync(sessionId, instanceID, description, template, topic, barcode, null);
    }
    
    /// <remarks/>
    public void CardSetInfoExAsync(System.Guid sessionId, System.Guid instanceID, string description, bool template, string topic, string barcode, object userState) {
        if ((this.CardSetInfoExOperationCompleted == null)) {
            this.CardSetInfoExOperationCompleted = new System.Threading.SendOrPostCallback(this.OnCardSetInfoExOperationCompleted);
        }
        this.InvokeAsync("CardSetInfoEx", new object[] {
                    sessionId,
                    instanceID,
                    description,
                    template,
                    topic,
                    barcode}, this.CardSetInfoExOperationCompleted, userState);
    }
    
    private void OnCardSetInfoExOperationCompleted(object arg) {
        if ((this.CardSetInfoExCompleted != null)) {
            System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
            this.CardSetInfoExCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
        }
    }
    
    /// <remarks/>
    [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://schemas.docsvision.com/Platform/2009-02-03/StorageServer/CardSetReadStatus" +
        "", RequestNamespace="http://schemas.docsvision.com/Platform/2009-02-03/StorageServer/", ResponseNamespace="http://schemas.docsvision.com/Platform/2009-02-03/StorageServer/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
    public void CardSetReadStatus(System.Guid sessionId, System.Guid instanceID, bool wasRead) {
        this.Invoke("CardSetReadStatus", new object[] {
                    sessionId,
                    instanceID,
                    wasRead});
    }
    
    /// <remarks/>
    public System.IAsyncResult BeginCardSetReadStatus(System.Guid sessionId, System.Guid instanceID, bool wasRead, System.AsyncCallback callback, object asyncState) {
        return this.BeginInvoke("CardSetReadStatus", new object[] {
                    sessionId,
                    instanceID,
                    wasRead}, callback, asyncState);
    }
    
    /// <remarks/>
    public void EndCardSetReadStatus(System.IAsyncResult asyncResult) {
        this.EndInvoke(asyncResult);
    }
    
    /// <remarks/>
    public void CardSetReadStatusAsync(System.Guid sessionId, System.Guid instanceID, bool wasRead) {
        this.CardSetReadStatusAsync(sessionId, instanceID, wasRead, null);
    }
    
    /// <remarks/>
    public void CardSetReadStatusAsync(System.Guid sessionId, System.Guid instanceID, bool wasRead, object userState) {
        if ((this.CardSetReadStatusOperationCompleted == null)) {
            this.CardSetReadStatusOperationCompleted = new System.Threading.SendOrPostCallback(this.OnCardSetReadStatusOperationCompleted);
        }
        this.InvokeAsync("CardSetReadStatus", new object[] {
                    sessionId,
                    instanceID,
                    wasRead}, this.CardSetReadStatusOperationCompleted, userState);
    }
    
    private void OnCardSetReadStatusOperationCompleted(object arg) {
        if ((this.CardSetReadStatusCompleted != null)) {
            System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
            this.CardSetReadStatusCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
        }
    }
    
    /// <remarks/>
    [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://schemas.docsvision.com/Platform/2009-02-03/StorageServer/CardSetStatus", RequestNamespace="http://schemas.docsvision.com/Platform/2009-02-03/StorageServer/", ResponseNamespace="http://schemas.docsvision.com/Platform/2009-02-03/StorageServer/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
    public void CardSetStatus(System.Guid sessionId, System.Guid instanceId, RecordStatus recordStatus) {
        this.Invoke("CardSetStatus", new object[] {
                    sessionId,
                    instanceId,
                    recordStatus});
    }
    
    /// <remarks/>
    public System.IAsyncResult BeginCardSetStatus(System.Guid sessionId, System.Guid instanceId, RecordStatus recordStatus, System.AsyncCallback callback, object asyncState) {
        return this.BeginInvoke("CardSetStatus", new object[] {
                    sessionId,
                    instanceId,
                    recordStatus}, callback, asyncState);
    }
    
    /// <remarks/>
    public void EndCardSetStatus(System.IAsyncResult asyncResult) {
        this.EndInvoke(asyncResult);
    }
    
    /// <remarks/>
    public void CardSetStatusAsync(System.Guid sessionId, System.Guid instanceId, RecordStatus recordStatus) {
        this.CardSetStatusAsync(sessionId, instanceId, recordStatus, null);
    }
    
    /// <remarks/>
    public void CardSetStatusAsync(System.Guid sessionId, System.Guid instanceId, RecordStatus recordStatus, object userState) {
        if ((this.CardSetStatusOperationCompleted == null)) {
            this.CardSetStatusOperationCompleted = new System.Threading.SendOrPostCallback(this.OnCardSetStatusOperationCompleted);
        }
        this.InvokeAsync("CardSetStatus", new object[] {
                    sessionId,
                    instanceId,
                    recordStatus}, this.CardSetStatusOperationCompleted, userState);
    }
    
    private void OnCardSetStatusOperationCompleted(object arg) {
        if ((this.CardSetStatusCompleted != null)) {
            System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
            this.CardSetStatusCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
        }
    }
    
    /// <remarks/>
    [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://schemas.docsvision.com/Platform/2009-02-03/StorageServer/CardTypeGetInfo", RequestNamespace="http://schemas.docsvision.com/Platform/2009-02-03/StorageServer/", ResponseNamespace="http://schemas.docsvision.com/Platform/2009-02-03/StorageServer/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
    [return: System.Xml.Serialization.XmlElementAttribute("info")]
    public string CardTypeGetInfo(System.Guid sessionId, System.Guid typeId, CardTypeInfoEnum infoType, out bool usingCompression) {
        object[] results = this.Invoke("CardTypeGetInfo", new object[] {
                    sessionId,
                    typeId,
                    infoType});
        usingCompression = ((bool)(results[1]));
        return ((string)(results[0]));
    }
    
    /// <remarks/>
    public System.IAsyncResult BeginCardTypeGetInfo(System.Guid sessionId, System.Guid typeId, CardTypeInfoEnum infoType, System.AsyncCallback callback, object asyncState) {
        return this.BeginInvoke("CardTypeGetInfo", new object[] {
                    sessionId,
                    typeId,
                    infoType}, callback, asyncState);
    }
    
    /// <remarks/>
    public string EndCardTypeGetInfo(System.IAsyncResult asyncResult, out bool usingCompression) {
        object[] results = this.EndInvoke(asyncResult);
        usingCompression = ((bool)(results[1]));
        return ((string)(results[0]));
    }
    
    /// <remarks/>
    public void CardTypeGetInfoAsync(System.Guid sessionId, System.Guid typeId, CardTypeInfoEnum infoType) {
        this.CardTypeGetInfoAsync(sessionId, typeId, infoType, null);
    }
    
    /// <remarks/>
    public void CardTypeGetInfoAsync(System.Guid sessionId, System.Guid typeId, CardTypeInfoEnum infoType, object userState) {
        if ((this.CardTypeGetInfoOperationCompleted == null)) {
            this.CardTypeGetInfoOperationCompleted = new System.Threading.SendOrPostCallback(this.OnCardTypeGetInfoOperationCompleted);
        }
        this.InvokeAsync("CardTypeGetInfo", new object[] {
                    sessionId,
                    typeId,
                    infoType}, this.CardTypeGetInfoOperationCompleted, userState);
    }
    
    private void OnCardTypeGetInfoOperationCompleted(object arg) {
        if ((this.CardTypeGetInfoCompleted != null)) {
            System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
            this.CardTypeGetInfoCompleted(this, new CardTypeGetInfoCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
        }
    }
    
    /// <remarks/>
    [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://schemas.docsvision.com/Platform/2009-02-03/StorageServer/CardTypeGetList", RequestNamespace="http://schemas.docsvision.com/Platform/2009-02-03/StorageServer/", ResponseNamespace="http://schemas.docsvision.com/Platform/2009-02-03/StorageServer/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
    [return: System.Xml.Serialization.XmlElementAttribute("cardTypeInfo")]
    public string CardTypeGetList(System.Guid sessionId, out bool usingCompression) {
        object[] results = this.Invoke("CardTypeGetList", new object[] {
                    sessionId});
        usingCompression = ((bool)(results[1]));
        return ((string)(results[0]));
    }
    
    /// <remarks/>
    public System.IAsyncResult BeginCardTypeGetList(System.Guid sessionId, System.AsyncCallback callback, object asyncState) {
        return this.BeginInvoke("CardTypeGetList", new object[] {
                    sessionId}, callback, asyncState);
    }
    
    /// <remarks/>
    public string EndCardTypeGetList(System.IAsyncResult asyncResult, out bool usingCompression) {
        object[] results = this.EndInvoke(asyncResult);
        usingCompression = ((bool)(results[1]));
        return ((string)(results[0]));
    }
    
    /// <remarks/>
    public void CardTypeGetListAsync(System.Guid sessionId) {
        this.CardTypeGetListAsync(sessionId, null);
    }
    
    /// <remarks/>
    public void CardTypeGetListAsync(System.Guid sessionId, object userState) {
        if ((this.CardTypeGetListOperationCompleted == null)) {
            this.CardTypeGetListOperationCompleted = new System.Threading.SendOrPostCallback(this.OnCardTypeGetListOperationCompleted);
        }
        this.InvokeAsync("CardTypeGetList", new object[] {
                    sessionId}, this.CardTypeGetListOperationCompleted, userState);
    }
    
    private void OnCardTypeGetListOperationCompleted(object arg) {
        if ((this.CardTypeGetListCompleted != null)) {
            System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
            this.CardTypeGetListCompleted(this, new CardTypeGetListCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
        }
    }
    
    /// <remarks/>
    [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://schemas.docsvision.com/Platform/2009-02-03/StorageServer/CardTypeSetOption" +
        "s", RequestNamespace="http://schemas.docsvision.com/Platform/2009-02-03/StorageServer/", ResponseNamespace="http://schemas.docsvision.com/Platform/2009-02-03/StorageServer/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
    public void CardTypeSetOptions(System.Guid sessionId, System.Guid cardId, ref int options) {
        object[] results = this.Invoke("CardTypeSetOptions", new object[] {
                    sessionId,
                    cardId,
                    options});
        options = ((int)(results[0]));
    }
    
    /// <remarks/>
    public System.IAsyncResult BeginCardTypeSetOptions(System.Guid sessionId, System.Guid cardId, int options, System.AsyncCallback callback, object asyncState) {
        return this.BeginInvoke("CardTypeSetOptions", new object[] {
                    sessionId,
                    cardId,
                    options}, callback, asyncState);
    }
    
    /// <remarks/>
    public void EndCardTypeSetOptions(System.IAsyncResult asyncResult, out int options) {
        object[] results = this.EndInvoke(asyncResult);
        options = ((int)(results[0]));
    }
    
    /// <remarks/>
    public void CardTypeSetOptionsAsync(System.Guid sessionId, System.Guid cardId, int options) {
        this.CardTypeSetOptionsAsync(sessionId, cardId, options, null);
    }
    
    /// <remarks/>
    public void CardTypeSetOptionsAsync(System.Guid sessionId, System.Guid cardId, int options, object userState) {
        if ((this.CardTypeSetOptionsOperationCompleted == null)) {
            this.CardTypeSetOptionsOperationCompleted = new System.Threading.SendOrPostCallback(this.OnCardTypeSetOptionsOperationCompleted);
        }
        this.InvokeAsync("CardTypeSetOptions", new object[] {
                    sessionId,
                    cardId,
                    options}, this.CardTypeSetOptionsOperationCompleted, userState);
    }
    
    private void OnCardTypeSetOptionsOperationCompleted(object arg) {
        if ((this.CardTypeSetOptionsCompleted != null)) {
            System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
            this.CardTypeSetOptionsCompleted(this, new CardTypeSetOptionsCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
        }
    }
    
    /// <remarks/>
    [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://schemas.docsvision.com/Platform/2009-02-03/StorageServer/CryptoAddObject", RequestNamespace="http://schemas.docsvision.com/Platform/2009-02-03/StorageServer/", ResponseNamespace="http://schemas.docsvision.com/Platform/2009-02-03/StorageServer/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
    [return: System.Xml.Serialization.XmlElementAttribute("cryptoId")]
    public System.Guid CryptoAddObject(System.Guid sessionId, System.Guid objectId, string accountName, System.Guid representUserId, CryptoDataTypeEnum dataType, string certThumbprint, [System.Xml.Serialization.XmlElementAttribute(DataType="base64Binary")] byte[] data, string description) {
        object[] results = this.Invoke("CryptoAddObject", new object[] {
                    sessionId,
                    objectId,
                    accountName,
                    representUserId,
                    dataType,
                    certThumbprint,
                    data,
                    description});
        return ((System.Guid)(results[0]));
    }
    
    /// <remarks/>
    public System.IAsyncResult BeginCryptoAddObject(System.Guid sessionId, System.Guid objectId, string accountName, System.Guid representUserId, CryptoDataTypeEnum dataType, string certThumbprint, byte[] data, string description, System.AsyncCallback callback, object asyncState) {
        return this.BeginInvoke("CryptoAddObject", new object[] {
                    sessionId,
                    objectId,
                    accountName,
                    representUserId,
                    dataType,
                    certThumbprint,
                    data,
                    description}, callback, asyncState);
    }
    
    /// <remarks/>
    public System.Guid EndCryptoAddObject(System.IAsyncResult asyncResult) {
        object[] results = this.EndInvoke(asyncResult);
        return ((System.Guid)(results[0]));
    }
    
    /// <remarks/>
    public void CryptoAddObjectAsync(System.Guid sessionId, System.Guid objectId, string accountName, System.Guid representUserId, CryptoDataTypeEnum dataType, string certThumbprint, byte[] data, string description) {
        this.CryptoAddObjectAsync(sessionId, objectId, accountName, representUserId, dataType, certThumbprint, data, description, null);
    }
    
    /// <remarks/>
    public void CryptoAddObjectAsync(System.Guid sessionId, System.Guid objectId, string accountName, System.Guid representUserId, CryptoDataTypeEnum dataType, string certThumbprint, byte[] data, string description, object userState) {
        if ((this.CryptoAddObjectOperationCompleted == null)) {
            this.CryptoAddObjectOperationCompleted = new System.Threading.SendOrPostCallback(this.OnCryptoAddObjectOperationCompleted);
        }
        this.InvokeAsync("CryptoAddObject", new object[] {
                    sessionId,
                    objectId,
                    accountName,
                    representUserId,
                    dataType,
                    certThumbprint,
                    data,
                    description}, this.CryptoAddObjectOperationCompleted, userState);
    }
    
    private void OnCryptoAddObjectOperationCompleted(object arg) {
        if ((this.CryptoAddObjectCompleted != null)) {
            System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
            this.CryptoAddObjectCompleted(this, new CryptoAddObjectCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
        }
    }
    
    /// <remarks/>
    [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://schemas.docsvision.com/Platform/2009-02-03/StorageServer/CryptoAddObjectEx" +
        "", RequestNamespace="http://schemas.docsvision.com/Platform/2009-02-03/StorageServer/", ResponseNamespace="http://schemas.docsvision.com/Platform/2009-02-03/StorageServer/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
    [return: System.Xml.Serialization.XmlElementAttribute("cryptoId")]
    public System.Guid CryptoAddObjectEx(System.Guid sessionId, System.Guid parentObjectId, System.Guid objectId, string accountName, System.Guid representUserId, CryptoDataTypeEnum dataType, string certThumbprint, [System.Xml.Serialization.XmlElementAttribute(DataType="base64Binary")] byte[] data, string description) {
        object[] results = this.Invoke("CryptoAddObjectEx", new object[] {
                    sessionId,
                    parentObjectId,
                    objectId,
                    accountName,
                    representUserId,
                    dataType,
                    certThumbprint,
                    data,
                    description});
        return ((System.Guid)(results[0]));
    }
    
    /// <remarks/>
    public System.IAsyncResult BeginCryptoAddObjectEx(System.Guid sessionId, System.Guid parentObjectId, System.Guid objectId, string accountName, System.Guid representUserId, CryptoDataTypeEnum dataType, string certThumbprint, byte[] data, string description, System.AsyncCallback callback, object asyncState) {
        return this.BeginInvoke("CryptoAddObjectEx", new object[] {
                    sessionId,
                    parentObjectId,
                    objectId,
                    accountName,
                    representUserId,
                    dataType,
                    certThumbprint,
                    data,
                    description}, callback, asyncState);
    }
    
    /// <remarks/>
    public System.Guid EndCryptoAddObjectEx(System.IAsyncResult asyncResult) {
        object[] results = this.EndInvoke(asyncResult);
        return ((System.Guid)(results[0]));
    }
    
    /// <remarks/>
    public void CryptoAddObjectExAsync(System.Guid sessionId, System.Guid parentObjectId, System.Guid objectId, string accountName, System.Guid representUserId, CryptoDataTypeEnum dataType, string certThumbprint, byte[] data, string description) {
        this.CryptoAddObjectExAsync(sessionId, parentObjectId, objectId, accountName, representUserId, dataType, certThumbprint, data, description, null);
    }
    
    /// <remarks/>
    public void CryptoAddObjectExAsync(System.Guid sessionId, System.Guid parentObjectId, System.Guid objectId, string accountName, System.Guid representUserId, CryptoDataTypeEnum dataType, string certThumbprint, byte[] data, string description, object userState) {
        if ((this.CryptoAddObjectExOperationCompleted == null)) {
            this.CryptoAddObjectExOperationCompleted = new System.Threading.SendOrPostCallback(this.OnCryptoAddObjectExOperationCompleted);
        }
        this.InvokeAsync("CryptoAddObjectEx", new object[] {
                    sessionId,
                    parentObjectId,
                    objectId,
                    accountName,
                    representUserId,
                    dataType,
                    certThumbprint,
                    data,
                    description}, this.CryptoAddObjectExOperationCompleted, userState);
    }
    
    private void OnCryptoAddObjectExOperationCompleted(object arg) {
        if ((this.CryptoAddObjectExCompleted != null)) {
            System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
            this.CryptoAddObjectExCompleted(this, new CryptoAddObjectExCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
        }
    }
    
    /// <remarks/>
    [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://schemas.docsvision.com/Platform/2009-02-03/StorageServer/CryptoAddObjectWi" +
        "thID", RequestNamespace="http://schemas.docsvision.com/Platform/2009-02-03/StorageServer/", ResponseNamespace="http://schemas.docsvision.com/Platform/2009-02-03/StorageServer/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
    public void CryptoAddObjectWithID(System.Guid sessionId, System.Guid parentObjectId, System.Guid objectId, System.Guid cryptoId, string accountName, System.Guid representUserId, CryptoDataTypeEnum dataType, string certThumbprint, [System.Xml.Serialization.XmlElementAttribute(DataType="base64Binary")] byte[] data, string description) {
        this.Invoke("CryptoAddObjectWithID", new object[] {
                    sessionId,
                    parentObjectId,
                    objectId,
                    cryptoId,
                    accountName,
                    representUserId,
                    dataType,
                    certThumbprint,
                    data,
                    description});
    }
    
    /// <remarks/>
    public System.IAsyncResult BeginCryptoAddObjectWithID(System.Guid sessionId, System.Guid parentObjectId, System.Guid objectId, System.Guid cryptoId, string accountName, System.Guid representUserId, CryptoDataTypeEnum dataType, string certThumbprint, byte[] data, string description, System.AsyncCallback callback, object asyncState) {
        return this.BeginInvoke("CryptoAddObjectWithID", new object[] {
                    sessionId,
                    parentObjectId,
                    objectId,
                    cryptoId,
                    accountName,
                    representUserId,
                    dataType,
                    certThumbprint,
                    data,
                    description}, callback, asyncState);
    }
    
    /// <remarks/>
    public void EndCryptoAddObjectWithID(System.IAsyncResult asyncResult) {
        this.EndInvoke(asyncResult);
    }
    
    /// <remarks/>
    public void CryptoAddObjectWithIDAsync(System.Guid sessionId, System.Guid parentObjectId, System.Guid objectId, System.Guid cryptoId, string accountName, System.Guid representUserId, CryptoDataTypeEnum dataType, string certThumbprint, byte[] data, string description) {
        this.CryptoAddObjectWithIDAsync(sessionId, parentObjectId, objectId, cryptoId, accountName, representUserId, dataType, certThumbprint, data, description, null);
    }
    
    /// <remarks/>
    public void CryptoAddObjectWithIDAsync(System.Guid sessionId, System.Guid parentObjectId, System.Guid objectId, System.Guid cryptoId, string accountName, System.Guid representUserId, CryptoDataTypeEnum dataType, string certThumbprint, byte[] data, string description, object userState) {
        if ((this.CryptoAddObjectWithIDOperationCompleted == null)) {
            this.CryptoAddObjectWithIDOperationCompleted = new System.Threading.SendOrPostCallback(this.OnCryptoAddObjectWithIDOperationCompleted);
        }
        this.InvokeAsync("CryptoAddObjectWithID", new object[] {
                    sessionId,
                    parentObjectId,
                    objectId,
                    cryptoId,
                    accountName,
                    representUserId,
                    dataType,
                    certThumbprint,
                    data,
                    description}, this.CryptoAddObjectWithIDOperationCompleted, userState);
    }
    
    private void OnCryptoAddObjectWithIDOperationCompleted(object arg) {
        if ((this.CryptoAddObjectWithIDCompleted != null)) {
            System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
            this.CryptoAddObjectWithIDCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
        }
    }
    
    /// <remarks/>
    [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://schemas.docsvision.com/Platform/2009-02-03/StorageServer/CryptoDeleteObjec" +
        "t", RequestNamespace="http://schemas.docsvision.com/Platform/2009-02-03/StorageServer/", ResponseNamespace="http://schemas.docsvision.com/Platform/2009-02-03/StorageServer/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
    public void CryptoDeleteObject(System.Guid sessionId, System.Guid objectId, string accountName, bool deleteAll, CryptoDataTypeEnum dataType) {
        this.Invoke("CryptoDeleteObject", new object[] {
                    sessionId,
                    objectId,
                    accountName,
                    deleteAll,
                    dataType});
    }
    
    /// <remarks/>
    public System.IAsyncResult BeginCryptoDeleteObject(System.Guid sessionId, System.Guid objectId, string accountName, bool deleteAll, CryptoDataTypeEnum dataType, System.AsyncCallback callback, object asyncState) {
        return this.BeginInvoke("CryptoDeleteObject", new object[] {
                    sessionId,
                    objectId,
                    accountName,
                    deleteAll,
                    dataType}, callback, asyncState);
    }
    
    /// <remarks/>
    public void EndCryptoDeleteObject(System.IAsyncResult asyncResult) {
        this.EndInvoke(asyncResult);
    }
    
    /// <remarks/>
    public void CryptoDeleteObjectAsync(System.Guid sessionId, System.Guid objectId, string accountName, bool deleteAll, CryptoDataTypeEnum dataType) {
        this.CryptoDeleteObjectAsync(sessionId, objectId, accountName, deleteAll, dataType, null);
    }
    
    /// <remarks/>
    public void CryptoDeleteObjectAsync(System.Guid sessionId, System.Guid objectId, string accountName, bool deleteAll, CryptoDataTypeEnum dataType, object userState) {
        if ((this.CryptoDeleteObjectOperationCompleted == null)) {
            this.CryptoDeleteObjectOperationCompleted = new System.Threading.SendOrPostCallback(this.OnCryptoDeleteObjectOperationCompleted);
        }
        this.InvokeAsync("CryptoDeleteObject", new object[] {
                    sessionId,
                    objectId,
                    accountName,
                    deleteAll,
                    dataType}, this.CryptoDeleteObjectOperationCompleted, userState);
    }
    
    private void OnCryptoDeleteObjectOperationCompleted(object arg) {
        if ((this.CryptoDeleteObjectCompleted != null)) {
            System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
            this.CryptoDeleteObjectCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
        }
    }
    
    /// <remarks/>
    [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://schemas.docsvision.com/Platform/2009-02-03/StorageServer/CryptoDeleteObjec" +
        "tByID", RequestNamespace="http://schemas.docsvision.com/Platform/2009-02-03/StorageServer/", ResponseNamespace="http://schemas.docsvision.com/Platform/2009-02-03/StorageServer/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
    public void CryptoDeleteObjectByID(System.Guid sessionId, System.Guid cryptoId) {
        this.Invoke("CryptoDeleteObjectByID", new object[] {
                    sessionId,
                    cryptoId});
    }
    
    /// <remarks/>
    public System.IAsyncResult BeginCryptoDeleteObjectByID(System.Guid sessionId, System.Guid cryptoId, System.AsyncCallback callback, object asyncState) {
        return this.BeginInvoke("CryptoDeleteObjectByID", new object[] {
                    sessionId,
                    cryptoId}, callback, asyncState);
    }
    
    /// <remarks/>
    public void EndCryptoDeleteObjectByID(System.IAsyncResult asyncResult) {
        this.EndInvoke(asyncResult);
    }
    
    /// <remarks/>
    public void CryptoDeleteObjectByIDAsync(System.Guid sessionId, System.Guid cryptoId) {
        this.CryptoDeleteObjectByIDAsync(sessionId, cryptoId, null);
    }
    
    /// <remarks/>
    public void CryptoDeleteObjectByIDAsync(System.Guid sessionId, System.Guid cryptoId, object userState) {
        if ((this.CryptoDeleteObjectByIDOperationCompleted == null)) {
            this.CryptoDeleteObjectByIDOperationCompleted = new System.Threading.SendOrPostCallback(this.OnCryptoDeleteObjectByIDOperationCompleted);
        }
        this.InvokeAsync("CryptoDeleteObjectByID", new object[] {
                    sessionId,
                    cryptoId}, this.CryptoDeleteObjectByIDOperationCompleted, userState);
    }
    
    private void OnCryptoDeleteObjectByIDOperationCompleted(object arg) {
        if ((this.CryptoDeleteObjectByIDCompleted != null)) {
            System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
            this.CryptoDeleteObjectByIDCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
        }
    }
    
    /// <remarks/>
    [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://schemas.docsvision.com/Platform/2009-02-03/StorageServer/CryptoGetObject", RequestNamespace="http://schemas.docsvision.com/Platform/2009-02-03/StorageServer/", ResponseNamespace="http://schemas.docsvision.com/Platform/2009-02-03/StorageServer/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
    [return: System.Xml.Serialization.XmlElementAttribute("data", DataType="base64Binary")]
    public byte[] CryptoGetObject(System.Guid sessionId, System.Guid objectId, string accountName, CryptoDataTypeEnum dataType) {
        object[] results = this.Invoke("CryptoGetObject", new object[] {
                    sessionId,
                    objectId,
                    accountName,
                    dataType});
        return ((byte[])(results[0]));
    }
    
    /// <remarks/>
    public System.IAsyncResult BeginCryptoGetObject(System.Guid sessionId, System.Guid objectId, string accountName, CryptoDataTypeEnum dataType, System.AsyncCallback callback, object asyncState) {
        return this.BeginInvoke("CryptoGetObject", new object[] {
                    sessionId,
                    objectId,
                    accountName,
                    dataType}, callback, asyncState);
    }
    
    /// <remarks/>
    public byte[] EndCryptoGetObject(System.IAsyncResult asyncResult) {
        object[] results = this.EndInvoke(asyncResult);
        return ((byte[])(results[0]));
    }
    
    /// <remarks/>
    public void CryptoGetObjectAsync(System.Guid sessionId, System.Guid objectId, string accountName, CryptoDataTypeEnum dataType) {
        this.CryptoGetObjectAsync(sessionId, objectId, accountName, dataType, null);
    }
    
    /// <remarks/>
    public void CryptoGetObjectAsync(System.Guid sessionId, System.Guid objectId, string accountName, CryptoDataTypeEnum dataType, object userState) {
        if ((this.CryptoGetObjectOperationCompleted == null)) {
            this.CryptoGetObjectOperationCompleted = new System.Threading.SendOrPostCallback(this.OnCryptoGetObjectOperationCompleted);
        }
        this.InvokeAsync("CryptoGetObject", new object[] {
                    sessionId,
                    objectId,
                    accountName,
                    dataType}, this.CryptoGetObjectOperationCompleted, userState);
    }
    
    private void OnCryptoGetObjectOperationCompleted(object arg) {
        if ((this.CryptoGetObjectCompleted != null)) {
            System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
            this.CryptoGetObjectCompleted(this, new CryptoGetObjectCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
        }
    }
    
    /// <remarks/>
    [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://schemas.docsvision.com/Platform/2009-02-03/StorageServer/CryptoGetObjectBy" +
        "ID", RequestNamespace="http://schemas.docsvision.com/Platform/2009-02-03/StorageServer/", ResponseNamespace="http://schemas.docsvision.com/Platform/2009-02-03/StorageServer/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
    [return: System.Xml.Serialization.XmlElementAttribute("data", DataType="base64Binary")]
    public byte[] CryptoGetObjectByID(System.Guid sessionId, System.Guid cryptoId) {
        object[] results = this.Invoke("CryptoGetObjectByID", new object[] {
                    sessionId,
                    cryptoId});
        return ((byte[])(results[0]));
    }
    
    /// <remarks/>
    public System.IAsyncResult BeginCryptoGetObjectByID(System.Guid sessionId, System.Guid cryptoId, System.AsyncCallback callback, object asyncState) {
        return this.BeginInvoke("CryptoGetObjectByID", new object[] {
                    sessionId,
                    cryptoId}, callback, asyncState);
    }
    
    /// <remarks/>
    public byte[] EndCryptoGetObjectByID(System.IAsyncResult asyncResult) {
        object[] results = this.EndInvoke(asyncResult);
        return ((byte[])(results[0]));
    }
    
    /// <remarks/>
    public void CryptoGetObjectByIDAsync(System.Guid sessionId, System.Guid cryptoId) {
        this.CryptoGetObjectByIDAsync(sessionId, cryptoId, null);
    }
    
    /// <remarks/>
    public void CryptoGetObjectByIDAsync(System.Guid sessionId, System.Guid cryptoId, object userState) {
        if ((this.CryptoGetObjectByIDOperationCompleted == null)) {
            this.CryptoGetObjectByIDOperationCompleted = new System.Threading.SendOrPostCallback(this.OnCryptoGetObjectByIDOperationCompleted);
        }
        this.InvokeAsync("CryptoGetObjectByID", new object[] {
                    sessionId,
                    cryptoId}, this.CryptoGetObjectByIDOperationCompleted, userState);
    }
    
    private void OnCryptoGetObjectByIDOperationCompleted(object arg) {
        if ((this.CryptoGetObjectByIDCompleted != null)) {
            System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
            this.CryptoGetObjectByIDCompleted(this, new CryptoGetObjectByIDCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
        }
    }
    
    /// <remarks/>
    [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://schemas.docsvision.com/Platform/2009-02-03/StorageServer/CryptoGetObjectIn" +
        "fo", RequestNamespace="http://schemas.docsvision.com/Platform/2009-02-03/StorageServer/", ResponseNamespace="http://schemas.docsvision.com/Platform/2009-02-03/StorageServer/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
    [return: System.Xml.Serialization.XmlElementAttribute("objectInfo")]
    public string CryptoGetObjectInfo(System.Guid sessionId, System.Guid cryptoId) {
        object[] results = this.Invoke("CryptoGetObjectInfo", new object[] {
                    sessionId,
                    cryptoId});
        return ((string)(results[0]));
    }
    
    /// <remarks/>
    public System.IAsyncResult BeginCryptoGetObjectInfo(System.Guid sessionId, System.Guid cryptoId, System.AsyncCallback callback, object asyncState) {
        return this.BeginInvoke("CryptoGetObjectInfo", new object[] {
                    sessionId,
                    cryptoId}, callback, asyncState);
    }
    
    /// <remarks/>
    public string EndCryptoGetObjectInfo(System.IAsyncResult asyncResult) {
        object[] results = this.EndInvoke(asyncResult);
        return ((string)(results[0]));
    }
    
    /// <remarks/>
    public void CryptoGetObjectInfoAsync(System.Guid sessionId, System.Guid cryptoId) {
        this.CryptoGetObjectInfoAsync(sessionId, cryptoId, null);
    }
    
    /// <remarks/>
    public void CryptoGetObjectInfoAsync(System.Guid sessionId, System.Guid cryptoId, object userState) {
        if ((this.CryptoGetObjectInfoOperationCompleted == null)) {
            this.CryptoGetObjectInfoOperationCompleted = new System.Threading.SendOrPostCallback(this.OnCryptoGetObjectInfoOperationCompleted);
        }
        this.InvokeAsync("CryptoGetObjectInfo", new object[] {
                    sessionId,
                    cryptoId}, this.CryptoGetObjectInfoOperationCompleted, userState);
    }
    
    private void OnCryptoGetObjectInfoOperationCompleted(object arg) {
        if ((this.CryptoGetObjectInfoCompleted != null)) {
            System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
            this.CryptoGetObjectInfoCompleted(this, new CryptoGetObjectInfoCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
        }
    }
    
    /// <remarks/>
    [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://schemas.docsvision.com/Platform/2009-02-03/StorageServer/CryptoListObjects" +
        "", RequestNamespace="http://schemas.docsvision.com/Platform/2009-02-03/StorageServer/", ResponseNamespace="http://schemas.docsvision.com/Platform/2009-02-03/StorageServer/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
    [return: System.Xml.Serialization.XmlElementAttribute("objectList")]
    public string CryptoListObjects(System.Guid sessionId, System.Guid objectId, CryptoDataTypeEnum dataType, string representUserId, string certThumbprint) {
        object[] results = this.Invoke("CryptoListObjects", new object[] {
                    sessionId,
                    objectId,
                    dataType,
                    representUserId,
                    certThumbprint});
        return ((string)(results[0]));
    }
    
    /// <remarks/>
    public System.IAsyncResult BeginCryptoListObjects(System.Guid sessionId, System.Guid objectId, CryptoDataTypeEnum dataType, string representUserId, string certThumbprint, System.AsyncCallback callback, object asyncState) {
        return this.BeginInvoke("CryptoListObjects", new object[] {
                    sessionId,
                    objectId,
                    dataType,
                    representUserId,
                    certThumbprint}, callback, asyncState);
    }
    
    /// <remarks/>
    public string EndCryptoListObjects(System.IAsyncResult asyncResult) {
        object[] results = this.EndInvoke(asyncResult);
        return ((string)(results[0]));
    }
    
    /// <remarks/>
    public void CryptoListObjectsAsync(System.Guid sessionId, System.Guid objectId, CryptoDataTypeEnum dataType, string representUserId, string certThumbprint) {
        this.CryptoListObjectsAsync(sessionId, objectId, dataType, representUserId, certThumbprint, null);
    }
    
    /// <remarks/>
    public void CryptoListObjectsAsync(System.Guid sessionId, System.Guid objectId, CryptoDataTypeEnum dataType, string representUserId, string certThumbprint, object userState) {
        if ((this.CryptoListObjectsOperationCompleted == null)) {
            this.CryptoListObjectsOperationCompleted = new System.Threading.SendOrPostCallback(this.OnCryptoListObjectsOperationCompleted);
        }
        this.InvokeAsync("CryptoListObjects", new object[] {
                    sessionId,
                    objectId,
                    dataType,
                    representUserId,
                    certThumbprint}, this.CryptoListObjectsOperationCompleted, userState);
    }
    
    private void OnCryptoListObjectsOperationCompleted(object arg) {
        if ((this.CryptoListObjectsCompleted != null)) {
            System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
            this.CryptoListObjectsCompleted(this, new CryptoListObjectsCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
        }
    }
    
    /// <remarks/>
    [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://schemas.docsvision.com/Platform/2009-02-03/StorageServer/CursorClose", RequestNamespace="http://schemas.docsvision.com/Platform/2009-02-03/StorageServer/", ResponseNamespace="http://schemas.docsvision.com/Platform/2009-02-03/StorageServer/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
    public void CursorClose(System.Guid sessionId, System.Guid cursorId) {
        this.Invoke("CursorClose", new object[] {
                    sessionId,
                    cursorId});
    }
    
    /// <remarks/>
    public System.IAsyncResult BeginCursorClose(System.Guid sessionId, System.Guid cursorId, System.AsyncCallback callback, object asyncState) {
        return this.BeginInvoke("CursorClose", new object[] {
                    sessionId,
                    cursorId}, callback, asyncState);
    }
    
    /// <remarks/>
    public void EndCursorClose(System.IAsyncResult asyncResult) {
        this.EndInvoke(asyncResult);
    }
    
    /// <remarks/>
    public void CursorCloseAsync(System.Guid sessionId, System.Guid cursorId) {
        this.CursorCloseAsync(sessionId, cursorId, null);
    }
    
    /// <remarks/>
    public void CursorCloseAsync(System.Guid sessionId, System.Guid cursorId, object userState) {
        if ((this.CursorCloseOperationCompleted == null)) {
            this.CursorCloseOperationCompleted = new System.Threading.SendOrPostCallback(this.OnCursorCloseOperationCompleted);
        }
        this.InvokeAsync("CursorClose", new object[] {
                    sessionId,
                    cursorId}, this.CursorCloseOperationCompleted, userState);
    }
    
    private void OnCursorCloseOperationCompleted(object arg) {
        if ((this.CursorCloseCompleted != null)) {
            System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
            this.CursorCloseCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
        }
    }
    
    /// <remarks/>
    [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://schemas.docsvision.com/Platform/2009-02-03/StorageServer/CursorGetPageCoun" +
        "t", RequestNamespace="http://schemas.docsvision.com/Platform/2009-02-03/StorageServer/", ResponseNamespace="http://schemas.docsvision.com/Platform/2009-02-03/StorageServer/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
    [return: System.Xml.Serialization.XmlElementAttribute("count")]
    public uint CursorGetPageCount(System.Guid sessionId, System.Guid cursorId) {
        object[] results = this.Invoke("CursorGetPageCount", new object[] {
                    sessionId,
                    cursorId});
        return ((uint)(results[0]));
    }
    
    /// <remarks/>
    public System.IAsyncResult BeginCursorGetPageCount(System.Guid sessionId, System.Guid cursorId, System.AsyncCallback callback, object asyncState) {
        return this.BeginInvoke("CursorGetPageCount", new object[] {
                    sessionId,
                    cursorId}, callback, asyncState);
    }
    
    /// <remarks/>
    public uint EndCursorGetPageCount(System.IAsyncResult asyncResult) {
        object[] results = this.EndInvoke(asyncResult);
        return ((uint)(results[0]));
    }
    
    /// <remarks/>
    public void CursorGetPageCountAsync(System.Guid sessionId, System.Guid cursorId) {
        this.CursorGetPageCountAsync(sessionId, cursorId, null);
    }
    
    /// <remarks/>
    public void CursorGetPageCountAsync(System.Guid sessionId, System.Guid cursorId, object userState) {
        if ((this.CursorGetPageCountOperationCompleted == null)) {
            this.CursorGetPageCountOperationCompleted = new System.Threading.SendOrPostCallback(this.OnCursorGetPageCountOperationCompleted);
        }
        this.InvokeAsync("CursorGetPageCount", new object[] {
                    sessionId,
                    cursorId}, this.CursorGetPageCountOperationCompleted, userState);
    }
    
    private void OnCursorGetPageCountOperationCompleted(object arg) {
        if ((this.CursorGetPageCountCompleted != null)) {
            System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
            this.CursorGetPageCountCompleted(this, new CursorGetPageCountCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
        }
    }
    
    /// <remarks/>
    [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://schemas.docsvision.com/Platform/2009-02-03/StorageServer/CursorOpenCardDat" +
        "a", RequestNamespace="http://schemas.docsvision.com/Platform/2009-02-03/StorageServer/", ResponseNamespace="http://schemas.docsvision.com/Platform/2009-02-03/StorageServer/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
    [return: System.Xml.Serialization.XmlElementAttribute("cursorInfo")]
    public CursorInfo CursorOpenCardData(System.Guid sessionId, System.Guid instanceID, ref long timestamp) {
        object[] results = this.Invoke("CursorOpenCardData", new object[] {
                    sessionId,
                    instanceID,
                    timestamp});
        timestamp = ((long)(results[1]));
        return ((CursorInfo)(results[0]));
    }
    
    /// <remarks/>
    public System.IAsyncResult BeginCursorOpenCardData(System.Guid sessionId, System.Guid instanceID, long timestamp, System.AsyncCallback callback, object asyncState) {
        return this.BeginInvoke("CursorOpenCardData", new object[] {
                    sessionId,
                    instanceID,
                    timestamp}, callback, asyncState);
    }
    
    /// <remarks/>
    public CursorInfo EndCursorOpenCardData(System.IAsyncResult asyncResult, out long timestamp) {
        object[] results = this.EndInvoke(asyncResult);
        timestamp = ((long)(results[1]));
        return ((CursorInfo)(results[0]));
    }
    
    /// <remarks/>
    public void CursorOpenCardDataAsync(System.Guid sessionId, System.Guid instanceID, long timestamp) {
        this.CursorOpenCardDataAsync(sessionId, instanceID, timestamp, null);
    }
    
    /// <remarks/>
    public void CursorOpenCardDataAsync(System.Guid sessionId, System.Guid instanceID, long timestamp, object userState) {
        if ((this.CursorOpenCardDataOperationCompleted == null)) {
            this.CursorOpenCardDataOperationCompleted = new System.Threading.SendOrPostCallback(this.OnCursorOpenCardDataOperationCompleted);
        }
        this.InvokeAsync("CursorOpenCardData", new object[] {
                    sessionId,
                    instanceID,
                    timestamp}, this.CursorOpenCardDataOperationCompleted, userState);
    }
    
    private void OnCursorOpenCardDataOperationCompleted(object arg) {
        if ((this.CursorOpenCardDataCompleted != null)) {
            System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
            this.CursorOpenCardDataCompleted(this, new CursorOpenCardDataCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
        }
    }
    
    /// <remarks/>
    [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://schemas.docsvision.com/Platform/2009-02-03/StorageServer/CursorOpenSection" +
        "Data", RequestNamespace="http://schemas.docsvision.com/Platform/2009-02-03/StorageServer/", ResponseNamespace="http://schemas.docsvision.com/Platform/2009-02-03/StorageServer/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
    [return: System.Xml.Serialization.XmlElementAttribute("cursorInfo")]
    public CursorInfo CursorOpenSectionData(System.Guid sessionId, ObjectInfo objectInfo, ReadTypeEnum readType, ref long timestamp) {
        object[] results = this.Invoke("CursorOpenSectionData", new object[] {
                    sessionId,
                    objectInfo,
                    readType,
                    timestamp});
        timestamp = ((long)(results[1]));
        return ((CursorInfo)(results[0]));
    }
    
    /// <remarks/>
    public System.IAsyncResult BeginCursorOpenSectionData(System.Guid sessionId, ObjectInfo objectInfo, ReadTypeEnum readType, long timestamp, System.AsyncCallback callback, object asyncState) {
        return this.BeginInvoke("CursorOpenSectionData", new object[] {
                    sessionId,
                    objectInfo,
                    readType,
                    timestamp}, callback, asyncState);
    }
    
    /// <remarks/>
    public CursorInfo EndCursorOpenSectionData(System.IAsyncResult asyncResult, out long timestamp) {
        object[] results = this.EndInvoke(asyncResult);
        timestamp = ((long)(results[1]));
        return ((CursorInfo)(results[0]));
    }
    
    /// <remarks/>
    public void CursorOpenSectionDataAsync(System.Guid sessionId, ObjectInfo objectInfo, ReadTypeEnum readType, long timestamp) {
        this.CursorOpenSectionDataAsync(sessionId, objectInfo, readType, timestamp, null);
    }
    
    /// <remarks/>
    public void CursorOpenSectionDataAsync(System.Guid sessionId, ObjectInfo objectInfo, ReadTypeEnum readType, long timestamp, object userState) {
        if ((this.CursorOpenSectionDataOperationCompleted == null)) {
            this.CursorOpenSectionDataOperationCompleted = new System.Threading.SendOrPostCallback(this.OnCursorOpenSectionDataOperationCompleted);
        }
        this.InvokeAsync("CursorOpenSectionData", new object[] {
                    sessionId,
                    objectInfo,
                    readType,
                    timestamp}, this.CursorOpenSectionDataOperationCompleted, userState);
    }
    
    private void OnCursorOpenSectionDataOperationCompleted(object arg) {
        if ((this.CursorOpenSectionDataCompleted != null)) {
            System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
            this.CursorOpenSectionDataCompleted(this, new CursorOpenSectionDataCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
        }
    }
    
    /// <remarks/>
    [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://schemas.docsvision.com/Platform/2009-02-03/StorageServer/CursorReadPage", RequestNamespace="http://schemas.docsvision.com/Platform/2009-02-03/StorageServer/", ResponseNamespace="http://schemas.docsvision.com/Platform/2009-02-03/StorageServer/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
    [return: System.Xml.Serialization.XmlElementAttribute("data")]
    public string CursorReadPage(System.Guid sessionId, System.Guid cursorId, uint pageNum, out bool usingCompression) {
        object[] results = this.Invoke("CursorReadPage", new object[] {
                    sessionId,
                    cursorId,
                    pageNum});
        usingCompression = ((bool)(results[1]));
        return ((string)(results[0]));
    }
    
    /// <remarks/>
    public System.IAsyncResult BeginCursorReadPage(System.Guid sessionId, System.Guid cursorId, uint pageNum, System.AsyncCallback callback, object asyncState) {
        return this.BeginInvoke("CursorReadPage", new object[] {
                    sessionId,
                    cursorId,
                    pageNum}, callback, asyncState);
    }
    
    /// <remarks/>
    public string EndCursorReadPage(System.IAsyncResult asyncResult, out bool usingCompression) {
        object[] results = this.EndInvoke(asyncResult);
        usingCompression = ((bool)(results[1]));
        return ((string)(results[0]));
    }
    
    /// <remarks/>
    public void CursorReadPageAsync(System.Guid sessionId, System.Guid cursorId, uint pageNum) {
        this.CursorReadPageAsync(sessionId, cursorId, pageNum, null);
    }
    
    /// <remarks/>
    public void CursorReadPageAsync(System.Guid sessionId, System.Guid cursorId, uint pageNum, object userState) {
        if ((this.CursorReadPageOperationCompleted == null)) {
            this.CursorReadPageOperationCompleted = new System.Threading.SendOrPostCallback(this.OnCursorReadPageOperationCompleted);
        }
        this.InvokeAsync("CursorReadPage", new object[] {
                    sessionId,
                    cursorId,
                    pageNum}, this.CursorReadPageOperationCompleted, userState);
    }
    
    private void OnCursorReadPageOperationCompleted(object arg) {
        if ((this.CursorReadPageCompleted != null)) {
            System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
            this.CursorReadPageCompleted(this, new CursorReadPageCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
        }
    }
    
    /// <remarks/>
    [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://schemas.docsvision.com/Platform/2009-02-03/StorageServer/CursorRefreshCard" +
        "Data", RequestNamespace="http://schemas.docsvision.com/Platform/2009-02-03/StorageServer/", ResponseNamespace="http://schemas.docsvision.com/Platform/2009-02-03/StorageServer/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
    [return: System.Xml.Serialization.XmlElementAttribute("cursorInfo")]
    public CursorInfo CursorRefreshCardData(System.Guid sessionId, System.Guid instanceId, ref long timestamp) {
        object[] results = this.Invoke("CursorRefreshCardData", new object[] {
                    sessionId,
                    instanceId,
                    timestamp});
        timestamp = ((long)(results[1]));
        return ((CursorInfo)(results[0]));
    }
    
    /// <remarks/>
    public System.IAsyncResult BeginCursorRefreshCardData(System.Guid sessionId, System.Guid instanceId, long timestamp, System.AsyncCallback callback, object asyncState) {
        return this.BeginInvoke("CursorRefreshCardData", new object[] {
                    sessionId,
                    instanceId,
                    timestamp}, callback, asyncState);
    }
    
    /// <remarks/>
    public CursorInfo EndCursorRefreshCardData(System.IAsyncResult asyncResult, out long timestamp) {
        object[] results = this.EndInvoke(asyncResult);
        timestamp = ((long)(results[1]));
        return ((CursorInfo)(results[0]));
    }
    
    /// <remarks/>
    public void CursorRefreshCardDataAsync(System.Guid sessionId, System.Guid instanceId, long timestamp) {
        this.CursorRefreshCardDataAsync(sessionId, instanceId, timestamp, null);
    }
    
    /// <remarks/>
    public void CursorRefreshCardDataAsync(System.Guid sessionId, System.Guid instanceId, long timestamp, object userState) {
        if ((this.CursorRefreshCardDataOperationCompleted == null)) {
            this.CursorRefreshCardDataOperationCompleted = new System.Threading.SendOrPostCallback(this.OnCursorRefreshCardDataOperationCompleted);
        }
        this.InvokeAsync("CursorRefreshCardData", new object[] {
                    sessionId,
                    instanceId,
                    timestamp}, this.CursorRefreshCardDataOperationCompleted, userState);
    }
    
    private void OnCursorRefreshCardDataOperationCompleted(object arg) {
        if ((this.CursorRefreshCardDataCompleted != null)) {
            System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
            this.CursorRefreshCardDataCompleted(this, new CursorRefreshCardDataCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
        }
    }
    
    /// <remarks/>
    [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://schemas.docsvision.com/Platform/2009-02-03/StorageServer/CursorRefreshSect" +
        "ionData", RequestNamespace="http://schemas.docsvision.com/Platform/2009-02-03/StorageServer/", ResponseNamespace="http://schemas.docsvision.com/Platform/2009-02-03/StorageServer/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
    [return: System.Xml.Serialization.XmlElementAttribute("cursorInfo")]
    public CursorInfo CursorRefreshSectionData(System.Guid sessionId, ObjectInfo objectInfo, ReadTypeEnum readType, ref long timestamp, ref int hash) {
        object[] results = this.Invoke("CursorRefreshSectionData", new object[] {
                    sessionId,
                    objectInfo,
                    readType,
                    timestamp,
                    hash});
        timestamp = ((long)(results[1]));
        hash = ((int)(results[2]));
        return ((CursorInfo)(results[0]));
    }
    
    /// <remarks/>
    public System.IAsyncResult BeginCursorRefreshSectionData(System.Guid sessionId, ObjectInfo objectInfo, ReadTypeEnum readType, long timestamp, int hash, System.AsyncCallback callback, object asyncState) {
        return this.BeginInvoke("CursorRefreshSectionData", new object[] {
                    sessionId,
                    objectInfo,
                    readType,
                    timestamp,
                    hash}, callback, asyncState);
    }
    
    /// <remarks/>
    public CursorInfo EndCursorRefreshSectionData(System.IAsyncResult asyncResult, out long timestamp, out int hash) {
        object[] results = this.EndInvoke(asyncResult);
        timestamp = ((long)(results[1]));
        hash = ((int)(results[2]));
        return ((CursorInfo)(results[0]));
    }
    
    /// <remarks/>
    public void CursorRefreshSectionDataAsync(System.Guid sessionId, ObjectInfo objectInfo, ReadTypeEnum readType, long timestamp, int hash) {
        this.CursorRefreshSectionDataAsync(sessionId, objectInfo, readType, timestamp, hash, null);
    }
    
    /// <remarks/>
    public void CursorRefreshSectionDataAsync(System.Guid sessionId, ObjectInfo objectInfo, ReadTypeEnum readType, long timestamp, int hash, object userState) {
        if ((this.CursorRefreshSectionDataOperationCompleted == null)) {
            this.CursorRefreshSectionDataOperationCompleted = new System.Threading.SendOrPostCallback(this.OnCursorRefreshSectionDataOperationCompleted);
        }
        this.InvokeAsync("CursorRefreshSectionData", new object[] {
                    sessionId,
                    objectInfo,
                    readType,
                    timestamp,
                    hash}, this.CursorRefreshSectionDataOperationCompleted, userState);
    }
    
    private void OnCursorRefreshSectionDataOperationCompleted(object arg) {
        if ((this.CursorRefreshSectionDataCompleted != null)) {
            System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
            this.CursorRefreshSectionDataCompleted(this, new CursorRefreshSectionDataCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
        }
    }
    
    /// <remarks/>
    [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://schemas.docsvision.com/Platform/2009-02-03/StorageServer/DecrementFeatureU" +
        "sage", RequestNamespace="http://schemas.docsvision.com/Platform/2009-02-03/StorageServer/", ResponseNamespace="http://schemas.docsvision.com/Platform/2009-02-03/StorageServer/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
    public void DecrementFeatureUsage(System.Guid sessionId, System.Guid featureId) {
        this.Invoke("DecrementFeatureUsage", new object[] {
                    sessionId,
                    featureId});
    }
    
    /// <remarks/>
    public System.IAsyncResult BeginDecrementFeatureUsage(System.Guid sessionId, System.Guid featureId, System.AsyncCallback callback, object asyncState) {
        return this.BeginInvoke("DecrementFeatureUsage", new object[] {
                    sessionId,
                    featureId}, callback, asyncState);
    }
    
    /// <remarks/>
    public void EndDecrementFeatureUsage(System.IAsyncResult asyncResult) {
        this.EndInvoke(asyncResult);
    }
    
    /// <remarks/>
    public void DecrementFeatureUsageAsync(System.Guid sessionId, System.Guid featureId) {
        this.DecrementFeatureUsageAsync(sessionId, featureId, null);
    }
    
    /// <remarks/>
    public void DecrementFeatureUsageAsync(System.Guid sessionId, System.Guid featureId, object userState) {
        if ((this.DecrementFeatureUsageOperationCompleted == null)) {
            this.DecrementFeatureUsageOperationCompleted = new System.Threading.SendOrPostCallback(this.OnDecrementFeatureUsageOperationCompleted);
        }
        this.InvokeAsync("DecrementFeatureUsage", new object[] {
                    sessionId,
                    featureId}, this.DecrementFeatureUsageOperationCompleted, userState);
    }
    
    private void OnDecrementFeatureUsageOperationCompleted(object arg) {
        if ((this.DecrementFeatureUsageCompleted != null)) {
            System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
            this.DecrementFeatureUsageCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
        }
    }
    
    /// <remarks/>
    [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://schemas.docsvision.com/Platform/2009-02-03/StorageServer/DynamicFieldCreat" +
        "e", RequestNamespace="http://schemas.docsvision.com/Platform/2009-02-03/StorageServer/", ResponseNamespace="http://schemas.docsvision.com/Platform/2009-02-03/StorageServer/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
    [return: System.Xml.Serialization.XmlElementAttribute("newFieldId")]
    public System.Guid DynamicFieldCreate(System.Guid sessionId, System.Guid sectionId, string fieldXml) {
        object[] results = this.Invoke("DynamicFieldCreate", new object[] {
                    sessionId,
                    sectionId,
                    fieldXml});
        return ((System.Guid)(results[0]));
    }
    
    /// <remarks/>
    public System.IAsyncResult BeginDynamicFieldCreate(System.Guid sessionId, System.Guid sectionId, string fieldXml, System.AsyncCallback callback, object asyncState) {
        return this.BeginInvoke("DynamicFieldCreate", new object[] {
                    sessionId,
                    sectionId,
                    fieldXml}, callback, asyncState);
    }
    
    /// <remarks/>
    public System.Guid EndDynamicFieldCreate(System.IAsyncResult asyncResult) {
        object[] results = this.EndInvoke(asyncResult);
        return ((System.Guid)(results[0]));
    }
    
    /// <remarks/>
    public void DynamicFieldCreateAsync(System.Guid sessionId, System.Guid sectionId, string fieldXml) {
        this.DynamicFieldCreateAsync(sessionId, sectionId, fieldXml, null);
    }
    
    /// <remarks/>
    public void DynamicFieldCreateAsync(System.Guid sessionId, System.Guid sectionId, string fieldXml, object userState) {
        if ((this.DynamicFieldCreateOperationCompleted == null)) {
            this.DynamicFieldCreateOperationCompleted = new System.Threading.SendOrPostCallback(this.OnDynamicFieldCreateOperationCompleted);
        }
        this.InvokeAsync("DynamicFieldCreate", new object[] {
                    sessionId,
                    sectionId,
                    fieldXml}, this.DynamicFieldCreateOperationCompleted, userState);
    }
    
    private void OnDynamicFieldCreateOperationCompleted(object arg) {
        if ((this.DynamicFieldCreateCompleted != null)) {
            System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
            this.DynamicFieldCreateCompleted(this, new DynamicFieldCreateCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
        }
    }
    
    /// <remarks/>
    [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://schemas.docsvision.com/Platform/2009-02-03/StorageServer/DynamicFieldDelet" +
        "e", RequestNamespace="http://schemas.docsvision.com/Platform/2009-02-03/StorageServer/", ResponseNamespace="http://schemas.docsvision.com/Platform/2009-02-03/StorageServer/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
    public void DynamicFieldDelete(System.Guid sessionId, System.Guid fieldId) {
        this.Invoke("DynamicFieldDelete", new object[] {
                    sessionId,
                    fieldId});
    }
    
    /// <remarks/>
    public System.IAsyncResult BeginDynamicFieldDelete(System.Guid sessionId, System.Guid fieldId, System.AsyncCallback callback, object asyncState) {
        return this.BeginInvoke("DynamicFieldDelete", new object[] {
                    sessionId,
                    fieldId}, callback, asyncState);
    }
    
    /// <remarks/>
    public void EndDynamicFieldDelete(System.IAsyncResult asyncResult) {
        this.EndInvoke(asyncResult);
    }
    
    /// <remarks/>
    public void DynamicFieldDeleteAsync(System.Guid sessionId, System.Guid fieldId) {
        this.DynamicFieldDeleteAsync(sessionId, fieldId, null);
    }
    
    /// <remarks/>
    public void DynamicFieldDeleteAsync(System.Guid sessionId, System.Guid fieldId, object userState) {
        if ((this.DynamicFieldDeleteOperationCompleted == null)) {
            this.DynamicFieldDeleteOperationCompleted = new System.Threading.SendOrPostCallback(this.OnDynamicFieldDeleteOperationCompleted);
        }
        this.InvokeAsync("DynamicFieldDelete", new object[] {
                    sessionId,
                    fieldId}, this.DynamicFieldDeleteOperationCompleted, userState);
    }
    
    private void OnDynamicFieldDeleteOperationCompleted(object arg) {
        if ((this.DynamicFieldDeleteCompleted != null)) {
            System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
            this.DynamicFieldDeleteCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
        }
    }
    
    /// <remarks/>
    [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://schemas.docsvision.com/Platform/2009-02-03/StorageServer/DynamicFieldGetIn" +
        "fo", RequestNamespace="http://schemas.docsvision.com/Platform/2009-02-03/StorageServer/", ResponseNamespace="http://schemas.docsvision.com/Platform/2009-02-03/StorageServer/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
    [return: System.Xml.Serialization.XmlElementAttribute("fieldXml")]
    public string DynamicFieldGetInfo(System.Guid sessionId, System.Guid fieldId) {
        object[] results = this.Invoke("DynamicFieldGetInfo", new object[] {
                    sessionId,
                    fieldId});
        return ((string)(results[0]));
    }
    
    /// <remarks/>
    public System.IAsyncResult BeginDynamicFieldGetInfo(System.Guid sessionId, System.Guid fieldId, System.AsyncCallback callback, object asyncState) {
        return this.BeginInvoke("DynamicFieldGetInfo", new object[] {
                    sessionId,
                    fieldId}, callback, asyncState);
    }
    
    /// <remarks/>
    public string EndDynamicFieldGetInfo(System.IAsyncResult asyncResult) {
        object[] results = this.EndInvoke(asyncResult);
        return ((string)(results[0]));
    }
    
    /// <remarks/>
    public void DynamicFieldGetInfoAsync(System.Guid sessionId, System.Guid fieldId) {
        this.DynamicFieldGetInfoAsync(sessionId, fieldId, null);
    }
    
    /// <remarks/>
    public void DynamicFieldGetInfoAsync(System.Guid sessionId, System.Guid fieldId, object userState) {
        if ((this.DynamicFieldGetInfoOperationCompleted == null)) {
            this.DynamicFieldGetInfoOperationCompleted = new System.Threading.SendOrPostCallback(this.OnDynamicFieldGetInfoOperationCompleted);
        }
        this.InvokeAsync("DynamicFieldGetInfo", new object[] {
                    sessionId,
                    fieldId}, this.DynamicFieldGetInfoOperationCompleted, userState);
    }
    
    private void OnDynamicFieldGetInfoOperationCompleted(object arg) {
        if ((this.DynamicFieldGetInfoCompleted != null)) {
            System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
            this.DynamicFieldGetInfoCompleted(this, new DynamicFieldGetInfoCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
        }
    }
    
    /// <remarks/>
    [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://schemas.docsvision.com/Platform/2009-02-03/StorageServer/DynamicFieldUpdat" +
        "e", RequestNamespace="http://schemas.docsvision.com/Platform/2009-02-03/StorageServer/", ResponseNamespace="http://schemas.docsvision.com/Platform/2009-02-03/StorageServer/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
    public void DynamicFieldUpdate(System.Guid sessionId, string fieldXml) {
        this.Invoke("DynamicFieldUpdate", new object[] {
                    sessionId,
                    fieldXml});
    }
    
    /// <remarks/>
    public System.IAsyncResult BeginDynamicFieldUpdate(System.Guid sessionId, string fieldXml, System.AsyncCallback callback, object asyncState) {
        return this.BeginInvoke("DynamicFieldUpdate", new object[] {
                    sessionId,
                    fieldXml}, callback, asyncState);
    }
    
    /// <remarks/>
    public void EndDynamicFieldUpdate(System.IAsyncResult asyncResult) {
        this.EndInvoke(asyncResult);
    }
    
    /// <remarks/>
    public void DynamicFieldUpdateAsync(System.Guid sessionId, string fieldXml) {
        this.DynamicFieldUpdateAsync(sessionId, fieldXml, null);
    }
    
    /// <remarks/>
    public void DynamicFieldUpdateAsync(System.Guid sessionId, string fieldXml, object userState) {
        if ((this.DynamicFieldUpdateOperationCompleted == null)) {
            this.DynamicFieldUpdateOperationCompleted = new System.Threading.SendOrPostCallback(this.OnDynamicFieldUpdateOperationCompleted);
        }
        this.InvokeAsync("DynamicFieldUpdate", new object[] {
                    sessionId,
                    fieldXml}, this.DynamicFieldUpdateOperationCompleted, userState);
    }
    
    private void OnDynamicFieldUpdateOperationCompleted(object arg) {
        if ((this.DynamicFieldUpdateCompleted != null)) {
            System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
            this.DynamicFieldUpdateCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
        }
    }
    
    /// <remarks/>
    [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://schemas.docsvision.com/Platform/2009-02-03/StorageServer/DynamicMetadataGe" +
        "tInfo", RequestNamespace="http://schemas.docsvision.com/Platform/2009-02-03/StorageServer/", ResponseNamespace="http://schemas.docsvision.com/Platform/2009-02-03/StorageServer/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
    [return: System.Xml.Serialization.XmlElementAttribute("metadataXml")]
    public string DynamicMetadataGetInfo(System.Guid sessionId) {
        object[] results = this.Invoke("DynamicMetadataGetInfo", new object[] {
                    sessionId});
        return ((string)(results[0]));
    }
    
    /// <remarks/>
    public System.IAsyncResult BeginDynamicMetadataGetInfo(System.Guid sessionId, System.AsyncCallback callback, object asyncState) {
        return this.BeginInvoke("DynamicMetadataGetInfo", new object[] {
                    sessionId}, callback, asyncState);
    }
    
    /// <remarks/>
    public string EndDynamicMetadataGetInfo(System.IAsyncResult asyncResult) {
        object[] results = this.EndInvoke(asyncResult);
        return ((string)(results[0]));
    }
    
    /// <remarks/>
    public void DynamicMetadataGetInfoAsync(System.Guid sessionId) {
        this.DynamicMetadataGetInfoAsync(sessionId, null);
    }
    
    /// <remarks/>
    public void DynamicMetadataGetInfoAsync(System.Guid sessionId, object userState) {
        if ((this.DynamicMetadataGetInfoOperationCompleted == null)) {
            this.DynamicMetadataGetInfoOperationCompleted = new System.Threading.SendOrPostCallback(this.OnDynamicMetadataGetInfoOperationCompleted);
        }
        this.InvokeAsync("DynamicMetadataGetInfo", new object[] {
                    sessionId}, this.DynamicMetadataGetInfoOperationCompleted, userState);
    }
    
    private void OnDynamicMetadataGetInfoOperationCompleted(object arg) {
        if ((this.DynamicMetadataGetInfoCompleted != null)) {
            System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
            this.DynamicMetadataGetInfoCompleted(this, new DynamicMetadataGetInfoCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
        }
    }
    
    /// <remarks/>
    [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://schemas.docsvision.com/Platform/2009-02-03/StorageServer/DynamicMetadataUp" +
        "date", RequestNamespace="http://schemas.docsvision.com/Platform/2009-02-03/StorageServer/", ResponseNamespace="http://schemas.docsvision.com/Platform/2009-02-03/StorageServer/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
    public void DynamicMetadataUpdate(System.Guid sessionId, string metadataXml) {
        this.Invoke("DynamicMetadataUpdate", new object[] {
                    sessionId,
                    metadataXml});
    }
    
    /// <remarks/>
    public System.IAsyncResult BeginDynamicMetadataUpdate(System.Guid sessionId, string metadataXml, System.AsyncCallback callback, object asyncState) {
        return this.BeginInvoke("DynamicMetadataUpdate", new object[] {
                    sessionId,
                    metadataXml}, callback, asyncState);
    }
    
    /// <remarks/>
    public void EndDynamicMetadataUpdate(System.IAsyncResult asyncResult) {
        this.EndInvoke(asyncResult);
    }
    
    /// <remarks/>
    public void DynamicMetadataUpdateAsync(System.Guid sessionId, string metadataXml) {
        this.DynamicMetadataUpdateAsync(sessionId, metadataXml, null);
    }
    
    /// <remarks/>
    public void DynamicMetadataUpdateAsync(System.Guid sessionId, string metadataXml, object userState) {
        if ((this.DynamicMetadataUpdateOperationCompleted == null)) {
            this.DynamicMetadataUpdateOperationCompleted = new System.Threading.SendOrPostCallback(this.OnDynamicMetadataUpdateOperationCompleted);
        }
        this.InvokeAsync("DynamicMetadataUpdate", new object[] {
                    sessionId,
                    metadataXml}, this.DynamicMetadataUpdateOperationCompleted, userState);
    }
    
    private void OnDynamicMetadataUpdateOperationCompleted(object arg) {
        if ((this.DynamicMetadataUpdateCompleted != null)) {
            System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
            this.DynamicMetadataUpdateCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
        }
    }
    
    /// <remarks/>
    [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://schemas.docsvision.com/Platform/2009-02-03/StorageServer/DynamicSectionCre" +
        "ate", RequestNamespace="http://schemas.docsvision.com/Platform/2009-02-03/StorageServer/", ResponseNamespace="http://schemas.docsvision.com/Platform/2009-02-03/StorageServer/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
    [return: System.Xml.Serialization.XmlElementAttribute("newSectionId")]
    public System.Guid DynamicSectionCreate(System.Guid sessionId, System.Guid cardTypeId, System.Guid parentSectionId, string sectionXml) {
        object[] results = this.Invoke("DynamicSectionCreate", new object[] {
                    sessionId,
                    cardTypeId,
                    parentSectionId,
                    sectionXml});
        return ((System.Guid)(results[0]));
    }
    
    /// <remarks/>
    public System.IAsyncResult BeginDynamicSectionCreate(System.Guid sessionId, System.Guid cardTypeId, System.Guid parentSectionId, string sectionXml, System.AsyncCallback callback, object asyncState) {
        return this.BeginInvoke("DynamicSectionCreate", new object[] {
                    sessionId,
                    cardTypeId,
                    parentSectionId,
                    sectionXml}, callback, asyncState);
    }
    
    /// <remarks/>
    public System.Guid EndDynamicSectionCreate(System.IAsyncResult asyncResult) {
        object[] results = this.EndInvoke(asyncResult);
        return ((System.Guid)(results[0]));
    }
    
    /// <remarks/>
    public void DynamicSectionCreateAsync(System.Guid sessionId, System.Guid cardTypeId, System.Guid parentSectionId, string sectionXml) {
        this.DynamicSectionCreateAsync(sessionId, cardTypeId, parentSectionId, sectionXml, null);
    }
    
    /// <remarks/>
    public void DynamicSectionCreateAsync(System.Guid sessionId, System.Guid cardTypeId, System.Guid parentSectionId, string sectionXml, object userState) {
        if ((this.DynamicSectionCreateOperationCompleted == null)) {
            this.DynamicSectionCreateOperationCompleted = new System.Threading.SendOrPostCallback(this.OnDynamicSectionCreateOperationCompleted);
        }
        this.InvokeAsync("DynamicSectionCreate", new object[] {
                    sessionId,
                    cardTypeId,
                    parentSectionId,
                    sectionXml}, this.DynamicSectionCreateOperationCompleted, userState);
    }
    
    private void OnDynamicSectionCreateOperationCompleted(object arg) {
        if ((this.DynamicSectionCreateCompleted != null)) {
            System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
            this.DynamicSectionCreateCompleted(this, new DynamicSectionCreateCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
        }
    }
    
    /// <remarks/>
    [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://schemas.docsvision.com/Platform/2009-02-03/StorageServer/DynamicSectionDel" +
        "ete", RequestNamespace="http://schemas.docsvision.com/Platform/2009-02-03/StorageServer/", ResponseNamespace="http://schemas.docsvision.com/Platform/2009-02-03/StorageServer/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
    public void DynamicSectionDelete(System.Guid sessionId, System.Guid sectionId) {
        this.Invoke("DynamicSectionDelete", new object[] {
                    sessionId,
                    sectionId});
    }
    
    /// <remarks/>
    public System.IAsyncResult BeginDynamicSectionDelete(System.Guid sessionId, System.Guid sectionId, System.AsyncCallback callback, object asyncState) {
        return this.BeginInvoke("DynamicSectionDelete", new object[] {
                    sessionId,
                    sectionId}, callback, asyncState);
    }
    
    /// <remarks/>
    public void EndDynamicSectionDelete(System.IAsyncResult asyncResult) {
        this.EndInvoke(asyncResult);
    }
    
    /// <remarks/>
    public void DynamicSectionDeleteAsync(System.Guid sessionId, System.Guid sectionId) {
        this.DynamicSectionDeleteAsync(sessionId, sectionId, null);
    }
    
    /// <remarks/>
    public void DynamicSectionDeleteAsync(System.Guid sessionId, System.Guid sectionId, object userState) {
        if ((this.DynamicSectionDeleteOperationCompleted == null)) {
            this.DynamicSectionDeleteOperationCompleted = new System.Threading.SendOrPostCallback(this.OnDynamicSectionDeleteOperationCompleted);
        }
        this.InvokeAsync("DynamicSectionDelete", new object[] {
                    sessionId,
                    sectionId}, this.DynamicSectionDeleteOperationCompleted, userState);
    }
    
    private void OnDynamicSectionDeleteOperationCompleted(object arg) {
        if ((this.DynamicSectionDeleteCompleted != null)) {
            System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
            this.DynamicSectionDeleteCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
        }
    }
    
    /// <remarks/>
    [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://schemas.docsvision.com/Platform/2009-02-03/StorageServer/DynamicSectionGet" +
        "Info", RequestNamespace="http://schemas.docsvision.com/Platform/2009-02-03/StorageServer/", ResponseNamespace="http://schemas.docsvision.com/Platform/2009-02-03/StorageServer/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
    [return: System.Xml.Serialization.XmlElementAttribute("sectionXml")]
    public string DynamicSectionGetInfo(System.Guid sessionId, System.Guid sectionId) {
        object[] results = this.Invoke("DynamicSectionGetInfo", new object[] {
                    sessionId,
                    sectionId});
        return ((string)(results[0]));
    }
    
    /// <remarks/>
    public System.IAsyncResult BeginDynamicSectionGetInfo(System.Guid sessionId, System.Guid sectionId, System.AsyncCallback callback, object asyncState) {
        return this.BeginInvoke("DynamicSectionGetInfo", new object[] {
                    sessionId,
                    sectionId}, callback, asyncState);
    }
    
    /// <remarks/>
    public string EndDynamicSectionGetInfo(System.IAsyncResult asyncResult) {
        object[] results = this.EndInvoke(asyncResult);
        return ((string)(results[0]));
    }
    
    /// <remarks/>
    public void DynamicSectionGetInfoAsync(System.Guid sessionId, System.Guid sectionId) {
        this.DynamicSectionGetInfoAsync(sessionId, sectionId, null);
    }
    
    /// <remarks/>
    public void DynamicSectionGetInfoAsync(System.Guid sessionId, System.Guid sectionId, object userState) {
        if ((this.DynamicSectionGetInfoOperationCompleted == null)) {
            this.DynamicSectionGetInfoOperationCompleted = new System.Threading.SendOrPostCallback(this.OnDynamicSectionGetInfoOperationCompleted);
        }
        this.InvokeAsync("DynamicSectionGetInfo", new object[] {
                    sessionId,
                    sectionId}, this.DynamicSectionGetInfoOperationCompleted, userState);
    }
    
    private void OnDynamicSectionGetInfoOperationCompleted(object arg) {
        if ((this.DynamicSectionGetInfoCompleted != null)) {
            System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
            this.DynamicSectionGetInfoCompleted(this, new DynamicSectionGetInfoCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
        }
    }
    
    /// <remarks/>
    [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://schemas.docsvision.com/Platform/2009-02-03/StorageServer/DynamicSectionUpd" +
        "ate", RequestNamespace="http://schemas.docsvision.com/Platform/2009-02-03/StorageServer/", ResponseNamespace="http://schemas.docsvision.com/Platform/2009-02-03/StorageServer/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
    public void DynamicSectionUpdate(System.Guid sessionId, string sectionXml) {
        this.Invoke("DynamicSectionUpdate", new object[] {
                    sessionId,
                    sectionXml});
    }
    
    /// <remarks/>
    public System.IAsyncResult BeginDynamicSectionUpdate(System.Guid sessionId, string sectionXml, System.AsyncCallback callback, object asyncState) {
        return this.BeginInvoke("DynamicSectionUpdate", new object[] {
                    sessionId,
                    sectionXml}, callback, asyncState);
    }
    
    /// <remarks/>
    public void EndDynamicSectionUpdate(System.IAsyncResult asyncResult) {
        this.EndInvoke(asyncResult);
    }
    
    /// <remarks/>
    public void DynamicSectionUpdateAsync(System.Guid sessionId, string sectionXml) {
        this.DynamicSectionUpdateAsync(sessionId, sectionXml, null);
    }
    
    /// <remarks/>
    public void DynamicSectionUpdateAsync(System.Guid sessionId, string sectionXml, object userState) {
        if ((this.DynamicSectionUpdateOperationCompleted == null)) {
            this.DynamicSectionUpdateOperationCompleted = new System.Threading.SendOrPostCallback(this.OnDynamicSectionUpdateOperationCompleted);
        }
        this.InvokeAsync("DynamicSectionUpdate", new object[] {
                    sessionId,
                    sectionXml}, this.DynamicSectionUpdateOperationCompleted, userState);
    }
    
    private void OnDynamicSectionUpdateOperationCompleted(object arg) {
        if ((this.DynamicSectionUpdateCompleted != null)) {
            System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
            this.DynamicSectionUpdateCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
        }
    }
    
    /// <remarks/>
    [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://schemas.docsvision.com/Platform/2009-02-03/StorageServer/ExtensionExecuteC" +
        "ursorMethod", RequestNamespace="http://schemas.docsvision.com/Platform/2009-02-03/StorageServer/", ResponseNamespace="http://schemas.docsvision.com/Platform/2009-02-03/StorageServer/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
    [return: System.Xml.Serialization.XmlElementAttribute("cursorInfo")]
    public CursorInfo ExtensionExecuteCursorMethod(System.Guid sessionId, string methodCall, bool compressed) {
        object[] results = this.Invoke("ExtensionExecuteCursorMethod", new object[] {
                    sessionId,
                    methodCall,
                    compressed});
        return ((CursorInfo)(results[0]));
    }
    
    /// <remarks/>
    public System.IAsyncResult BeginExtensionExecuteCursorMethod(System.Guid sessionId, string methodCall, bool compressed, System.AsyncCallback callback, object asyncState) {
        return this.BeginInvoke("ExtensionExecuteCursorMethod", new object[] {
                    sessionId,
                    methodCall,
                    compressed}, callback, asyncState);
    }
    
    /// <remarks/>
    public CursorInfo EndExtensionExecuteCursorMethod(System.IAsyncResult asyncResult) {
        object[] results = this.EndInvoke(asyncResult);
        return ((CursorInfo)(results[0]));
    }
    
    /// <remarks/>
    public void ExtensionExecuteCursorMethodAsync(System.Guid sessionId, string methodCall, bool compressed) {
        this.ExtensionExecuteCursorMethodAsync(sessionId, methodCall, compressed, null);
    }
    
    /// <remarks/>
    public void ExtensionExecuteCursorMethodAsync(System.Guid sessionId, string methodCall, bool compressed, object userState) {
        if ((this.ExtensionExecuteCursorMethodOperationCompleted == null)) {
            this.ExtensionExecuteCursorMethodOperationCompleted = new System.Threading.SendOrPostCallback(this.OnExtensionExecuteCursorMethodOperationCompleted);
        }
        this.InvokeAsync("ExtensionExecuteCursorMethod", new object[] {
                    sessionId,
                    methodCall,
                    compressed}, this.ExtensionExecuteCursorMethodOperationCompleted, userState);
    }
    
    private void OnExtensionExecuteCursorMethodOperationCompleted(object arg) {
        if ((this.ExtensionExecuteCursorMethodCompleted != null)) {
            System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
            this.ExtensionExecuteCursorMethodCompleted(this, new ExtensionExecuteCursorMethodCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
        }
    }
    
    /// <remarks/>
    [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://schemas.docsvision.com/Platform/2009-02-03/StorageServer/ExtensionExecuteM" +
        "ethod", RequestNamespace="http://schemas.docsvision.com/Platform/2009-02-03/StorageServer/", ResponseNamespace="http://schemas.docsvision.com/Platform/2009-02-03/StorageServer/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
    [return: System.Xml.Serialization.XmlElementAttribute("result")]
    public string ExtensionExecuteMethod(System.Guid sessionId, string methodCall, bool compressed) {
        object[] results = this.Invoke("ExtensionExecuteMethod", new object[] {
                    sessionId,
                    methodCall,
                    compressed});
        return ((string)(results[0]));
    }
    
    /// <remarks/>
    public System.IAsyncResult BeginExtensionExecuteMethod(System.Guid sessionId, string methodCall, bool compressed, System.AsyncCallback callback, object asyncState) {
        return this.BeginInvoke("ExtensionExecuteMethod", new object[] {
                    sessionId,
                    methodCall,
                    compressed}, callback, asyncState);
    }
    
    /// <remarks/>
    public string EndExtensionExecuteMethod(System.IAsyncResult asyncResult) {
        object[] results = this.EndInvoke(asyncResult);
        return ((string)(results[0]));
    }
    
    /// <remarks/>
    public void ExtensionExecuteMethodAsync(System.Guid sessionId, string methodCall, bool compressed) {
        this.ExtensionExecuteMethodAsync(sessionId, methodCall, compressed, null);
    }
    
    /// <remarks/>
    public void ExtensionExecuteMethodAsync(System.Guid sessionId, string methodCall, bool compressed, object userState) {
        if ((this.ExtensionExecuteMethodOperationCompleted == null)) {
            this.ExtensionExecuteMethodOperationCompleted = new System.Threading.SendOrPostCallback(this.OnExtensionExecuteMethodOperationCompleted);
        }
        this.InvokeAsync("ExtensionExecuteMethod", new object[] {
                    sessionId,
                    methodCall,
                    compressed}, this.ExtensionExecuteMethodOperationCompleted, userState);
    }
    
    private void OnExtensionExecuteMethodOperationCompleted(object arg) {
        if ((this.ExtensionExecuteMethodCompleted != null)) {
            System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
            this.ExtensionExecuteMethodCompleted(this, new ExtensionExecuteMethodCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
        }
    }
    
    /// <remarks/>
    [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://schemas.docsvision.com/Platform/2009-02-03/StorageServer/FileArchive", RequestNamespace="http://schemas.docsvision.com/Platform/2009-02-03/StorageServer/", ResponseNamespace="http://schemas.docsvision.com/Platform/2009-02-03/StorageServer/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
    public void FileArchive(System.Guid sessionId, System.Guid fileId, bool delay) {
        this.Invoke("FileArchive", new object[] {
                    sessionId,
                    fileId,
                    delay});
    }
    
    /// <remarks/>
    public System.IAsyncResult BeginFileArchive(System.Guid sessionId, System.Guid fileId, bool delay, System.AsyncCallback callback, object asyncState) {
        return this.BeginInvoke("FileArchive", new object[] {
                    sessionId,
                    fileId,
                    delay}, callback, asyncState);
    }
    
    /// <remarks/>
    public void EndFileArchive(System.IAsyncResult asyncResult) {
        this.EndInvoke(asyncResult);
    }
    
    /// <remarks/>
    public void FileArchiveAsync(System.Guid sessionId, System.Guid fileId, bool delay) {
        this.FileArchiveAsync(sessionId, fileId, delay, null);
    }
    
    /// <remarks/>
    public void FileArchiveAsync(System.Guid sessionId, System.Guid fileId, bool delay, object userState) {
        if ((this.FileArchiveOperationCompleted == null)) {
            this.FileArchiveOperationCompleted = new System.Threading.SendOrPostCallback(this.OnFileArchiveOperationCompleted);
        }
        this.InvokeAsync("FileArchive", new object[] {
                    sessionId,
                    fileId,
                    delay}, this.FileArchiveOperationCompleted, userState);
    }
    
    private void OnFileArchiveOperationCompleted(object arg) {
        if ((this.FileArchiveCompleted != null)) {
            System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
            this.FileArchiveCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
        }
    }
    
    /// <remarks/>
    [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://schemas.docsvision.com/Platform/2009-02-03/StorageServer/FileArchiveGroup", RequestNamespace="http://schemas.docsvision.com/Platform/2009-02-03/StorageServer/", ResponseNamespace="http://schemas.docsvision.com/Platform/2009-02-03/StorageServer/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
    [return: System.Xml.Serialization.XmlElementAttribute("failedItems")]
    public string FileArchiveGroup(System.Guid sessionId, string items, bool delay) {
        object[] results = this.Invoke("FileArchiveGroup", new object[] {
                    sessionId,
                    items,
                    delay});
        return ((string)(results[0]));
    }
    
    /// <remarks/>
    public System.IAsyncResult BeginFileArchiveGroup(System.Guid sessionId, string items, bool delay, System.AsyncCallback callback, object asyncState) {
        return this.BeginInvoke("FileArchiveGroup", new object[] {
                    sessionId,
                    items,
                    delay}, callback, asyncState);
    }
    
    /// <remarks/>
    public string EndFileArchiveGroup(System.IAsyncResult asyncResult) {
        object[] results = this.EndInvoke(asyncResult);
        return ((string)(results[0]));
    }
    
    /// <remarks/>
    public void FileArchiveGroupAsync(System.Guid sessionId, string items, bool delay) {
        this.FileArchiveGroupAsync(sessionId, items, delay, null);
    }
    
    /// <remarks/>
    public void FileArchiveGroupAsync(System.Guid sessionId, string items, bool delay, object userState) {
        if ((this.FileArchiveGroupOperationCompleted == null)) {
            this.FileArchiveGroupOperationCompleted = new System.Threading.SendOrPostCallback(this.OnFileArchiveGroupOperationCompleted);
        }
        this.InvokeAsync("FileArchiveGroup", new object[] {
                    sessionId,
                    items,
                    delay}, this.FileArchiveGroupOperationCompleted, userState);
    }
    
    private void OnFileArchiveGroupOperationCompleted(object arg) {
        if ((this.FileArchiveGroupCompleted != null)) {
            System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
            this.FileArchiveGroupCompleted(this, new FileArchiveGroupCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
        }
    }
    
    /// <remarks/>
    [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://schemas.docsvision.com/Platform/2009-02-03/StorageServer/FileBringOnLine", RequestNamespace="http://schemas.docsvision.com/Platform/2009-02-03/StorageServer/", ResponseNamespace="http://schemas.docsvision.com/Platform/2009-02-03/StorageServer/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
    public void FileBringOnLine(System.Guid sessionId, System.Guid fileId) {
        this.Invoke("FileBringOnLine", new object[] {
                    sessionId,
                    fileId});
    }
    
    /// <remarks/>
    public System.IAsyncResult BeginFileBringOnLine(System.Guid sessionId, System.Guid fileId, System.AsyncCallback callback, object asyncState) {
        return this.BeginInvoke("FileBringOnLine", new object[] {
                    sessionId,
                    fileId}, callback, asyncState);
    }
    
    /// <remarks/>
    public void EndFileBringOnLine(System.IAsyncResult asyncResult) {
        this.EndInvoke(asyncResult);
    }
    
    /// <remarks/>
    public void FileBringOnLineAsync(System.Guid sessionId, System.Guid fileId) {
        this.FileBringOnLineAsync(sessionId, fileId, null);
    }
    
    /// <remarks/>
    public void FileBringOnLineAsync(System.Guid sessionId, System.Guid fileId, object userState) {
        if ((this.FileBringOnLineOperationCompleted == null)) {
            this.FileBringOnLineOperationCompleted = new System.Threading.SendOrPostCallback(this.OnFileBringOnLineOperationCompleted);
        }
        this.InvokeAsync("FileBringOnLine", new object[] {
                    sessionId,
                    fileId}, this.FileBringOnLineOperationCompleted, userState);
    }
    
    private void OnFileBringOnLineOperationCompleted(object arg) {
        if ((this.FileBringOnLineCompleted != null)) {
            System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
            this.FileBringOnLineCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
        }
    }
    
    /// <remarks/>
    [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://schemas.docsvision.com/Platform/2009-02-03/StorageServer/FileBringOnLineGr" +
        "oup", RequestNamespace="http://schemas.docsvision.com/Platform/2009-02-03/StorageServer/", ResponseNamespace="http://schemas.docsvision.com/Platform/2009-02-03/StorageServer/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
    [return: System.Xml.Serialization.XmlElementAttribute("failedItems")]
    public string FileBringOnLineGroup(System.Guid sessionId, string items) {
        object[] results = this.Invoke("FileBringOnLineGroup", new object[] {
                    sessionId,
                    items});
        return ((string)(results[0]));
    }
    
    /// <remarks/>
    public System.IAsyncResult BeginFileBringOnLineGroup(System.Guid sessionId, string items, System.AsyncCallback callback, object asyncState) {
        return this.BeginInvoke("FileBringOnLineGroup", new object[] {
                    sessionId,
                    items}, callback, asyncState);
    }
    
    /// <remarks/>
    public string EndFileBringOnLineGroup(System.IAsyncResult asyncResult) {
        object[] results = this.EndInvoke(asyncResult);
        return ((string)(results[0]));
    }
    
    /// <remarks/>
    public void FileBringOnLineGroupAsync(System.Guid sessionId, string items) {
        this.FileBringOnLineGroupAsync(sessionId, items, null);
    }
    
    /// <remarks/>
    public void FileBringOnLineGroupAsync(System.Guid sessionId, string items, object userState) {
        if ((this.FileBringOnLineGroupOperationCompleted == null)) {
            this.FileBringOnLineGroupOperationCompleted = new System.Threading.SendOrPostCallback(this.OnFileBringOnLineGroupOperationCompleted);
        }
        this.InvokeAsync("FileBringOnLineGroup", new object[] {
                    sessionId,
                    items}, this.FileBringOnLineGroupOperationCompleted, userState);
    }
    
    private void OnFileBringOnLineGroupOperationCompleted(object arg) {
        if ((this.FileBringOnLineGroupCompleted != null)) {
            System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
            this.FileBringOnLineGroupCompleted(this, new FileBringOnLineGroupCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
        }
    }
    
    /// <remarks/>
    [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://schemas.docsvision.com/Platform/2009-02-03/StorageServer/FileClose", RequestNamespace="http://schemas.docsvision.com/Platform/2009-02-03/StorageServer/", ResponseNamespace="http://schemas.docsvision.com/Platform/2009-02-03/StorageServer/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
    public void FileClose(System.Guid sessionId, System.Guid fileHandleId, bool commitWrite) {
        this.Invoke("FileClose", new object[] {
                    sessionId,
                    fileHandleId,
                    commitWrite});
    }
    
    /// <remarks/>
    public System.IAsyncResult BeginFileClose(System.Guid sessionId, System.Guid fileHandleId, bool commitWrite, System.AsyncCallback callback, object asyncState) {
        return this.BeginInvoke("FileClose", new object[] {
                    sessionId,
                    fileHandleId,
                    commitWrite}, callback, asyncState);
    }
    
    /// <remarks/>
    public void EndFileClose(System.IAsyncResult asyncResult) {
        this.EndInvoke(asyncResult);
    }
    
    /// <remarks/>
    public void FileCloseAsync(System.Guid sessionId, System.Guid fileHandleId, bool commitWrite) {
        this.FileCloseAsync(sessionId, fileHandleId, commitWrite, null);
    }
    
    /// <remarks/>
    public void FileCloseAsync(System.Guid sessionId, System.Guid fileHandleId, bool commitWrite, object userState) {
        if ((this.FileCloseOperationCompleted == null)) {
            this.FileCloseOperationCompleted = new System.Threading.SendOrPostCallback(this.OnFileCloseOperationCompleted);
        }
        this.InvokeAsync("FileClose", new object[] {
                    sessionId,
                    fileHandleId,
                    commitWrite}, this.FileCloseOperationCompleted, userState);
    }
    
    private void OnFileCloseOperationCompleted(object arg) {
        if ((this.FileCloseCompleted != null)) {
            System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
            this.FileCloseCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
        }
    }
    
    /// <remarks/>
    [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://schemas.docsvision.com/Platform/2009-02-03/StorageServer/FileCopy", RequestNamespace="http://schemas.docsvision.com/Platform/2009-02-03/StorageServer/", ResponseNamespace="http://schemas.docsvision.com/Platform/2009-02-03/StorageServer/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
    [return: System.Xml.Serialization.XmlElementAttribute("newFileId")]
    public System.Guid FileCopy(System.Guid sessionId, System.Guid fileId) {
        object[] results = this.Invoke("FileCopy", new object[] {
                    sessionId,
                    fileId});
        return ((System.Guid)(results[0]));
    }
    
    /// <remarks/>
    public System.IAsyncResult BeginFileCopy(System.Guid sessionId, System.Guid fileId, System.AsyncCallback callback, object asyncState) {
        return this.BeginInvoke("FileCopy", new object[] {
                    sessionId,
                    fileId}, callback, asyncState);
    }
    
    /// <remarks/>
    public System.Guid EndFileCopy(System.IAsyncResult asyncResult) {
        object[] results = this.EndInvoke(asyncResult);
        return ((System.Guid)(results[0]));
    }
    
    /// <remarks/>
    public void FileCopyAsync(System.Guid sessionId, System.Guid fileId) {
        this.FileCopyAsync(sessionId, fileId, null);
    }
    
    /// <remarks/>
    public void FileCopyAsync(System.Guid sessionId, System.Guid fileId, object userState) {
        if ((this.FileCopyOperationCompleted == null)) {
            this.FileCopyOperationCompleted = new System.Threading.SendOrPostCallback(this.OnFileCopyOperationCompleted);
        }
        this.InvokeAsync("FileCopy", new object[] {
                    sessionId,
                    fileId}, this.FileCopyOperationCompleted, userState);
    }
    
    private void OnFileCopyOperationCompleted(object arg) {
        if ((this.FileCopyCompleted != null)) {
            System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
            this.FileCopyCompleted(this, new FileCopyCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
        }
    }
    
    /// <remarks/>
    [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://schemas.docsvision.com/Platform/2009-02-03/StorageServer/FileCreate", RequestNamespace="http://schemas.docsvision.com/Platform/2009-02-03/StorageServer/", ResponseNamespace="http://schemas.docsvision.com/Platform/2009-02-03/StorageServer/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
    [return: System.Xml.Serialization.XmlElementAttribute("fileId")]
    public System.Guid FileCreate(System.Guid sessionId, string name) {
        object[] results = this.Invoke("FileCreate", new object[] {
                    sessionId,
                    name});
        return ((System.Guid)(results[0]));
    }
    
    /// <remarks/>
    public System.IAsyncResult BeginFileCreate(System.Guid sessionId, string name, System.AsyncCallback callback, object asyncState) {
        return this.BeginInvoke("FileCreate", new object[] {
                    sessionId,
                    name}, callback, asyncState);
    }
    
    /// <remarks/>
    public System.Guid EndFileCreate(System.IAsyncResult asyncResult) {
        object[] results = this.EndInvoke(asyncResult);
        return ((System.Guid)(results[0]));
    }
    
    /// <remarks/>
    public void FileCreateAsync(System.Guid sessionId, string name) {
        this.FileCreateAsync(sessionId, name, null);
    }
    
    /// <remarks/>
    public void FileCreateAsync(System.Guid sessionId, string name, object userState) {
        if ((this.FileCreateOperationCompleted == null)) {
            this.FileCreateOperationCompleted = new System.Threading.SendOrPostCallback(this.OnFileCreateOperationCompleted);
        }
        this.InvokeAsync("FileCreate", new object[] {
                    sessionId,
                    name}, this.FileCreateOperationCompleted, userState);
    }
    
    private void OnFileCreateOperationCompleted(object arg) {
        if ((this.FileCreateCompleted != null)) {
            System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
            this.FileCreateCompleted(this, new FileCreateCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
        }
    }
    
    /// <remarks/>
    [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://schemas.docsvision.com/Platform/2009-02-03/StorageServer/FileCreateEx", RequestNamespace="http://schemas.docsvision.com/Platform/2009-02-03/StorageServer/", ResponseNamespace="http://schemas.docsvision.com/Platform/2009-02-03/StorageServer/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
    public void FileCreateEx(System.Guid sessionId, string name, ref System.Guid newFileId) {
        object[] results = this.Invoke("FileCreateEx", new object[] {
                    sessionId,
                    name,
                    newFileId});
        newFileId = ((System.Guid)(results[0]));
    }
    
    /// <remarks/>
    public System.IAsyncResult BeginFileCreateEx(System.Guid sessionId, string name, System.Guid newFileId, System.AsyncCallback callback, object asyncState) {
        return this.BeginInvoke("FileCreateEx", new object[] {
                    sessionId,
                    name,
                    newFileId}, callback, asyncState);
    }
    
    /// <remarks/>
    public void EndFileCreateEx(System.IAsyncResult asyncResult, out System.Guid newFileId) {
        object[] results = this.EndInvoke(asyncResult);
        newFileId = ((System.Guid)(results[0]));
    }
    
    /// <remarks/>
    public void FileCreateExAsync(System.Guid sessionId, string name, System.Guid newFileId) {
        this.FileCreateExAsync(sessionId, name, newFileId, null);
    }
    
    /// <remarks/>
    public void FileCreateExAsync(System.Guid sessionId, string name, System.Guid newFileId, object userState) {
        if ((this.FileCreateExOperationCompleted == null)) {
            this.FileCreateExOperationCompleted = new System.Threading.SendOrPostCallback(this.OnFileCreateExOperationCompleted);
        }
        this.InvokeAsync("FileCreateEx", new object[] {
                    sessionId,
                    name,
                    newFileId}, this.FileCreateExOperationCompleted, userState);
    }
    
    private void OnFileCreateExOperationCompleted(object arg) {
        if ((this.FileCreateExCompleted != null)) {
            System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
            this.FileCreateExCompleted(this, new FileCreateExCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
        }
    }
    
    /// <remarks/>
    [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://schemas.docsvision.com/Platform/2009-02-03/StorageServer/FileDearchive", RequestNamespace="http://schemas.docsvision.com/Platform/2009-02-03/StorageServer/", ResponseNamespace="http://schemas.docsvision.com/Platform/2009-02-03/StorageServer/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
    public void FileDearchive(System.Guid sessionId, System.Guid fileId, bool delay) {
        this.Invoke("FileDearchive", new object[] {
                    sessionId,
                    fileId,
                    delay});
    }
    
    /// <remarks/>
    public System.IAsyncResult BeginFileDearchive(System.Guid sessionId, System.Guid fileId, bool delay, System.AsyncCallback callback, object asyncState) {
        return this.BeginInvoke("FileDearchive", new object[] {
                    sessionId,
                    fileId,
                    delay}, callback, asyncState);
    }
    
    /// <remarks/>
    public void EndFileDearchive(System.IAsyncResult asyncResult) {
        this.EndInvoke(asyncResult);
    }
    
    /// <remarks/>
    public void FileDearchiveAsync(System.Guid sessionId, System.Guid fileId, bool delay) {
        this.FileDearchiveAsync(sessionId, fileId, delay, null);
    }
    
    /// <remarks/>
    public void FileDearchiveAsync(System.Guid sessionId, System.Guid fileId, bool delay, object userState) {
        if ((this.FileDearchiveOperationCompleted == null)) {
            this.FileDearchiveOperationCompleted = new System.Threading.SendOrPostCallback(this.OnFileDearchiveOperationCompleted);
        }
        this.InvokeAsync("FileDearchive", new object[] {
                    sessionId,
                    fileId,
                    delay}, this.FileDearchiveOperationCompleted, userState);
    }
    
    private void OnFileDearchiveOperationCompleted(object arg) {
        if ((this.FileDearchiveCompleted != null)) {
            System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
            this.FileDearchiveCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
        }
    }
    
    /// <remarks/>
    [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://schemas.docsvision.com/Platform/2009-02-03/StorageServer/FileDearchiveGrou" +
        "p", RequestNamespace="http://schemas.docsvision.com/Platform/2009-02-03/StorageServer/", ResponseNamespace="http://schemas.docsvision.com/Platform/2009-02-03/StorageServer/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
    [return: System.Xml.Serialization.XmlElementAttribute("failedItems")]
    public string FileDearchiveGroup(System.Guid sessionId, string items, bool delay) {
        object[] results = this.Invoke("FileDearchiveGroup", new object[] {
                    sessionId,
                    items,
                    delay});
        return ((string)(results[0]));
    }
    
    /// <remarks/>
    public System.IAsyncResult BeginFileDearchiveGroup(System.Guid sessionId, string items, bool delay, System.AsyncCallback callback, object asyncState) {
        return this.BeginInvoke("FileDearchiveGroup", new object[] {
                    sessionId,
                    items,
                    delay}, callback, asyncState);
    }
    
    /// <remarks/>
    public string EndFileDearchiveGroup(System.IAsyncResult asyncResult) {
        object[] results = this.EndInvoke(asyncResult);
        return ((string)(results[0]));
    }
    
    /// <remarks/>
    public void FileDearchiveGroupAsync(System.Guid sessionId, string items, bool delay) {
        this.FileDearchiveGroupAsync(sessionId, items, delay, null);
    }
    
    /// <remarks/>
    public void FileDearchiveGroupAsync(System.Guid sessionId, string items, bool delay, object userState) {
        if ((this.FileDearchiveGroupOperationCompleted == null)) {
            this.FileDearchiveGroupOperationCompleted = new System.Threading.SendOrPostCallback(this.OnFileDearchiveGroupOperationCompleted);
        }
        this.InvokeAsync("FileDearchiveGroup", new object[] {
                    sessionId,
                    items,
                    delay}, this.FileDearchiveGroupOperationCompleted, userState);
    }
    
    private void OnFileDearchiveGroupOperationCompleted(object arg) {
        if ((this.FileDearchiveGroupCompleted != null)) {
            System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
            this.FileDearchiveGroupCompleted(this, new FileDearchiveGroupCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
        }
    }
    
    /// <remarks/>
    [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://schemas.docsvision.com/Platform/2009-02-03/StorageServer/FileDelete", RequestNamespace="http://schemas.docsvision.com/Platform/2009-02-03/StorageServer/", ResponseNamespace="http://schemas.docsvision.com/Platform/2009-02-03/StorageServer/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
    public void FileDelete(System.Guid sessionId, System.Guid fileId) {
        this.Invoke("FileDelete", new object[] {
                    sessionId,
                    fileId});
    }
    
    /// <remarks/>
    public System.IAsyncResult BeginFileDelete(System.Guid sessionId, System.Guid fileId, System.AsyncCallback callback, object asyncState) {
        return this.BeginInvoke("FileDelete", new object[] {
                    sessionId,
                    fileId}, callback, asyncState);
    }
    
    /// <remarks/>
    public void EndFileDelete(System.IAsyncResult asyncResult) {
        this.EndInvoke(asyncResult);
    }
    
    /// <remarks/>
    public void FileDeleteAsync(System.Guid sessionId, System.Guid fileId) {
        this.FileDeleteAsync(sessionId, fileId, null);
    }
    
    /// <remarks/>
    public void FileDeleteAsync(System.Guid sessionId, System.Guid fileId, object userState) {
        if ((this.FileDeleteOperationCompleted == null)) {
            this.FileDeleteOperationCompleted = new System.Threading.SendOrPostCallback(this.OnFileDeleteOperationCompleted);
        }
        this.InvokeAsync("FileDelete", new object[] {
                    sessionId,
                    fileId}, this.FileDeleteOperationCompleted, userState);
    }
    
    private void OnFileDeleteOperationCompleted(object arg) {
        if ((this.FileDeleteCompleted != null)) {
            System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
            this.FileDeleteCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
        }
    }
    
    /// <remarks/>
    [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://schemas.docsvision.com/Platform/2009-02-03/StorageServer/FileExists", RequestNamespace="http://schemas.docsvision.com/Platform/2009-02-03/StorageServer/", ResponseNamespace="http://schemas.docsvision.com/Platform/2009-02-03/StorageServer/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
    [return: System.Xml.Serialization.XmlElementAttribute("exists")]
    public bool FileExists(System.Guid sessionId, System.Guid fileId) {
        object[] results = this.Invoke("FileExists", new object[] {
                    sessionId,
                    fileId});
        return ((bool)(results[0]));
    }
    
    /// <remarks/>
    public System.IAsyncResult BeginFileExists(System.Guid sessionId, System.Guid fileId, System.AsyncCallback callback, object asyncState) {
        return this.BeginInvoke("FileExists", new object[] {
                    sessionId,
                    fileId}, callback, asyncState);
    }
    
    /// <remarks/>
    public bool EndFileExists(System.IAsyncResult asyncResult) {
        object[] results = this.EndInvoke(asyncResult);
        return ((bool)(results[0]));
    }
    
    /// <remarks/>
    public void FileExistsAsync(System.Guid sessionId, System.Guid fileId) {
        this.FileExistsAsync(sessionId, fileId, null);
    }
    
    /// <remarks/>
    public void FileExistsAsync(System.Guid sessionId, System.Guid fileId, object userState) {
        if ((this.FileExistsOperationCompleted == null)) {
            this.FileExistsOperationCompleted = new System.Threading.SendOrPostCallback(this.OnFileExistsOperationCompleted);
        }
        this.InvokeAsync("FileExists", new object[] {
                    sessionId,
                    fileId}, this.FileExistsOperationCompleted, userState);
    }
    
    private void OnFileExistsOperationCompleted(object arg) {
        if ((this.FileExistsCompleted != null)) {
            System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
            this.FileExistsCompleted(this, new FileExistsCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
        }
    }
    
    /// <remarks/>
    [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://schemas.docsvision.com/Platform/2009-02-03/StorageServer/FileFind", RequestNamespace="http://schemas.docsvision.com/Platform/2009-02-03/StorageServer/", ResponseNamespace="http://schemas.docsvision.com/Platform/2009-02-03/StorageServer/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
    [return: System.Xml.Serialization.XmlElementAttribute("foundFiles")]
    public string FileFind(System.Guid sessionId, string searchFilter) {
        object[] results = this.Invoke("FileFind", new object[] {
                    sessionId,
                    searchFilter});
        return ((string)(results[0]));
    }
    
    /// <remarks/>
    public System.IAsyncResult BeginFileFind(System.Guid sessionId, string searchFilter, System.AsyncCallback callback, object asyncState) {
        return this.BeginInvoke("FileFind", new object[] {
                    sessionId,
                    searchFilter}, callback, asyncState);
    }
    
    /// <remarks/>
    public string EndFileFind(System.IAsyncResult asyncResult) {
        object[] results = this.EndInvoke(asyncResult);
        return ((string)(results[0]));
    }
    
    /// <remarks/>
    public void FileFindAsync(System.Guid sessionId, string searchFilter) {
        this.FileFindAsync(sessionId, searchFilter, null);
    }
    
    /// <remarks/>
    public void FileFindAsync(System.Guid sessionId, string searchFilter, object userState) {
        if ((this.FileFindOperationCompleted == null)) {
            this.FileFindOperationCompleted = new System.Threading.SendOrPostCallback(this.OnFileFindOperationCompleted);
        }
        this.InvokeAsync("FileFind", new object[] {
                    sessionId,
                    searchFilter}, this.FileFindOperationCompleted, userState);
    }
    
    private void OnFileFindOperationCompleted(object arg) {
        if ((this.FileFindCompleted != null)) {
            System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
            this.FileFindCompleted(this, new FileFindCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
        }
    }
    
    /// <remarks/>
    [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://schemas.docsvision.com/Platform/2009-02-03/StorageServer/FileGetInfo", RequestNamespace="http://schemas.docsvision.com/Platform/2009-02-03/StorageServer/", ResponseNamespace="http://schemas.docsvision.com/Platform/2009-02-03/StorageServer/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
    [return: System.Xml.Serialization.XmlElementAttribute("fileInfo")]
    public string FileGetInfo(System.Guid sessionId, System.Guid fileId) {
        object[] results = this.Invoke("FileGetInfo", new object[] {
                    sessionId,
                    fileId});
        return ((string)(results[0]));
    }
    
    /// <remarks/>
    public System.IAsyncResult BeginFileGetInfo(System.Guid sessionId, System.Guid fileId, System.AsyncCallback callback, object asyncState) {
        return this.BeginInvoke("FileGetInfo", new object[] {
                    sessionId,
                    fileId}, callback, asyncState);
    }
    
    /// <remarks/>
    public string EndFileGetInfo(System.IAsyncResult asyncResult) {
        object[] results = this.EndInvoke(asyncResult);
        return ((string)(results[0]));
    }
    
    /// <remarks/>
    public void FileGetInfoAsync(System.Guid sessionId, System.Guid fileId) {
        this.FileGetInfoAsync(sessionId, fileId, null);
    }
    
    /// <remarks/>
    public void FileGetInfoAsync(System.Guid sessionId, System.Guid fileId, object userState) {
        if ((this.FileGetInfoOperationCompleted == null)) {
            this.FileGetInfoOperationCompleted = new System.Threading.SendOrPostCallback(this.OnFileGetInfoOperationCompleted);
        }
        this.InvokeAsync("FileGetInfo", new object[] {
                    sessionId,
                    fileId}, this.FileGetInfoOperationCompleted, userState);
    }
    
    private void OnFileGetInfoOperationCompleted(object arg) {
        if ((this.FileGetInfoCompleted != null)) {
            System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
            this.FileGetInfoCompleted(this, new FileGetInfoCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
        }
    }
    
    /// <remarks/>
    [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://schemas.docsvision.com/Platform/2009-02-03/StorageServer/FileGetPreview", RequestNamespace="http://schemas.docsvision.com/Platform/2009-02-03/StorageServer/", ResponseNamespace="http://schemas.docsvision.com/Platform/2009-02-03/StorageServer/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
    [return: System.Xml.Serialization.XmlElementAttribute("previewData")]
    public string FileGetPreview(System.Guid sessionId, System.Guid fileId) {
        object[] results = this.Invoke("FileGetPreview", new object[] {
                    sessionId,
                    fileId});
        return ((string)(results[0]));
    }
    
    /// <remarks/>
    public System.IAsyncResult BeginFileGetPreview(System.Guid sessionId, System.Guid fileId, System.AsyncCallback callback, object asyncState) {
        return this.BeginInvoke("FileGetPreview", new object[] {
                    sessionId,
                    fileId}, callback, asyncState);
    }
    
    /// <remarks/>
    public string EndFileGetPreview(System.IAsyncResult asyncResult) {
        object[] results = this.EndInvoke(asyncResult);
        return ((string)(results[0]));
    }
    
    /// <remarks/>
    public void FileGetPreviewAsync(System.Guid sessionId, System.Guid fileId) {
        this.FileGetPreviewAsync(sessionId, fileId, null);
    }
    
    /// <remarks/>
    public void FileGetPreviewAsync(System.Guid sessionId, System.Guid fileId, object userState) {
        if ((this.FileGetPreviewOperationCompleted == null)) {
            this.FileGetPreviewOperationCompleted = new System.Threading.SendOrPostCallback(this.OnFileGetPreviewOperationCompleted);
        }
        this.InvokeAsync("FileGetPreview", new object[] {
                    sessionId,
                    fileId}, this.FileGetPreviewOperationCompleted, userState);
    }
    
    private void OnFileGetPreviewOperationCompleted(object arg) {
        if ((this.FileGetPreviewCompleted != null)) {
            System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
            this.FileGetPreviewCompleted(this, new FileGetPreviewCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
        }
    }
    
    /// <remarks/>
    [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://schemas.docsvision.com/Platform/2009-02-03/StorageServer/FileOpen", RequestNamespace="http://schemas.docsvision.com/Platform/2009-02-03/StorageServer/", ResponseNamespace="http://schemas.docsvision.com/Platform/2009-02-03/StorageServer/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
    [return: System.Xml.Serialization.XmlElementAttribute("fileHandleId")]
    public System.Guid FileOpen(System.Guid sessionId, System.Guid fileId, bool modify) {
        object[] results = this.Invoke("FileOpen", new object[] {
                    sessionId,
                    fileId,
                    modify});
        return ((System.Guid)(results[0]));
    }
    
    /// <remarks/>
    public System.IAsyncResult BeginFileOpen(System.Guid sessionId, System.Guid fileId, bool modify, System.AsyncCallback callback, object asyncState) {
        return this.BeginInvoke("FileOpen", new object[] {
                    sessionId,
                    fileId,
                    modify}, callback, asyncState);
    }
    
    /// <remarks/>
    public System.Guid EndFileOpen(System.IAsyncResult asyncResult) {
        object[] results = this.EndInvoke(asyncResult);
        return ((System.Guid)(results[0]));
    }
    
    /// <remarks/>
    public void FileOpenAsync(System.Guid sessionId, System.Guid fileId, bool modify) {
        this.FileOpenAsync(sessionId, fileId, modify, null);
    }
    
    /// <remarks/>
    public void FileOpenAsync(System.Guid sessionId, System.Guid fileId, bool modify, object userState) {
        if ((this.FileOpenOperationCompleted == null)) {
            this.FileOpenOperationCompleted = new System.Threading.SendOrPostCallback(this.OnFileOpenOperationCompleted);
        }
        this.InvokeAsync("FileOpen", new object[] {
                    sessionId,
                    fileId,
                    modify}, this.FileOpenOperationCompleted, userState);
    }
    
    private void OnFileOpenOperationCompleted(object arg) {
        if ((this.FileOpenCompleted != null)) {
            System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
            this.FileOpenCompleted(this, new FileOpenCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
        }
    }
    
    /// <remarks/>
    [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://schemas.docsvision.com/Platform/2009-02-03/StorageServer/FileRead", RequestNamespace="http://schemas.docsvision.com/Platform/2009-02-03/StorageServer/", ResponseNamespace="http://schemas.docsvision.com/Platform/2009-02-03/StorageServer/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
    [return: System.Xml.Serialization.XmlElementAttribute("compressed")]
    public bool FileRead(System.Guid sessionId, System.Guid fileHandleId, [System.Xml.Serialization.XmlElementAttribute(DataType="base64Binary")] out byte[] fileData) {
        object[] results = this.Invoke("FileRead", new object[] {
                    sessionId,
                    fileHandleId});
        fileData = ((byte[])(results[1]));
        return ((bool)(results[0]));
    }
    
    /// <remarks/>
    public System.IAsyncResult BeginFileRead(System.Guid sessionId, System.Guid fileHandleId, System.AsyncCallback callback, object asyncState) {
        return this.BeginInvoke("FileRead", new object[] {
                    sessionId,
                    fileHandleId}, callback, asyncState);
    }
    
    /// <remarks/>
    public bool EndFileRead(System.IAsyncResult asyncResult, out byte[] fileData) {
        object[] results = this.EndInvoke(asyncResult);
        fileData = ((byte[])(results[1]));
        return ((bool)(results[0]));
    }
    
    /// <remarks/>
    public void FileReadAsync(System.Guid sessionId, System.Guid fileHandleId) {
        this.FileReadAsync(sessionId, fileHandleId, null);
    }
    
    /// <remarks/>
    public void FileReadAsync(System.Guid sessionId, System.Guid fileHandleId, object userState) {
        if ((this.FileReadOperationCompleted == null)) {
            this.FileReadOperationCompleted = new System.Threading.SendOrPostCallback(this.OnFileReadOperationCompleted);
        }
        this.InvokeAsync("FileRead", new object[] {
                    sessionId,
                    fileHandleId}, this.FileReadOperationCompleted, userState);
    }
    
    private void OnFileReadOperationCompleted(object arg) {
        if ((this.FileReadCompleted != null)) {
            System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
            this.FileReadCompleted(this, new FileReadCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
        }
    }
    
    /// <remarks/>
    [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://schemas.docsvision.com/Platform/2009-02-03/StorageServer/FileReplace", RequestNamespace="http://schemas.docsvision.com/Platform/2009-02-03/StorageServer/", ResponseNamespace="http://schemas.docsvision.com/Platform/2009-02-03/StorageServer/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
    public void FileReplace(System.Guid sessionId, System.Guid fileId, System.Guid newFileId) {
        this.Invoke("FileReplace", new object[] {
                    sessionId,
                    fileId,
                    newFileId});
    }
    
    /// <remarks/>
    public System.IAsyncResult BeginFileReplace(System.Guid sessionId, System.Guid fileId, System.Guid newFileId, System.AsyncCallback callback, object asyncState) {
        return this.BeginInvoke("FileReplace", new object[] {
                    sessionId,
                    fileId,
                    newFileId}, callback, asyncState);
    }
    
    /// <remarks/>
    public void EndFileReplace(System.IAsyncResult asyncResult) {
        this.EndInvoke(asyncResult);
    }
    
    /// <remarks/>
    public void FileReplaceAsync(System.Guid sessionId, System.Guid fileId, System.Guid newFileId) {
        this.FileReplaceAsync(sessionId, fileId, newFileId, null);
    }
    
    /// <remarks/>
    public void FileReplaceAsync(System.Guid sessionId, System.Guid fileId, System.Guid newFileId, object userState) {
        if ((this.FileReplaceOperationCompleted == null)) {
            this.FileReplaceOperationCompleted = new System.Threading.SendOrPostCallback(this.OnFileReplaceOperationCompleted);
        }
        this.InvokeAsync("FileReplace", new object[] {
                    sessionId,
                    fileId,
                    newFileId}, this.FileReplaceOperationCompleted, userState);
    }
    
    private void OnFileReplaceOperationCompleted(object arg) {
        if ((this.FileReplaceCompleted != null)) {
            System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
            this.FileReplaceCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
        }
    }
    
    /// <remarks/>
    [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://schemas.docsvision.com/Platform/2009-02-03/StorageServer/FileSetInfo", RequestNamespace="http://schemas.docsvision.com/Platform/2009-02-03/StorageServer/", ResponseNamespace="http://schemas.docsvision.com/Platform/2009-02-03/StorageServer/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
    public void FileSetInfo(System.Guid sessionId, System.Guid fileId, string fileInfo) {
        this.Invoke("FileSetInfo", new object[] {
                    sessionId,
                    fileId,
                    fileInfo});
    }
    
    /// <remarks/>
    public System.IAsyncResult BeginFileSetInfo(System.Guid sessionId, System.Guid fileId, string fileInfo, System.AsyncCallback callback, object asyncState) {
        return this.BeginInvoke("FileSetInfo", new object[] {
                    sessionId,
                    fileId,
                    fileInfo}, callback, asyncState);
    }
    
    /// <remarks/>
    public void EndFileSetInfo(System.IAsyncResult asyncResult) {
        this.EndInvoke(asyncResult);
    }
    
    /// <remarks/>
    public void FileSetInfoAsync(System.Guid sessionId, System.Guid fileId, string fileInfo) {
        this.FileSetInfoAsync(sessionId, fileId, fileInfo, null);
    }
    
    /// <remarks/>
    public void FileSetInfoAsync(System.Guid sessionId, System.Guid fileId, string fileInfo, object userState) {
        if ((this.FileSetInfoOperationCompleted == null)) {
            this.FileSetInfoOperationCompleted = new System.Threading.SendOrPostCallback(this.OnFileSetInfoOperationCompleted);
        }
        this.InvokeAsync("FileSetInfo", new object[] {
                    sessionId,
                    fileId,
                    fileInfo}, this.FileSetInfoOperationCompleted, userState);
    }
    
    private void OnFileSetInfoOperationCompleted(object arg) {
        if ((this.FileSetInfoCompleted != null)) {
            System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
            this.FileSetInfoCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
        }
    }
    
    /// <remarks/>
    [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://schemas.docsvision.com/Platform/2009-02-03/StorageServer/FileTakeOffLine", RequestNamespace="http://schemas.docsvision.com/Platform/2009-02-03/StorageServer/", ResponseNamespace="http://schemas.docsvision.com/Platform/2009-02-03/StorageServer/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
    public void FileTakeOffLine(System.Guid sessionId, System.Guid fileId, bool autoRestore) {
        this.Invoke("FileTakeOffLine", new object[] {
                    sessionId,
                    fileId,
                    autoRestore});
    }
    
    /// <remarks/>
    public System.IAsyncResult BeginFileTakeOffLine(System.Guid sessionId, System.Guid fileId, bool autoRestore, System.AsyncCallback callback, object asyncState) {
        return this.BeginInvoke("FileTakeOffLine", new object[] {
                    sessionId,
                    fileId,
                    autoRestore}, callback, asyncState);
    }
    
    /// <remarks/>
    public void EndFileTakeOffLine(System.IAsyncResult asyncResult) {
        this.EndInvoke(asyncResult);
    }
    
    /// <remarks/>
    public void FileTakeOffLineAsync(System.Guid sessionId, System.Guid fileId, bool autoRestore) {
        this.FileTakeOffLineAsync(sessionId, fileId, autoRestore, null);
    }
    
    /// <remarks/>
    public void FileTakeOffLineAsync(System.Guid sessionId, System.Guid fileId, bool autoRestore, object userState) {
        if ((this.FileTakeOffLineOperationCompleted == null)) {
            this.FileTakeOffLineOperationCompleted = new System.Threading.SendOrPostCallback(this.OnFileTakeOffLineOperationCompleted);
        }
        this.InvokeAsync("FileTakeOffLine", new object[] {
                    sessionId,
                    fileId,
                    autoRestore}, this.FileTakeOffLineOperationCompleted, userState);
    }
    
    private void OnFileTakeOffLineOperationCompleted(object arg) {
        if ((this.FileTakeOffLineCompleted != null)) {
            System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
            this.FileTakeOffLineCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
        }
    }
    
    /// <remarks/>
    [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://schemas.docsvision.com/Platform/2009-02-03/StorageServer/FileTakeOffLineGr" +
        "oup", RequestNamespace="http://schemas.docsvision.com/Platform/2009-02-03/StorageServer/", ResponseNamespace="http://schemas.docsvision.com/Platform/2009-02-03/StorageServer/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
    [return: System.Xml.Serialization.XmlElementAttribute("failedItems")]
    public string FileTakeOffLineGroup(System.Guid sessionId, string items, bool autoRestore) {
        object[] results = this.Invoke("FileTakeOffLineGroup", new object[] {
                    sessionId,
                    items,
                    autoRestore});
        return ((string)(results[0]));
    }
    
    /// <remarks/>
    public System.IAsyncResult BeginFileTakeOffLineGroup(System.Guid sessionId, string items, bool autoRestore, System.AsyncCallback callback, object asyncState) {
        return this.BeginInvoke("FileTakeOffLineGroup", new object[] {
                    sessionId,
                    items,
                    autoRestore}, callback, asyncState);
    }
    
    /// <remarks/>
    public string EndFileTakeOffLineGroup(System.IAsyncResult asyncResult) {
        object[] results = this.EndInvoke(asyncResult);
        return ((string)(results[0]));
    }
    
    /// <remarks/>
    public void FileTakeOffLineGroupAsync(System.Guid sessionId, string items, bool autoRestore) {
        this.FileTakeOffLineGroupAsync(sessionId, items, autoRestore, null);
    }
    
    /// <remarks/>
    public void FileTakeOffLineGroupAsync(System.Guid sessionId, string items, bool autoRestore, object userState) {
        if ((this.FileTakeOffLineGroupOperationCompleted == null)) {
            this.FileTakeOffLineGroupOperationCompleted = new System.Threading.SendOrPostCallback(this.OnFileTakeOffLineGroupOperationCompleted);
        }
        this.InvokeAsync("FileTakeOffLineGroup", new object[] {
                    sessionId,
                    items,
                    autoRestore}, this.FileTakeOffLineGroupOperationCompleted, userState);
    }
    
    private void OnFileTakeOffLineGroupOperationCompleted(object arg) {
        if ((this.FileTakeOffLineGroupCompleted != null)) {
            System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
            this.FileTakeOffLineGroupCompleted(this, new FileTakeOffLineGroupCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
        }
    }
    
    /// <remarks/>
    [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://schemas.docsvision.com/Platform/2009-02-03/StorageServer/FileWrite", RequestNamespace="http://schemas.docsvision.com/Platform/2009-02-03/StorageServer/", ResponseNamespace="http://schemas.docsvision.com/Platform/2009-02-03/StorageServer/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
    public void FileWrite(System.Guid sessionId, System.Guid fileHandleId, bool compressed, [System.Xml.Serialization.XmlElementAttribute(DataType="base64Binary")] byte[] fileData) {
        this.Invoke("FileWrite", new object[] {
                    sessionId,
                    fileHandleId,
                    compressed,
                    fileData});
    }
    
    /// <remarks/>
    public System.IAsyncResult BeginFileWrite(System.Guid sessionId, System.Guid fileHandleId, bool compressed, byte[] fileData, System.AsyncCallback callback, object asyncState) {
        return this.BeginInvoke("FileWrite", new object[] {
                    sessionId,
                    fileHandleId,
                    compressed,
                    fileData}, callback, asyncState);
    }
    
    /// <remarks/>
    public void EndFileWrite(System.IAsyncResult asyncResult) {
        this.EndInvoke(asyncResult);
    }
    
    /// <remarks/>
    public void FileWriteAsync(System.Guid sessionId, System.Guid fileHandleId, bool compressed, byte[] fileData) {
        this.FileWriteAsync(sessionId, fileHandleId, compressed, fileData, null);
    }
    
    /// <remarks/>
    public void FileWriteAsync(System.Guid sessionId, System.Guid fileHandleId, bool compressed, byte[] fileData, object userState) {
        if ((this.FileWriteOperationCompleted == null)) {
            this.FileWriteOperationCompleted = new System.Threading.SendOrPostCallback(this.OnFileWriteOperationCompleted);
        }
        this.InvokeAsync("FileWrite", new object[] {
                    sessionId,
                    fileHandleId,
                    compressed,
                    fileData}, this.FileWriteOperationCompleted, userState);
    }
    
    private void OnFileWriteOperationCompleted(object arg) {
        if ((this.FileWriteCompleted != null)) {
            System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
            this.FileWriteCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
        }
    }
    
    /// <remarks/>
    [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://schemas.docsvision.com/Platform/2009-02-03/StorageServer/FolderCopy", RequestNamespace="http://schemas.docsvision.com/Platform/2009-02-03/StorageServer/", ResponseNamespace="http://schemas.docsvision.com/Platform/2009-02-03/StorageServer/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
    [return: System.Xml.Serialization.XmlElementAttribute("newFolderId")]
    public System.Guid FolderCopy(System.Guid sessionId, System.Guid folderId, System.Guid targetFolderId) {
        object[] results = this.Invoke("FolderCopy", new object[] {
                    sessionId,
                    folderId,
                    targetFolderId});
        return ((System.Guid)(results[0]));
    }
    
    /// <remarks/>
    public System.IAsyncResult BeginFolderCopy(System.Guid sessionId, System.Guid folderId, System.Guid targetFolderId, System.AsyncCallback callback, object asyncState) {
        return this.BeginInvoke("FolderCopy", new object[] {
                    sessionId,
                    folderId,
                    targetFolderId}, callback, asyncState);
    }
    
    /// <remarks/>
    public System.Guid EndFolderCopy(System.IAsyncResult asyncResult) {
        object[] results = this.EndInvoke(asyncResult);
        return ((System.Guid)(results[0]));
    }
    
    /// <remarks/>
    public void FolderCopyAsync(System.Guid sessionId, System.Guid folderId, System.Guid targetFolderId) {
        this.FolderCopyAsync(sessionId, folderId, targetFolderId, null);
    }
    
    /// <remarks/>
    public void FolderCopyAsync(System.Guid sessionId, System.Guid folderId, System.Guid targetFolderId, object userState) {
        if ((this.FolderCopyOperationCompleted == null)) {
            this.FolderCopyOperationCompleted = new System.Threading.SendOrPostCallback(this.OnFolderCopyOperationCompleted);
        }
        this.InvokeAsync("FolderCopy", new object[] {
                    sessionId,
                    folderId,
                    targetFolderId}, this.FolderCopyOperationCompleted, userState);
    }
    
    private void OnFolderCopyOperationCompleted(object arg) {
        if ((this.FolderCopyCompleted != null)) {
            System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
            this.FolderCopyCompleted(this, new FolderCopyCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
        }
    }
    
    /// <remarks/>
    [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://schemas.docsvision.com/Platform/2009-02-03/StorageServer/FolderCopyData", RequestNamespace="http://schemas.docsvision.com/Platform/2009-02-03/StorageServer/", ResponseNamespace="http://schemas.docsvision.com/Platform/2009-02-03/StorageServer/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
    [return: System.Xml.Serialization.XmlElementAttribute("newFolderId")]
    public System.Guid FolderCopyData(System.Guid sessionId, System.Guid folderId, System.Guid newParentFolderId, string folderOptions) {
        object[] results = this.Invoke("FolderCopyData", new object[] {
                    sessionId,
                    folderId,
                    newParentFolderId,
                    folderOptions});
        return ((System.Guid)(results[0]));
    }
    
    /// <remarks/>
    public System.IAsyncResult BeginFolderCopyData(System.Guid sessionId, System.Guid folderId, System.Guid newParentFolderId, string folderOptions, System.AsyncCallback callback, object asyncState) {
        return this.BeginInvoke("FolderCopyData", new object[] {
                    sessionId,
                    folderId,
                    newParentFolderId,
                    folderOptions}, callback, asyncState);
    }
    
    /// <remarks/>
    public System.Guid EndFolderCopyData(System.IAsyncResult asyncResult) {
        object[] results = this.EndInvoke(asyncResult);
        return ((System.Guid)(results[0]));
    }
    
    /// <remarks/>
    public void FolderCopyDataAsync(System.Guid sessionId, System.Guid folderId, System.Guid newParentFolderId, string folderOptions) {
        this.FolderCopyDataAsync(sessionId, folderId, newParentFolderId, folderOptions, null);
    }
    
    /// <remarks/>
    public void FolderCopyDataAsync(System.Guid sessionId, System.Guid folderId, System.Guid newParentFolderId, string folderOptions, object userState) {
        if ((this.FolderCopyDataOperationCompleted == null)) {
            this.FolderCopyDataOperationCompleted = new System.Threading.SendOrPostCallback(this.OnFolderCopyDataOperationCompleted);
        }
        this.InvokeAsync("FolderCopyData", new object[] {
                    sessionId,
                    folderId,
                    newParentFolderId,
                    folderOptions}, this.FolderCopyDataOperationCompleted, userState);
    }
    
    private void OnFolderCopyDataOperationCompleted(object arg) {
        if ((this.FolderCopyDataCompleted != null)) {
            System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
            this.FolderCopyDataCompleted(this, new FolderCopyDataCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
        }
    }
    
    /// <remarks/>
    [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://schemas.docsvision.com/Platform/2009-02-03/StorageServer/FolderCopyEx", RequestNamespace="http://schemas.docsvision.com/Platform/2009-02-03/StorageServer/", ResponseNamespace="http://schemas.docsvision.com/Platform/2009-02-03/StorageServer/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
    [return: System.Xml.Serialization.XmlElementAttribute("newFolderId")]
    public System.Guid FolderCopyEx(System.Guid sessionId, System.Guid folderId, System.Guid targetFolderId, string newFolderName) {
        object[] results = this.Invoke("FolderCopyEx", new object[] {
                    sessionId,
                    folderId,
                    targetFolderId,
                    newFolderName});
        return ((System.Guid)(results[0]));
    }
    
    /// <remarks/>
    public System.IAsyncResult BeginFolderCopyEx(System.Guid sessionId, System.Guid folderId, System.Guid targetFolderId, string newFolderName, System.AsyncCallback callback, object asyncState) {
        return this.BeginInvoke("FolderCopyEx", new object[] {
                    sessionId,
                    folderId,
                    targetFolderId,
                    newFolderName}, callback, asyncState);
    }
    
    /// <remarks/>
    public System.Guid EndFolderCopyEx(System.IAsyncResult asyncResult) {
        object[] results = this.EndInvoke(asyncResult);
        return ((System.Guid)(results[0]));
    }
    
    /// <remarks/>
    public void FolderCopyExAsync(System.Guid sessionId, System.Guid folderId, System.Guid targetFolderId, string newFolderName) {
        this.FolderCopyExAsync(sessionId, folderId, targetFolderId, newFolderName, null);
    }
    
    /// <remarks/>
    public void FolderCopyExAsync(System.Guid sessionId, System.Guid folderId, System.Guid targetFolderId, string newFolderName, object userState) {
        if ((this.FolderCopyExOperationCompleted == null)) {
            this.FolderCopyExOperationCompleted = new System.Threading.SendOrPostCallback(this.OnFolderCopyExOperationCompleted);
        }
        this.InvokeAsync("FolderCopyEx", new object[] {
                    sessionId,
                    folderId,
                    targetFolderId,
                    newFolderName}, this.FolderCopyExOperationCompleted, userState);
    }
    
    private void OnFolderCopyExOperationCompleted(object arg) {
        if ((this.FolderCopyExCompleted != null)) {
            System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
            this.FolderCopyExCompleted(this, new FolderCopyExCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
        }
    }
    
    /// <remarks/>
    [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://schemas.docsvision.com/Platform/2009-02-03/StorageServer/FolderDelete", RequestNamespace="http://schemas.docsvision.com/Platform/2009-02-03/StorageServer/", ResponseNamespace="http://schemas.docsvision.com/Platform/2009-02-03/StorageServer/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
    public void FolderDelete(System.Guid sessionId, System.Guid folderId, bool permanent) {
        this.Invoke("FolderDelete", new object[] {
                    sessionId,
                    folderId,
                    permanent});
    }
    
    /// <remarks/>
    public System.IAsyncResult BeginFolderDelete(System.Guid sessionId, System.Guid folderId, bool permanent, System.AsyncCallback callback, object asyncState) {
        return this.BeginInvoke("FolderDelete", new object[] {
                    sessionId,
                    folderId,
                    permanent}, callback, asyncState);
    }
    
    /// <remarks/>
    public void EndFolderDelete(System.IAsyncResult asyncResult) {
        this.EndInvoke(asyncResult);
    }
    
    /// <remarks/>
    public void FolderDeleteAsync(System.Guid sessionId, System.Guid folderId, bool permanent) {
        this.FolderDeleteAsync(sessionId, folderId, permanent, null);
    }
    
    /// <remarks/>
    public void FolderDeleteAsync(System.Guid sessionId, System.Guid folderId, bool permanent, object userState) {
        if ((this.FolderDeleteOperationCompleted == null)) {
            this.FolderDeleteOperationCompleted = new System.Threading.SendOrPostCallback(this.OnFolderDeleteOperationCompleted);
        }
        this.InvokeAsync("FolderDelete", new object[] {
                    sessionId,
                    folderId,
                    permanent}, this.FolderDeleteOperationCompleted, userState);
    }
    
    private void OnFolderDeleteOperationCompleted(object arg) {
        if ((this.FolderDeleteCompleted != null)) {
            System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
            this.FolderDeleteCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
        }
    }
    
    /// <remarks/>
    [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://schemas.docsvision.com/Platform/2009-02-03/StorageServer/FolderDeleteCard", RequestNamespace="http://schemas.docsvision.com/Platform/2009-02-03/StorageServer/", ResponseNamespace="http://schemas.docsvision.com/Platform/2009-02-03/StorageServer/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
    public void FolderDeleteCard(System.Guid sessionId, System.Guid folderCardId, System.Guid cardId, bool permanent) {
        this.Invoke("FolderDeleteCard", new object[] {
                    sessionId,
                    folderCardId,
                    cardId,
                    permanent});
    }
    
    /// <remarks/>
    public System.IAsyncResult BeginFolderDeleteCard(System.Guid sessionId, System.Guid folderCardId, System.Guid cardId, bool permanent, System.AsyncCallback callback, object asyncState) {
        return this.BeginInvoke("FolderDeleteCard", new object[] {
                    sessionId,
                    folderCardId,
                    cardId,
                    permanent}, callback, asyncState);
    }
    
    /// <remarks/>
    public void EndFolderDeleteCard(System.IAsyncResult asyncResult) {
        this.EndInvoke(asyncResult);
    }
    
    /// <remarks/>
    public void FolderDeleteCardAsync(System.Guid sessionId, System.Guid folderCardId, System.Guid cardId, bool permanent) {
        this.FolderDeleteCardAsync(sessionId, folderCardId, cardId, permanent, null);
    }
    
    /// <remarks/>
    public void FolderDeleteCardAsync(System.Guid sessionId, System.Guid folderCardId, System.Guid cardId, bool permanent, object userState) {
        if ((this.FolderDeleteCardOperationCompleted == null)) {
            this.FolderDeleteCardOperationCompleted = new System.Threading.SendOrPostCallback(this.OnFolderDeleteCardOperationCompleted);
        }
        this.InvokeAsync("FolderDeleteCard", new object[] {
                    sessionId,
                    folderCardId,
                    cardId,
                    permanent}, this.FolderDeleteCardOperationCompleted, userState);
    }
    
    private void OnFolderDeleteCardOperationCompleted(object arg) {
        if ((this.FolderDeleteCardCompleted != null)) {
            System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
            this.FolderDeleteCardCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
        }
    }
    
    /// <remarks/>
    [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://schemas.docsvision.com/Platform/2009-02-03/StorageServer/FolderFindHardLin" +
        "k", RequestNamespace="http://schemas.docsvision.com/Platform/2009-02-03/StorageServer/", ResponseNamespace="http://schemas.docsvision.com/Platform/2009-02-03/StorageServer/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
    [return: System.Xml.Serialization.XmlElementAttribute("shortcutId")]
    public System.Guid FolderFindHardLink(System.Guid sessionId, System.Guid folderCardId, System.Guid cardId) {
        object[] results = this.Invoke("FolderFindHardLink", new object[] {
                    sessionId,
                    folderCardId,
                    cardId});
        return ((System.Guid)(results[0]));
    }
    
    /// <remarks/>
    public System.IAsyncResult BeginFolderFindHardLink(System.Guid sessionId, System.Guid folderCardId, System.Guid cardId, System.AsyncCallback callback, object asyncState) {
        return this.BeginInvoke("FolderFindHardLink", new object[] {
                    sessionId,
                    folderCardId,
                    cardId}, callback, asyncState);
    }
    
    /// <remarks/>
    public System.Guid EndFolderFindHardLink(System.IAsyncResult asyncResult) {
        object[] results = this.EndInvoke(asyncResult);
        return ((System.Guid)(results[0]));
    }
    
    /// <remarks/>
    public void FolderFindHardLinkAsync(System.Guid sessionId, System.Guid folderCardId, System.Guid cardId) {
        this.FolderFindHardLinkAsync(sessionId, folderCardId, cardId, null);
    }
    
    /// <remarks/>
    public void FolderFindHardLinkAsync(System.Guid sessionId, System.Guid folderCardId, System.Guid cardId, object userState) {
        if ((this.FolderFindHardLinkOperationCompleted == null)) {
            this.FolderFindHardLinkOperationCompleted = new System.Threading.SendOrPostCallback(this.OnFolderFindHardLinkOperationCompleted);
        }
        this.InvokeAsync("FolderFindHardLink", new object[] {
                    sessionId,
                    folderCardId,
                    cardId}, this.FolderFindHardLinkOperationCompleted, userState);
    }
    
    private void OnFolderFindHardLinkOperationCompleted(object arg) {
        if ((this.FolderFindHardLinkCompleted != null)) {
            System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
            this.FolderFindHardLinkCompleted(this, new FolderFindHardLinkCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
        }
    }
    
    /// <remarks/>
    [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://schemas.docsvision.com/Platform/2009-02-03/StorageServer/FolderGetInfoGrou" +
        "p", RequestNamespace="http://schemas.docsvision.com/Platform/2009-02-03/StorageServer/", ResponseNamespace="http://schemas.docsvision.com/Platform/2009-02-03/StorageServer/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
    [return: System.Xml.Serialization.XmlElementAttribute("cursorInfo")]
    public CursorInfo FolderGetInfoGroup(System.Guid sessionId, string folderIds, string folderInfoOptions) {
        object[] results = this.Invoke("FolderGetInfoGroup", new object[] {
                    sessionId,
                    folderIds,
                    folderInfoOptions});
        return ((CursorInfo)(results[0]));
    }
    
    /// <remarks/>
    public System.IAsyncResult BeginFolderGetInfoGroup(System.Guid sessionId, string folderIds, string folderInfoOptions, System.AsyncCallback callback, object asyncState) {
        return this.BeginInvoke("FolderGetInfoGroup", new object[] {
                    sessionId,
                    folderIds,
                    folderInfoOptions}, callback, asyncState);
    }
    
    /// <remarks/>
    public CursorInfo EndFolderGetInfoGroup(System.IAsyncResult asyncResult) {
        object[] results = this.EndInvoke(asyncResult);
        return ((CursorInfo)(results[0]));
    }
    
    /// <remarks/>
    public void FolderGetInfoGroupAsync(System.Guid sessionId, string folderIds, string folderInfoOptions) {
        this.FolderGetInfoGroupAsync(sessionId, folderIds, folderInfoOptions, null);
    }
    
    /// <remarks/>
    public void FolderGetInfoGroupAsync(System.Guid sessionId, string folderIds, string folderInfoOptions, object userState) {
        if ((this.FolderGetInfoGroupOperationCompleted == null)) {
            this.FolderGetInfoGroupOperationCompleted = new System.Threading.SendOrPostCallback(this.OnFolderGetInfoGroupOperationCompleted);
        }
        this.InvokeAsync("FolderGetInfoGroup", new object[] {
                    sessionId,
                    folderIds,
                    folderInfoOptions}, this.FolderGetInfoGroupOperationCompleted, userState);
    }
    
    private void OnFolderGetInfoGroupOperationCompleted(object arg) {
        if ((this.FolderGetInfoGroupCompleted != null)) {
            System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
            this.FolderGetInfoGroupCompleted(this, new FolderGetInfoGroupCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
        }
    }
    
    /// <remarks/>
    [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://schemas.docsvision.com/Platform/2009-02-03/StorageServer/FolderGetShortcut" +
        "s", RequestNamespace="http://schemas.docsvision.com/Platform/2009-02-03/StorageServer/", ResponseNamespace="http://schemas.docsvision.com/Platform/2009-02-03/StorageServer/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
    [return: System.Xml.Serialization.XmlElementAttribute("shortcuts")]
    public string FolderGetShortcuts(System.Guid sessionId, System.Guid folderCardId, System.Guid cardId, out bool usingCompression) {
        object[] results = this.Invoke("FolderGetShortcuts", new object[] {
                    sessionId,
                    folderCardId,
                    cardId});
        usingCompression = ((bool)(results[1]));
        return ((string)(results[0]));
    }
    
    /// <remarks/>
    public System.IAsyncResult BeginFolderGetShortcuts(System.Guid sessionId, System.Guid folderCardId, System.Guid cardId, System.AsyncCallback callback, object asyncState) {
        return this.BeginInvoke("FolderGetShortcuts", new object[] {
                    sessionId,
                    folderCardId,
                    cardId}, callback, asyncState);
    }
    
    /// <remarks/>
    public string EndFolderGetShortcuts(System.IAsyncResult asyncResult, out bool usingCompression) {
        object[] results = this.EndInvoke(asyncResult);
        usingCompression = ((bool)(results[1]));
        return ((string)(results[0]));
    }
    
    /// <remarks/>
    public void FolderGetShortcutsAsync(System.Guid sessionId, System.Guid folderCardId, System.Guid cardId) {
        this.FolderGetShortcutsAsync(sessionId, folderCardId, cardId, null);
    }
    
    /// <remarks/>
    public void FolderGetShortcutsAsync(System.Guid sessionId, System.Guid folderCardId, System.Guid cardId, object userState) {
        if ((this.FolderGetShortcutsOperationCompleted == null)) {
            this.FolderGetShortcutsOperationCompleted = new System.Threading.SendOrPostCallback(this.OnFolderGetShortcutsOperationCompleted);
        }
        this.InvokeAsync("FolderGetShortcuts", new object[] {
                    sessionId,
                    folderCardId,
                    cardId}, this.FolderGetShortcutsOperationCompleted, userState);
    }
    
    private void OnFolderGetShortcutsOperationCompleted(object arg) {
        if ((this.FolderGetShortcutsCompleted != null)) {
            System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
            this.FolderGetShortcutsCompleted(this, new FolderGetShortcutsCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
        }
    }
    
    /// <remarks/>
    [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://schemas.docsvision.com/Platform/2009-02-03/StorageServer/FolderGetUnreadCo" +
        "unt", RequestNamespace="http://schemas.docsvision.com/Platform/2009-02-03/StorageServer/", ResponseNamespace="http://schemas.docsvision.com/Platform/2009-02-03/StorageServer/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
    [return: System.Xml.Serialization.XmlElementAttribute("unread")]
    public int FolderGetUnreadCount(System.Guid sessionId, System.Guid folderId) {
        object[] results = this.Invoke("FolderGetUnreadCount", new object[] {
                    sessionId,
                    folderId});
        return ((int)(results[0]));
    }
    
    /// <remarks/>
    public System.IAsyncResult BeginFolderGetUnreadCount(System.Guid sessionId, System.Guid folderId, System.AsyncCallback callback, object asyncState) {
        return this.BeginInvoke("FolderGetUnreadCount", new object[] {
                    sessionId,
                    folderId}, callback, asyncState);
    }
    
    /// <remarks/>
    public int EndFolderGetUnreadCount(System.IAsyncResult asyncResult) {
        object[] results = this.EndInvoke(asyncResult);
        return ((int)(results[0]));
    }
    
    /// <remarks/>
    public void FolderGetUnreadCountAsync(System.Guid sessionId, System.Guid folderId) {
        this.FolderGetUnreadCountAsync(sessionId, folderId, null);
    }
    
    /// <remarks/>
    public void FolderGetUnreadCountAsync(System.Guid sessionId, System.Guid folderId, object userState) {
        if ((this.FolderGetUnreadCountOperationCompleted == null)) {
            this.FolderGetUnreadCountOperationCompleted = new System.Threading.SendOrPostCallback(this.OnFolderGetUnreadCountOperationCompleted);
        }
        this.InvokeAsync("FolderGetUnreadCount", new object[] {
                    sessionId,
                    folderId}, this.FolderGetUnreadCountOperationCompleted, userState);
    }
    
    private void OnFolderGetUnreadCountOperationCompleted(object arg) {
        if ((this.FolderGetUnreadCountCompleted != null)) {
            System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
            this.FolderGetUnreadCountCompleted(this, new FolderGetUnreadCountCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
        }
    }
    
    /// <remarks/>
    [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://schemas.docsvision.com/Platform/2009-02-03/StorageServer/FolderGetUnreadCo" +
        "untEx", RequestNamespace="http://schemas.docsvision.com/Platform/2009-02-03/StorageServer/", ResponseNamespace="http://schemas.docsvision.com/Platform/2009-02-03/StorageServer/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
    [return: System.Xml.Serialization.XmlElementAttribute("unread")]
    public int FolderGetUnreadCountEx(System.Guid sessionId, System.Guid folderId, bool includeArchived) {
        object[] results = this.Invoke("FolderGetUnreadCountEx", new object[] {
                    sessionId,
                    folderId,
                    includeArchived});
        return ((int)(results[0]));
    }
    
    /// <remarks/>
    public System.IAsyncResult BeginFolderGetUnreadCountEx(System.Guid sessionId, System.Guid folderId, bool includeArchived, System.AsyncCallback callback, object asyncState) {
        return this.BeginInvoke("FolderGetUnreadCountEx", new object[] {
                    sessionId,
                    folderId,
                    includeArchived}, callback, asyncState);
    }
    
    /// <remarks/>
    public int EndFolderGetUnreadCountEx(System.IAsyncResult asyncResult) {
        object[] results = this.EndInvoke(asyncResult);
        return ((int)(results[0]));
    }
    
    /// <remarks/>
    public void FolderGetUnreadCountExAsync(System.Guid sessionId, System.Guid folderId, bool includeArchived) {
        this.FolderGetUnreadCountExAsync(sessionId, folderId, includeArchived, null);
    }
    
    /// <remarks/>
    public void FolderGetUnreadCountExAsync(System.Guid sessionId, System.Guid folderId, bool includeArchived, object userState) {
        if ((this.FolderGetUnreadCountExOperationCompleted == null)) {
            this.FolderGetUnreadCountExOperationCompleted = new System.Threading.SendOrPostCallback(this.OnFolderGetUnreadCountExOperationCompleted);
        }
        this.InvokeAsync("FolderGetUnreadCountEx", new object[] {
                    sessionId,
                    folderId,
                    includeArchived}, this.FolderGetUnreadCountExOperationCompleted, userState);
    }
    
    private void OnFolderGetUnreadCountExOperationCompleted(object arg) {
        if ((this.FolderGetUnreadCountExCompleted != null)) {
            System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
            this.FolderGetUnreadCountExCompleted(this, new FolderGetUnreadCountExCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
        }
    }
    
    /// <remarks/>
    [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://schemas.docsvision.com/Platform/2009-02-03/StorageServer/FolderMakeHardLin" +
        "k", RequestNamespace="http://schemas.docsvision.com/Platform/2009-02-03/StorageServer/", ResponseNamespace="http://schemas.docsvision.com/Platform/2009-02-03/StorageServer/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
    public void FolderMakeHardLink(System.Guid sessionId, System.Guid cardId, System.Guid shortcutId) {
        this.Invoke("FolderMakeHardLink", new object[] {
                    sessionId,
                    cardId,
                    shortcutId});
    }
    
    /// <remarks/>
    public System.IAsyncResult BeginFolderMakeHardLink(System.Guid sessionId, System.Guid cardId, System.Guid shortcutId, System.AsyncCallback callback, object asyncState) {
        return this.BeginInvoke("FolderMakeHardLink", new object[] {
                    sessionId,
                    cardId,
                    shortcutId}, callback, asyncState);
    }
    
    /// <remarks/>
    public void EndFolderMakeHardLink(System.IAsyncResult asyncResult) {
        this.EndInvoke(asyncResult);
    }
    
    /// <remarks/>
    public void FolderMakeHardLinkAsync(System.Guid sessionId, System.Guid cardId, System.Guid shortcutId) {
        this.FolderMakeHardLinkAsync(sessionId, cardId, shortcutId, null);
    }
    
    /// <remarks/>
    public void FolderMakeHardLinkAsync(System.Guid sessionId, System.Guid cardId, System.Guid shortcutId, object userState) {
        if ((this.FolderMakeHardLinkOperationCompleted == null)) {
            this.FolderMakeHardLinkOperationCompleted = new System.Threading.SendOrPostCallback(this.OnFolderMakeHardLinkOperationCompleted);
        }
        this.InvokeAsync("FolderMakeHardLink", new object[] {
                    sessionId,
                    cardId,
                    shortcutId}, this.FolderMakeHardLinkOperationCompleted, userState);
    }
    
    private void OnFolderMakeHardLinkOperationCompleted(object arg) {
        if ((this.FolderMakeHardLinkCompleted != null)) {
            System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
            this.FolderMakeHardLinkCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
        }
    }
    
    /// <remarks/>
    [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://schemas.docsvision.com/Platform/2009-02-03/StorageServer/FolderMarkAll", RequestNamespace="http://schemas.docsvision.com/Platform/2009-02-03/StorageServer/", ResponseNamespace="http://schemas.docsvision.com/Platform/2009-02-03/StorageServer/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
    public void FolderMarkAll(System.Guid sessionId, System.Guid folderId, bool read) {
        this.Invoke("FolderMarkAll", new object[] {
                    sessionId,
                    folderId,
                    read});
    }
    
    /// <remarks/>
    public System.IAsyncResult BeginFolderMarkAll(System.Guid sessionId, System.Guid folderId, bool read, System.AsyncCallback callback, object asyncState) {
        return this.BeginInvoke("FolderMarkAll", new object[] {
                    sessionId,
                    folderId,
                    read}, callback, asyncState);
    }
    
    /// <remarks/>
    public void EndFolderMarkAll(System.IAsyncResult asyncResult) {
        this.EndInvoke(asyncResult);
    }
    
    /// <remarks/>
    public void FolderMarkAllAsync(System.Guid sessionId, System.Guid folderId, bool read) {
        this.FolderMarkAllAsync(sessionId, folderId, read, null);
    }
    
    /// <remarks/>
    public void FolderMarkAllAsync(System.Guid sessionId, System.Guid folderId, bool read, object userState) {
        if ((this.FolderMarkAllOperationCompleted == null)) {
            this.FolderMarkAllOperationCompleted = new System.Threading.SendOrPostCallback(this.OnFolderMarkAllOperationCompleted);
        }
        this.InvokeAsync("FolderMarkAll", new object[] {
                    sessionId,
                    folderId,
                    read}, this.FolderMarkAllOperationCompleted, userState);
    }
    
    private void OnFolderMarkAllOperationCompleted(object arg) {
        if ((this.FolderMarkAllCompleted != null)) {
            System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
            this.FolderMarkAllCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
        }
    }
    
    /// <remarks/>
    [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://schemas.docsvision.com/Platform/2009-02-03/StorageServer/FolderPurge", RequestNamespace="http://schemas.docsvision.com/Platform/2009-02-03/StorageServer/", ResponseNamespace="http://schemas.docsvision.com/Platform/2009-02-03/StorageServer/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
    public void FolderPurge(System.Guid sessionId, System.Guid folderId, bool recursive, double maxDate) {
        this.Invoke("FolderPurge", new object[] {
                    sessionId,
                    folderId,
                    recursive,
                    maxDate});
    }
    
    /// <remarks/>
    public System.IAsyncResult BeginFolderPurge(System.Guid sessionId, System.Guid folderId, bool recursive, double maxDate, System.AsyncCallback callback, object asyncState) {
        return this.BeginInvoke("FolderPurge", new object[] {
                    sessionId,
                    folderId,
                    recursive,
                    maxDate}, callback, asyncState);
    }
    
    /// <remarks/>
    public void EndFolderPurge(System.IAsyncResult asyncResult) {
        this.EndInvoke(asyncResult);
    }
    
    /// <remarks/>
    public void FolderPurgeAsync(System.Guid sessionId, System.Guid folderId, bool recursive, double maxDate) {
        this.FolderPurgeAsync(sessionId, folderId, recursive, maxDate, null);
    }
    
    /// <remarks/>
    public void FolderPurgeAsync(System.Guid sessionId, System.Guid folderId, bool recursive, double maxDate, object userState) {
        if ((this.FolderPurgeOperationCompleted == null)) {
            this.FolderPurgeOperationCompleted = new System.Threading.SendOrPostCallback(this.OnFolderPurgeOperationCompleted);
        }
        this.InvokeAsync("FolderPurge", new object[] {
                    sessionId,
                    folderId,
                    recursive,
                    maxDate}, this.FolderPurgeOperationCompleted, userState);
    }
    
    private void OnFolderPurgeOperationCompleted(object arg) {
        if ((this.FolderPurgeCompleted != null)) {
            System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
            this.FolderPurgeCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
        }
    }
    
    /// <remarks/>
    [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://schemas.docsvision.com/Platform/2009-02-03/StorageServer/FolderSetCardDesc" +
        "riptor", RequestNamespace="http://schemas.docsvision.com/Platform/2009-02-03/StorageServer/", ResponseNamespace="http://schemas.docsvision.com/Platform/2009-02-03/StorageServer/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
    public void FolderSetCardDescriptor(System.Guid sessionId, System.Guid cardId, [System.Xml.Serialization.XmlElementAttribute(DataType="base64Binary")] byte[] descBytes, int securityInfo, int flags) {
        this.Invoke("FolderSetCardDescriptor", new object[] {
                    sessionId,
                    cardId,
                    descBytes,
                    securityInfo,
                    flags});
    }
    
    /// <remarks/>
    public System.IAsyncResult BeginFolderSetCardDescriptor(System.Guid sessionId, System.Guid cardId, byte[] descBytes, int securityInfo, int flags, System.AsyncCallback callback, object asyncState) {
        return this.BeginInvoke("FolderSetCardDescriptor", new object[] {
                    sessionId,
                    cardId,
                    descBytes,
                    securityInfo,
                    flags}, callback, asyncState);
    }
    
    /// <remarks/>
    public void EndFolderSetCardDescriptor(System.IAsyncResult asyncResult) {
        this.EndInvoke(asyncResult);
    }
    
    /// <remarks/>
    public void FolderSetCardDescriptorAsync(System.Guid sessionId, System.Guid cardId, byte[] descBytes, int securityInfo, int flags) {
        this.FolderSetCardDescriptorAsync(sessionId, cardId, descBytes, securityInfo, flags, null);
    }
    
    /// <remarks/>
    public void FolderSetCardDescriptorAsync(System.Guid sessionId, System.Guid cardId, byte[] descBytes, int securityInfo, int flags, object userState) {
        if ((this.FolderSetCardDescriptorOperationCompleted == null)) {
            this.FolderSetCardDescriptorOperationCompleted = new System.Threading.SendOrPostCallback(this.OnFolderSetCardDescriptorOperationCompleted);
        }
        this.InvokeAsync("FolderSetCardDescriptor", new object[] {
                    sessionId,
                    cardId,
                    descBytes,
                    securityInfo,
                    flags}, this.FolderSetCardDescriptorOperationCompleted, userState);
    }
    
    private void OnFolderSetCardDescriptorOperationCompleted(object arg) {
        if ((this.FolderSetCardDescriptorCompleted != null)) {
            System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
            this.FolderSetCardDescriptorCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
        }
    }
    
    /// <remarks/>
    [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://schemas.docsvision.com/Platform/2009-02-03/StorageServer/GetServerDateTime" +
        "", RequestNamespace="http://schemas.docsvision.com/Platform/2009-02-03/StorageServer/", ResponseNamespace="http://schemas.docsvision.com/Platform/2009-02-03/StorageServer/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
    [return: System.Xml.Serialization.XmlElementAttribute("curDateTime")]
    public double GetServerDateTime() {
        object[] results = this.Invoke("GetServerDateTime", new object[0]);
        return ((double)(results[0]));
    }
    
    /// <remarks/>
    public System.IAsyncResult BeginGetServerDateTime(System.AsyncCallback callback, object asyncState) {
        return this.BeginInvoke("GetServerDateTime", new object[0], callback, asyncState);
    }
    
    /// <remarks/>
    public double EndGetServerDateTime(System.IAsyncResult asyncResult) {
        object[] results = this.EndInvoke(asyncResult);
        return ((double)(results[0]));
    }
    
    /// <remarks/>
    public void GetServerDateTimeAsync() {
        this.GetServerDateTimeAsync(null);
    }
    
    /// <remarks/>
    public void GetServerDateTimeAsync(object userState) {
        if ((this.GetServerDateTimeOperationCompleted == null)) {
            this.GetServerDateTimeOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetServerDateTimeOperationCompleted);
        }
        this.InvokeAsync("GetServerDateTime", new object[0], this.GetServerDateTimeOperationCompleted, userState);
    }
    
    private void OnGetServerDateTimeOperationCompleted(object arg) {
        if ((this.GetServerDateTimeCompleted != null)) {
            System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
            this.GetServerDateTimeCompleted(this, new GetServerDateTimeCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
        }
    }
    
    /// <remarks/>
    [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://schemas.docsvision.com/Platform/2009-02-03/StorageServer/IconCreate", RequestNamespace="http://schemas.docsvision.com/Platform/2009-02-03/StorageServer/", ResponseNamespace="http://schemas.docsvision.com/Platform/2009-02-03/StorageServer/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
    [return: System.Xml.Serialization.XmlElementAttribute("newIconId")]
    public System.Guid IconCreate(System.Guid sessionId, string xmlIcon) {
        object[] results = this.Invoke("IconCreate", new object[] {
                    sessionId,
                    xmlIcon});
        return ((System.Guid)(results[0]));
    }
    
    /// <remarks/>
    public System.IAsyncResult BeginIconCreate(System.Guid sessionId, string xmlIcon, System.AsyncCallback callback, object asyncState) {
        return this.BeginInvoke("IconCreate", new object[] {
                    sessionId,
                    xmlIcon}, callback, asyncState);
    }
    
    /// <remarks/>
    public System.Guid EndIconCreate(System.IAsyncResult asyncResult) {
        object[] results = this.EndInvoke(asyncResult);
        return ((System.Guid)(results[0]));
    }
    
    /// <remarks/>
    public void IconCreateAsync(System.Guid sessionId, string xmlIcon) {
        this.IconCreateAsync(sessionId, xmlIcon, null);
    }
    
    /// <remarks/>
    public void IconCreateAsync(System.Guid sessionId, string xmlIcon, object userState) {
        if ((this.IconCreateOperationCompleted == null)) {
            this.IconCreateOperationCompleted = new System.Threading.SendOrPostCallback(this.OnIconCreateOperationCompleted);
        }
        this.InvokeAsync("IconCreate", new object[] {
                    sessionId,
                    xmlIcon}, this.IconCreateOperationCompleted, userState);
    }
    
    private void OnIconCreateOperationCompleted(object arg) {
        if ((this.IconCreateCompleted != null)) {
            System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
            this.IconCreateCompleted(this, new IconCreateCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
        }
    }
    
    /// <remarks/>
    [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://schemas.docsvision.com/Platform/2009-02-03/StorageServer/IconDelete", RequestNamespace="http://schemas.docsvision.com/Platform/2009-02-03/StorageServer/", ResponseNamespace="http://schemas.docsvision.com/Platform/2009-02-03/StorageServer/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
    public void IconDelete(System.Guid sessionId, System.Guid iconId) {
        this.Invoke("IconDelete", new object[] {
                    sessionId,
                    iconId});
    }
    
    /// <remarks/>
    public System.IAsyncResult BeginIconDelete(System.Guid sessionId, System.Guid iconId, System.AsyncCallback callback, object asyncState) {
        return this.BeginInvoke("IconDelete", new object[] {
                    sessionId,
                    iconId}, callback, asyncState);
    }
    
    /// <remarks/>
    public void EndIconDelete(System.IAsyncResult asyncResult) {
        this.EndInvoke(asyncResult);
    }
    
    /// <remarks/>
    public void IconDeleteAsync(System.Guid sessionId, System.Guid iconId) {
        this.IconDeleteAsync(sessionId, iconId, null);
    }
    
    /// <remarks/>
    public void IconDeleteAsync(System.Guid sessionId, System.Guid iconId, object userState) {
        if ((this.IconDeleteOperationCompleted == null)) {
            this.IconDeleteOperationCompleted = new System.Threading.SendOrPostCallback(this.OnIconDeleteOperationCompleted);
        }
        this.InvokeAsync("IconDelete", new object[] {
                    sessionId,
                    iconId}, this.IconDeleteOperationCompleted, userState);
    }
    
    private void OnIconDeleteOperationCompleted(object arg) {
        if ((this.IconDeleteCompleted != null)) {
            System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
            this.IconDeleteCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
        }
    }
    
    /// <remarks/>
    [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://schemas.docsvision.com/Platform/2009-02-03/StorageServer/IconGetInfoGroup", RequestNamespace="http://schemas.docsvision.com/Platform/2009-02-03/StorageServer/", ResponseNamespace="http://schemas.docsvision.com/Platform/2009-02-03/StorageServer/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
    [return: System.Xml.Serialization.XmlElementAttribute("xmlIcons")]
    public string IconGetInfoGroup(System.Guid sessionId, string xmlIconGroup, out string failedItems) {
        object[] results = this.Invoke("IconGetInfoGroup", new object[] {
                    sessionId,
                    xmlIconGroup});
        failedItems = ((string)(results[1]));
        return ((string)(results[0]));
    }
    
    /// <remarks/>
    public System.IAsyncResult BeginIconGetInfoGroup(System.Guid sessionId, string xmlIconGroup, System.AsyncCallback callback, object asyncState) {
        return this.BeginInvoke("IconGetInfoGroup", new object[] {
                    sessionId,
                    xmlIconGroup}, callback, asyncState);
    }
    
    /// <remarks/>
    public string EndIconGetInfoGroup(System.IAsyncResult asyncResult, out string failedItems) {
        object[] results = this.EndInvoke(asyncResult);
        failedItems = ((string)(results[1]));
        return ((string)(results[0]));
    }
    
    /// <remarks/>
    public void IconGetInfoGroupAsync(System.Guid sessionId, string xmlIconGroup) {
        this.IconGetInfoGroupAsync(sessionId, xmlIconGroup, null);
    }
    
    /// <remarks/>
    public void IconGetInfoGroupAsync(System.Guid sessionId, string xmlIconGroup, object userState) {
        if ((this.IconGetInfoGroupOperationCompleted == null)) {
            this.IconGetInfoGroupOperationCompleted = new System.Threading.SendOrPostCallback(this.OnIconGetInfoGroupOperationCompleted);
        }
        this.InvokeAsync("IconGetInfoGroup", new object[] {
                    sessionId,
                    xmlIconGroup}, this.IconGetInfoGroupOperationCompleted, userState);
    }
    
    private void OnIconGetInfoGroupOperationCompleted(object arg) {
        if ((this.IconGetInfoGroupCompleted != null)) {
            System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
            this.IconGetInfoGroupCompleted(this, new IconGetInfoGroupCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
        }
    }
    
    /// <remarks/>
    [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://schemas.docsvision.com/Platform/2009-02-03/StorageServer/IconGetList", RequestNamespace="http://schemas.docsvision.com/Platform/2009-02-03/StorageServer/", ResponseNamespace="http://schemas.docsvision.com/Platform/2009-02-03/StorageServer/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
    [return: System.Xml.Serialization.XmlElementAttribute("cursorInfo")]
    public CursorInfoEx IconGetList(System.Guid sessionId, int pageItemsCount) {
        object[] results = this.Invoke("IconGetList", new object[] {
                    sessionId,
                    pageItemsCount});
        return ((CursorInfoEx)(results[0]));
    }
    
    /// <remarks/>
    public System.IAsyncResult BeginIconGetList(System.Guid sessionId, int pageItemsCount, System.AsyncCallback callback, object asyncState) {
        return this.BeginInvoke("IconGetList", new object[] {
                    sessionId,
                    pageItemsCount}, callback, asyncState);
    }
    
    /// <remarks/>
    public CursorInfoEx EndIconGetList(System.IAsyncResult asyncResult) {
        object[] results = this.EndInvoke(asyncResult);
        return ((CursorInfoEx)(results[0]));
    }
    
    /// <remarks/>
    public void IconGetListAsync(System.Guid sessionId, int pageItemsCount) {
        this.IconGetListAsync(sessionId, pageItemsCount, null);
    }
    
    /// <remarks/>
    public void IconGetListAsync(System.Guid sessionId, int pageItemsCount, object userState) {
        if ((this.IconGetListOperationCompleted == null)) {
            this.IconGetListOperationCompleted = new System.Threading.SendOrPostCallback(this.OnIconGetListOperationCompleted);
        }
        this.InvokeAsync("IconGetList", new object[] {
                    sessionId,
                    pageItemsCount}, this.IconGetListOperationCompleted, userState);
    }
    
    private void OnIconGetListOperationCompleted(object arg) {
        if ((this.IconGetListCompleted != null)) {
            System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
            this.IconGetListCompleted(this, new IconGetListCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
        }
    }
    
    /// <remarks/>
    [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://schemas.docsvision.com/Platform/2009-02-03/StorageServer/IconSetInfo", RequestNamespace="http://schemas.docsvision.com/Platform/2009-02-03/StorageServer/", ResponseNamespace="http://schemas.docsvision.com/Platform/2009-02-03/StorageServer/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
    public void IconSetInfo(System.Guid sessionId, string xmlIcon) {
        this.Invoke("IconSetInfo", new object[] {
                    sessionId,
                    xmlIcon});
    }
    
    /// <remarks/>
    public System.IAsyncResult BeginIconSetInfo(System.Guid sessionId, string xmlIcon, System.AsyncCallback callback, object asyncState) {
        return this.BeginInvoke("IconSetInfo", new object[] {
                    sessionId,
                    xmlIcon}, callback, asyncState);
    }
    
    /// <remarks/>
    public void EndIconSetInfo(System.IAsyncResult asyncResult) {
        this.EndInvoke(asyncResult);
    }
    
    /// <remarks/>
    public void IconSetInfoAsync(System.Guid sessionId, string xmlIcon) {
        this.IconSetInfoAsync(sessionId, xmlIcon, null);
    }
    
    /// <remarks/>
    public void IconSetInfoAsync(System.Guid sessionId, string xmlIcon, object userState) {
        if ((this.IconSetInfoOperationCompleted == null)) {
            this.IconSetInfoOperationCompleted = new System.Threading.SendOrPostCallback(this.OnIconSetInfoOperationCompleted);
        }
        this.InvokeAsync("IconSetInfo", new object[] {
                    sessionId,
                    xmlIcon}, this.IconSetInfoOperationCompleted, userState);
    }
    
    private void OnIconSetInfoOperationCompleted(object arg) {
        if ((this.IconSetInfoCompleted != null)) {
            System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
            this.IconSetInfoCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
        }
    }
    
    /// <remarks/>
    [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://schemas.docsvision.com/Platform/2009-02-03/StorageServer/IncrementFeatureU" +
        "sage", RequestNamespace="http://schemas.docsvision.com/Platform/2009-02-03/StorageServer/", ResponseNamespace="http://schemas.docsvision.com/Platform/2009-02-03/StorageServer/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
    public void IncrementFeatureUsage(System.Guid sessionId, System.Guid featureId) {
        this.Invoke("IncrementFeatureUsage", new object[] {
                    sessionId,
                    featureId});
    }
    
    /// <remarks/>
    public System.IAsyncResult BeginIncrementFeatureUsage(System.Guid sessionId, System.Guid featureId, System.AsyncCallback callback, object asyncState) {
        return this.BeginInvoke("IncrementFeatureUsage", new object[] {
                    sessionId,
                    featureId}, callback, asyncState);
    }
    
    /// <remarks/>
    public void EndIncrementFeatureUsage(System.IAsyncResult asyncResult) {
        this.EndInvoke(asyncResult);
    }
    
    /// <remarks/>
    public void IncrementFeatureUsageAsync(System.Guid sessionId, System.Guid featureId) {
        this.IncrementFeatureUsageAsync(sessionId, featureId, null);
    }
    
    /// <remarks/>
    public void IncrementFeatureUsageAsync(System.Guid sessionId, System.Guid featureId, object userState) {
        if ((this.IncrementFeatureUsageOperationCompleted == null)) {
            this.IncrementFeatureUsageOperationCompleted = new System.Threading.SendOrPostCallback(this.OnIncrementFeatureUsageOperationCompleted);
        }
        this.InvokeAsync("IncrementFeatureUsage", new object[] {
                    sessionId,
                    featureId}, this.IncrementFeatureUsageOperationCompleted, userState);
    }
    
    private void OnIncrementFeatureUsageOperationCompleted(object arg) {
        if ((this.IncrementFeatureUsageCompleted != null)) {
            System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
            this.IncrementFeatureUsageCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
        }
    }
    
    /// <remarks/>
    [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://schemas.docsvision.com/Platform/2009-02-03/StorageServer/LabelClearCard", RequestNamespace="http://schemas.docsvision.com/Platform/2009-02-03/StorageServer/", ResponseNamespace="http://schemas.docsvision.com/Platform/2009-02-03/StorageServer/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
    public void LabelClearCard(System.Guid sessionId, System.Guid cardId) {
        this.Invoke("LabelClearCard", new object[] {
                    sessionId,
                    cardId});
    }
    
    /// <remarks/>
    public System.IAsyncResult BeginLabelClearCard(System.Guid sessionId, System.Guid cardId, System.AsyncCallback callback, object asyncState) {
        return this.BeginInvoke("LabelClearCard", new object[] {
                    sessionId,
                    cardId}, callback, asyncState);
    }
    
    /// <remarks/>
    public void EndLabelClearCard(System.IAsyncResult asyncResult) {
        this.EndInvoke(asyncResult);
    }
    
    /// <remarks/>
    public void LabelClearCardAsync(System.Guid sessionId, System.Guid cardId) {
        this.LabelClearCardAsync(sessionId, cardId, null);
    }
    
    /// <remarks/>
    public void LabelClearCardAsync(System.Guid sessionId, System.Guid cardId, object userState) {
        if ((this.LabelClearCardOperationCompleted == null)) {
            this.LabelClearCardOperationCompleted = new System.Threading.SendOrPostCallback(this.OnLabelClearCardOperationCompleted);
        }
        this.InvokeAsync("LabelClearCard", new object[] {
                    sessionId,
                    cardId}, this.LabelClearCardOperationCompleted, userState);
    }
    
    private void OnLabelClearCardOperationCompleted(object arg) {
        if ((this.LabelClearCardCompleted != null)) {
            System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
            this.LabelClearCardCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
        }
    }
    
    /// <remarks/>
    [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://schemas.docsvision.com/Platform/2009-02-03/StorageServer/LabelCreate", RequestNamespace="http://schemas.docsvision.com/Platform/2009-02-03/StorageServer/", ResponseNamespace="http://schemas.docsvision.com/Platform/2009-02-03/StorageServer/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
    [return: System.Xml.Serialization.XmlElementAttribute("labelId")]
    public System.Guid LabelCreate(System.Guid sessionId, string xmlLabel) {
        object[] results = this.Invoke("LabelCreate", new object[] {
                    sessionId,
                    xmlLabel});
        return ((System.Guid)(results[0]));
    }
    
    /// <remarks/>
    public System.IAsyncResult BeginLabelCreate(System.Guid sessionId, string xmlLabel, System.AsyncCallback callback, object asyncState) {
        return this.BeginInvoke("LabelCreate", new object[] {
                    sessionId,
                    xmlLabel}, callback, asyncState);
    }
    
    /// <remarks/>
    public System.Guid EndLabelCreate(System.IAsyncResult asyncResult) {
        object[] results = this.EndInvoke(asyncResult);
        return ((System.Guid)(results[0]));
    }
    
    /// <remarks/>
    public void LabelCreateAsync(System.Guid sessionId, string xmlLabel) {
        this.LabelCreateAsync(sessionId, xmlLabel, null);
    }
    
    /// <remarks/>
    public void LabelCreateAsync(System.Guid sessionId, string xmlLabel, object userState) {
        if ((this.LabelCreateOperationCompleted == null)) {
            this.LabelCreateOperationCompleted = new System.Threading.SendOrPostCallback(this.OnLabelCreateOperationCompleted);
        }
        this.InvokeAsync("LabelCreate", new object[] {
                    sessionId,
                    xmlLabel}, this.LabelCreateOperationCompleted, userState);
    }
    
    private void OnLabelCreateOperationCompleted(object arg) {
        if ((this.LabelCreateCompleted != null)) {
            System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
            this.LabelCreateCompleted(this, new LabelCreateCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
        }
    }
    
    /// <remarks/>
    [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://schemas.docsvision.com/Platform/2009-02-03/StorageServer/LabelDelete", RequestNamespace="http://schemas.docsvision.com/Platform/2009-02-03/StorageServer/", ResponseNamespace="http://schemas.docsvision.com/Platform/2009-02-03/StorageServer/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
    public void LabelDelete(System.Guid sessionId, System.Guid labelId) {
        this.Invoke("LabelDelete", new object[] {
                    sessionId,
                    labelId});
    }
    
    /// <remarks/>
    public System.IAsyncResult BeginLabelDelete(System.Guid sessionId, System.Guid labelId, System.AsyncCallback callback, object asyncState) {
        return this.BeginInvoke("LabelDelete", new object[] {
                    sessionId,
                    labelId}, callback, asyncState);
    }
    
    /// <remarks/>
    public void EndLabelDelete(System.IAsyncResult asyncResult) {
        this.EndInvoke(asyncResult);
    }
    
    /// <remarks/>
    public void LabelDeleteAsync(System.Guid sessionId, System.Guid labelId) {
        this.LabelDeleteAsync(sessionId, labelId, null);
    }
    
    /// <remarks/>
    public void LabelDeleteAsync(System.Guid sessionId, System.Guid labelId, object userState) {
        if ((this.LabelDeleteOperationCompleted == null)) {
            this.LabelDeleteOperationCompleted = new System.Threading.SendOrPostCallback(this.OnLabelDeleteOperationCompleted);
        }
        this.InvokeAsync("LabelDelete", new object[] {
                    sessionId,
                    labelId}, this.LabelDeleteOperationCompleted, userState);
    }
    
    private void OnLabelDeleteOperationCompleted(object arg) {
        if ((this.LabelDeleteCompleted != null)) {
            System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
            this.LabelDeleteCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
        }
    }
    
    /// <remarks/>
    [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://schemas.docsvision.com/Platform/2009-02-03/StorageServer/LabelGetList", RequestNamespace="http://schemas.docsvision.com/Platform/2009-02-03/StorageServer/", ResponseNamespace="http://schemas.docsvision.com/Platform/2009-02-03/StorageServer/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
    [return: System.Xml.Serialization.XmlElementAttribute("xmlLabels")]
    public string LabelGetList(System.Guid sessionId) {
        object[] results = this.Invoke("LabelGetList", new object[] {
                    sessionId});
        return ((string)(results[0]));
    }
    
    /// <remarks/>
    public System.IAsyncResult BeginLabelGetList(System.Guid sessionId, System.AsyncCallback callback, object asyncState) {
        return this.BeginInvoke("LabelGetList", new object[] {
                    sessionId}, callback, asyncState);
    }
    
    /// <remarks/>
    public string EndLabelGetList(System.IAsyncResult asyncResult) {
        object[] results = this.EndInvoke(asyncResult);
        return ((string)(results[0]));
    }
    
    /// <remarks/>
    public void LabelGetListAsync(System.Guid sessionId) {
        this.LabelGetListAsync(sessionId, null);
    }
    
    /// <remarks/>
    public void LabelGetListAsync(System.Guid sessionId, object userState) {
        if ((this.LabelGetListOperationCompleted == null)) {
            this.LabelGetListOperationCompleted = new System.Threading.SendOrPostCallback(this.OnLabelGetListOperationCompleted);
        }
        this.InvokeAsync("LabelGetList", new object[] {
                    sessionId}, this.LabelGetListOperationCompleted, userState);
    }
    
    private void OnLabelGetListOperationCompleted(object arg) {
        if ((this.LabelGetListCompleted != null)) {
            System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
            this.LabelGetListCompleted(this, new LabelGetListCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
        }
    }
    
    /// <remarks/>
    [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://schemas.docsvision.com/Platform/2009-02-03/StorageServer/LabelSetCard", RequestNamespace="http://schemas.docsvision.com/Platform/2009-02-03/StorageServer/", ResponseNamespace="http://schemas.docsvision.com/Platform/2009-02-03/StorageServer/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
    public void LabelSetCard(System.Guid sessionId, System.Guid cardId, System.Guid labelId, bool enable) {
        this.Invoke("LabelSetCard", new object[] {
                    sessionId,
                    cardId,
                    labelId,
                    enable});
    }
    
    /// <remarks/>
    public System.IAsyncResult BeginLabelSetCard(System.Guid sessionId, System.Guid cardId, System.Guid labelId, bool enable, System.AsyncCallback callback, object asyncState) {
        return this.BeginInvoke("LabelSetCard", new object[] {
                    sessionId,
                    cardId,
                    labelId,
                    enable}, callback, asyncState);
    }
    
    /// <remarks/>
    public void EndLabelSetCard(System.IAsyncResult asyncResult) {
        this.EndInvoke(asyncResult);
    }
    
    /// <remarks/>
    public void LabelSetCardAsync(System.Guid sessionId, System.Guid cardId, System.Guid labelId, bool enable) {
        this.LabelSetCardAsync(sessionId, cardId, labelId, enable, null);
    }
    
    /// <remarks/>
    public void LabelSetCardAsync(System.Guid sessionId, System.Guid cardId, System.Guid labelId, bool enable, object userState) {
        if ((this.LabelSetCardOperationCompleted == null)) {
            this.LabelSetCardOperationCompleted = new System.Threading.SendOrPostCallback(this.OnLabelSetCardOperationCompleted);
        }
        this.InvokeAsync("LabelSetCard", new object[] {
                    sessionId,
                    cardId,
                    labelId,
                    enable}, this.LabelSetCardOperationCompleted, userState);
    }
    
    private void OnLabelSetCardOperationCompleted(object arg) {
        if ((this.LabelSetCardCompleted != null)) {
            System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
            this.LabelSetCardCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
        }
    }
    
    /// <remarks/>
    [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://schemas.docsvision.com/Platform/2009-02-03/StorageServer/LabelSetInfo", RequestNamespace="http://schemas.docsvision.com/Platform/2009-02-03/StorageServer/", ResponseNamespace="http://schemas.docsvision.com/Platform/2009-02-03/StorageServer/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
    public void LabelSetInfo(System.Guid sessionId, string xmlLabel) {
        this.Invoke("LabelSetInfo", new object[] {
                    sessionId,
                    xmlLabel});
    }
    
    /// <remarks/>
    public System.IAsyncResult BeginLabelSetInfo(System.Guid sessionId, string xmlLabel, System.AsyncCallback callback, object asyncState) {
        return this.BeginInvoke("LabelSetInfo", new object[] {
                    sessionId,
                    xmlLabel}, callback, asyncState);
    }
    
    /// <remarks/>
    public void EndLabelSetInfo(System.IAsyncResult asyncResult) {
        this.EndInvoke(asyncResult);
    }
    
    /// <remarks/>
    public void LabelSetInfoAsync(System.Guid sessionId, string xmlLabel) {
        this.LabelSetInfoAsync(sessionId, xmlLabel, null);
    }
    
    /// <remarks/>
    public void LabelSetInfoAsync(System.Guid sessionId, string xmlLabel, object userState) {
        if ((this.LabelSetInfoOperationCompleted == null)) {
            this.LabelSetInfoOperationCompleted = new System.Threading.SendOrPostCallback(this.OnLabelSetInfoOperationCompleted);
        }
        this.InvokeAsync("LabelSetInfo", new object[] {
                    sessionId,
                    xmlLabel}, this.LabelSetInfoOperationCompleted, userState);
    }
    
    private void OnLabelSetInfoOperationCompleted(object arg) {
        if ((this.LabelSetInfoCompleted != null)) {
            System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
            this.LabelSetInfoCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
        }
    }
    
    /// <remarks/>
    [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://schemas.docsvision.com/Platform/2009-02-03/StorageServer/LinkClear", RequestNamespace="http://schemas.docsvision.com/Platform/2009-02-03/StorageServer/", ResponseNamespace="http://schemas.docsvision.com/Platform/2009-02-03/StorageServer/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
    public void LinkClear(System.Guid sessionId, System.Guid sectionId, System.Guid rowId, string fieldName) {
        this.Invoke("LinkClear", new object[] {
                    sessionId,
                    sectionId,
                    rowId,
                    fieldName});
    }
    
    /// <remarks/>
    public System.IAsyncResult BeginLinkClear(System.Guid sessionId, System.Guid sectionId, System.Guid rowId, string fieldName, System.AsyncCallback callback, object asyncState) {
        return this.BeginInvoke("LinkClear", new object[] {
                    sessionId,
                    sectionId,
                    rowId,
                    fieldName}, callback, asyncState);
    }
    
    /// <remarks/>
    public void EndLinkClear(System.IAsyncResult asyncResult) {
        this.EndInvoke(asyncResult);
    }
    
    /// <remarks/>
    public void LinkClearAsync(System.Guid sessionId, System.Guid sectionId, System.Guid rowId, string fieldName) {
        this.LinkClearAsync(sessionId, sectionId, rowId, fieldName, null);
    }
    
    /// <remarks/>
    public void LinkClearAsync(System.Guid sessionId, System.Guid sectionId, System.Guid rowId, string fieldName, object userState) {
        if ((this.LinkClearOperationCompleted == null)) {
            this.LinkClearOperationCompleted = new System.Threading.SendOrPostCallback(this.OnLinkClearOperationCompleted);
        }
        this.InvokeAsync("LinkClear", new object[] {
                    sessionId,
                    sectionId,
                    rowId,
                    fieldName}, this.LinkClearOperationCompleted, userState);
    }
    
    private void OnLinkClearOperationCompleted(object arg) {
        if ((this.LinkClearCompleted != null)) {
            System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
            this.LinkClearCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
        }
    }
    
    /// <remarks/>
    [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://schemas.docsvision.com/Platform/2009-02-03/StorageServer/LinkGetCardInfo", RequestNamespace="http://schemas.docsvision.com/Platform/2009-02-03/StorageServer/", ResponseNamespace="http://schemas.docsvision.com/Platform/2009-02-03/StorageServer/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
    [return: System.Xml.Serialization.XmlElementAttribute("linksData")]
    public string LinkGetCardInfo(System.Guid sessionId, System.Guid instanceID, bool toCard, int linkTypes, int recurseDepth, out bool usingCompression) {
        object[] results = this.Invoke("LinkGetCardInfo", new object[] {
                    sessionId,
                    instanceID,
                    toCard,
                    linkTypes,
                    recurseDepth});
        usingCompression = ((bool)(results[1]));
        return ((string)(results[0]));
    }
    
    /// <remarks/>
    public System.IAsyncResult BeginLinkGetCardInfo(System.Guid sessionId, System.Guid instanceID, bool toCard, int linkTypes, int recurseDepth, System.AsyncCallback callback, object asyncState) {
        return this.BeginInvoke("LinkGetCardInfo", new object[] {
                    sessionId,
                    instanceID,
                    toCard,
                    linkTypes,
                    recurseDepth}, callback, asyncState);
    }
    
    /// <remarks/>
    public string EndLinkGetCardInfo(System.IAsyncResult asyncResult, out bool usingCompression) {
        object[] results = this.EndInvoke(asyncResult);
        usingCompression = ((bool)(results[1]));
        return ((string)(results[0]));
    }
    
    /// <remarks/>
    public void LinkGetCardInfoAsync(System.Guid sessionId, System.Guid instanceID, bool toCard, int linkTypes, int recurseDepth) {
        this.LinkGetCardInfoAsync(sessionId, instanceID, toCard, linkTypes, recurseDepth, null);
    }
    
    /// <remarks/>
    public void LinkGetCardInfoAsync(System.Guid sessionId, System.Guid instanceID, bool toCard, int linkTypes, int recurseDepth, object userState) {
        if ((this.LinkGetCardInfoOperationCompleted == null)) {
            this.LinkGetCardInfoOperationCompleted = new System.Threading.SendOrPostCallback(this.OnLinkGetCardInfoOperationCompleted);
        }
        this.InvokeAsync("LinkGetCardInfo", new object[] {
                    sessionId,
                    instanceID,
                    toCard,
                    linkTypes,
                    recurseDepth}, this.LinkGetCardInfoOperationCompleted, userState);
    }
    
    private void OnLinkGetCardInfoOperationCompleted(object arg) {
        if ((this.LinkGetCardInfoCompleted != null)) {
            System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
            this.LinkGetCardInfoCompleted(this, new LinkGetCardInfoCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
        }
    }
    
    /// <remarks/>
    [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://schemas.docsvision.com/Platform/2009-02-03/StorageServer/LinkGetParent", RequestNamespace="http://schemas.docsvision.com/Platform/2009-02-03/StorageServer/", ResponseNamespace="http://schemas.docsvision.com/Platform/2009-02-03/StorageServer/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
    [return: System.Xml.Serialization.XmlElementAttribute("sourceInstanceId")]
    public System.Guid LinkGetParent(System.Guid sessionId, System.Guid instanceID, out System.Guid sourceRowId, out System.Guid sourceFieldId, out System.Guid sourceSectionId) {
        object[] results = this.Invoke("LinkGetParent", new object[] {
                    sessionId,
                    instanceID});
        sourceRowId = ((System.Guid)(results[1]));
        sourceFieldId = ((System.Guid)(results[2]));
        sourceSectionId = ((System.Guid)(results[3]));
        return ((System.Guid)(results[0]));
    }
    
    /// <remarks/>
    public System.IAsyncResult BeginLinkGetParent(System.Guid sessionId, System.Guid instanceID, System.AsyncCallback callback, object asyncState) {
        return this.BeginInvoke("LinkGetParent", new object[] {
                    sessionId,
                    instanceID}, callback, asyncState);
    }
    
    /// <remarks/>
    public System.Guid EndLinkGetParent(System.IAsyncResult asyncResult, out System.Guid sourceRowId, out System.Guid sourceFieldId, out System.Guid sourceSectionId) {
        object[] results = this.EndInvoke(asyncResult);
        sourceRowId = ((System.Guid)(results[1]));
        sourceFieldId = ((System.Guid)(results[2]));
        sourceSectionId = ((System.Guid)(results[3]));
        return ((System.Guid)(results[0]));
    }
    
    /// <remarks/>
    public void LinkGetParentAsync(System.Guid sessionId, System.Guid instanceID) {
        this.LinkGetParentAsync(sessionId, instanceID, null);
    }
    
    /// <remarks/>
    public void LinkGetParentAsync(System.Guid sessionId, System.Guid instanceID, object userState) {
        if ((this.LinkGetParentOperationCompleted == null)) {
            this.LinkGetParentOperationCompleted = new System.Threading.SendOrPostCallback(this.OnLinkGetParentOperationCompleted);
        }
        this.InvokeAsync("LinkGetParent", new object[] {
                    sessionId,
                    instanceID}, this.LinkGetParentOperationCompleted, userState);
    }
    
    private void OnLinkGetParentOperationCompleted(object arg) {
        if ((this.LinkGetParentCompleted != null)) {
            System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
            this.LinkGetParentCompleted(this, new LinkGetParentCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
        }
    }
    
    /// <remarks/>
    [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://schemas.docsvision.com/Platform/2009-02-03/StorageServer/LockClear", RequestNamespace="http://schemas.docsvision.com/Platform/2009-02-03/StorageServer/", ResponseNamespace="http://schemas.docsvision.com/Platform/2009-02-03/StorageServer/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
    public void LockClear(System.Guid sessionId, System.Guid resourceId, bool forceUnlock) {
        this.Invoke("LockClear", new object[] {
                    sessionId,
                    resourceId,
                    forceUnlock});
    }
    
    /// <remarks/>
    public System.IAsyncResult BeginLockClear(System.Guid sessionId, System.Guid resourceId, bool forceUnlock, System.AsyncCallback callback, object asyncState) {
        return this.BeginInvoke("LockClear", new object[] {
                    sessionId,
                    resourceId,
                    forceUnlock}, callback, asyncState);
    }
    
    /// <remarks/>
    public void EndLockClear(System.IAsyncResult asyncResult) {
        this.EndInvoke(asyncResult);
    }
    
    /// <remarks/>
    public void LockClearAsync(System.Guid sessionId, System.Guid resourceId, bool forceUnlock) {
        this.LockClearAsync(sessionId, resourceId, forceUnlock, null);
    }
    
    /// <remarks/>
    public void LockClearAsync(System.Guid sessionId, System.Guid resourceId, bool forceUnlock, object userState) {
        if ((this.LockClearOperationCompleted == null)) {
            this.LockClearOperationCompleted = new System.Threading.SendOrPostCallback(this.OnLockClearOperationCompleted);
        }
        this.InvokeAsync("LockClear", new object[] {
                    sessionId,
                    resourceId,
                    forceUnlock}, this.LockClearOperationCompleted, userState);
    }
    
    private void OnLockClearOperationCompleted(object arg) {
        if ((this.LockClearCompleted != null)) {
            System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
            this.LockClearCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
        }
    }
    
    /// <remarks/>
    [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://schemas.docsvision.com/Platform/2009-02-03/StorageServer/LockClearGroup", RequestNamespace="http://schemas.docsvision.com/Platform/2009-02-03/StorageServer/", ResponseNamespace="http://schemas.docsvision.com/Platform/2009-02-03/StorageServer/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
    [return: System.Xml.Serialization.XmlElementAttribute("failedItems")]
    public string LockClearGroup(System.Guid sessionId, string items, bool forceUnlock) {
        object[] results = this.Invoke("LockClearGroup", new object[] {
                    sessionId,
                    items,
                    forceUnlock});
        return ((string)(results[0]));
    }
    
    /// <remarks/>
    public System.IAsyncResult BeginLockClearGroup(System.Guid sessionId, string items, bool forceUnlock, System.AsyncCallback callback, object asyncState) {
        return this.BeginInvoke("LockClearGroup", new object[] {
                    sessionId,
                    items,
                    forceUnlock}, callback, asyncState);
    }
    
    /// <remarks/>
    public string EndLockClearGroup(System.IAsyncResult asyncResult) {
        object[] results = this.EndInvoke(asyncResult);
        return ((string)(results[0]));
    }
    
    /// <remarks/>
    public void LockClearGroupAsync(System.Guid sessionId, string items, bool forceUnlock) {
        this.LockClearGroupAsync(sessionId, items, forceUnlock, null);
    }
    
    /// <remarks/>
    public void LockClearGroupAsync(System.Guid sessionId, string items, bool forceUnlock, object userState) {
        if ((this.LockClearGroupOperationCompleted == null)) {
            this.LockClearGroupOperationCompleted = new System.Threading.SendOrPostCallback(this.OnLockClearGroupOperationCompleted);
        }
        this.InvokeAsync("LockClearGroup", new object[] {
                    sessionId,
                    items,
                    forceUnlock}, this.LockClearGroupOperationCompleted, userState);
    }
    
    private void OnLockClearGroupOperationCompleted(object arg) {
        if ((this.LockClearGroupCompleted != null)) {
            System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
            this.LockClearGroupCompleted(this, new LockClearGroupCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
        }
    }
    
    /// <remarks/>
    [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://schemas.docsvision.com/Platform/2009-02-03/StorageServer/LockGetInfo", RequestNamespace="http://schemas.docsvision.com/Platform/2009-02-03/StorageServer/", ResponseNamespace="http://schemas.docsvision.com/Platform/2009-02-03/StorageServer/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
    [return: System.Xml.Serialization.XmlElementAttribute("lockStatus")]
    public LockStatusEnum LockGetInfo(System.Guid sessionId, System.Guid resourceId, out string ownerName) {
        object[] results = this.Invoke("LockGetInfo", new object[] {
                    sessionId,
                    resourceId});
        ownerName = ((string)(results[1]));
        return ((LockStatusEnum)(results[0]));
    }
    
    /// <remarks/>
    public System.IAsyncResult BeginLockGetInfo(System.Guid sessionId, System.Guid resourceId, System.AsyncCallback callback, object asyncState) {
        return this.BeginInvoke("LockGetInfo", new object[] {
                    sessionId,
                    resourceId}, callback, asyncState);
    }
    
    /// <remarks/>
    public LockStatusEnum EndLockGetInfo(System.IAsyncResult asyncResult, out string ownerName) {
        object[] results = this.EndInvoke(asyncResult);
        ownerName = ((string)(results[1]));
        return ((LockStatusEnum)(results[0]));
    }
    
    /// <remarks/>
    public void LockGetInfoAsync(System.Guid sessionId, System.Guid resourceId) {
        this.LockGetInfoAsync(sessionId, resourceId, null);
    }
    
    /// <remarks/>
    public void LockGetInfoAsync(System.Guid sessionId, System.Guid resourceId, object userState) {
        if ((this.LockGetInfoOperationCompleted == null)) {
            this.LockGetInfoOperationCompleted = new System.Threading.SendOrPostCallback(this.OnLockGetInfoOperationCompleted);
        }
        this.InvokeAsync("LockGetInfo", new object[] {
                    sessionId,
                    resourceId}, this.LockGetInfoOperationCompleted, userState);
    }
    
    private void OnLockGetInfoOperationCompleted(object arg) {
        if ((this.LockGetInfoCompleted != null)) {
            System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
            this.LockGetInfoCompleted(this, new LockGetInfoCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
        }
    }
    
    /// <remarks/>
    [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://schemas.docsvision.com/Platform/2009-02-03/StorageServer/LockGetList", RequestNamespace="http://schemas.docsvision.com/Platform/2009-02-03/StorageServer/", ResponseNamespace="http://schemas.docsvision.com/Platform/2009-02-03/StorageServer/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
    [return: System.Xml.Serialization.XmlElementAttribute("lockedObjects")]
    public string LockGetList(System.Guid sessionId, bool currentUserOnly, bool allTypes, ResourceTypeEnum resType, out bool usingCompression) {
        object[] results = this.Invoke("LockGetList", new object[] {
                    sessionId,
                    currentUserOnly,
                    allTypes,
                    resType});
        usingCompression = ((bool)(results[1]));
        return ((string)(results[0]));
    }
    
    /// <remarks/>
    public System.IAsyncResult BeginLockGetList(System.Guid sessionId, bool currentUserOnly, bool allTypes, ResourceTypeEnum resType, System.AsyncCallback callback, object asyncState) {
        return this.BeginInvoke("LockGetList", new object[] {
                    sessionId,
                    currentUserOnly,
                    allTypes,
                    resType}, callback, asyncState);
    }
    
    /// <remarks/>
    public string EndLockGetList(System.IAsyncResult asyncResult, out bool usingCompression) {
        object[] results = this.EndInvoke(asyncResult);
        usingCompression = ((bool)(results[1]));
        return ((string)(results[0]));
    }
    
    /// <remarks/>
    public void LockGetListAsync(System.Guid sessionId, bool currentUserOnly, bool allTypes, ResourceTypeEnum resType) {
        this.LockGetListAsync(sessionId, currentUserOnly, allTypes, resType, null);
    }
    
    /// <remarks/>
    public void LockGetListAsync(System.Guid sessionId, bool currentUserOnly, bool allTypes, ResourceTypeEnum resType, object userState) {
        if ((this.LockGetListOperationCompleted == null)) {
            this.LockGetListOperationCompleted = new System.Threading.SendOrPostCallback(this.OnLockGetListOperationCompleted);
        }
        this.InvokeAsync("LockGetList", new object[] {
                    sessionId,
                    currentUserOnly,
                    allTypes,
                    resType}, this.LockGetListOperationCompleted, userState);
    }
    
    private void OnLockGetListOperationCompleted(object arg) {
        if ((this.LockGetListCompleted != null)) {
            System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
            this.LockGetListCompleted(this, new LockGetListCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
        }
    }
    
    /// <remarks/>
    [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://schemas.docsvision.com/Platform/2009-02-03/StorageServer/LockSet", RequestNamespace="http://schemas.docsvision.com/Platform/2009-02-03/StorageServer/", ResponseNamespace="http://schemas.docsvision.com/Platform/2009-02-03/StorageServer/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
    public void LockSet(System.Guid sessionId, System.Guid resourceId, ResourceTypeEnum resType, System.Guid sectionId, System.Guid instanceID, bool checkOut) {
        this.Invoke("LockSet", new object[] {
                    sessionId,
                    resourceId,
                    resType,
                    sectionId,
                    instanceID,
                    checkOut});
    }
    
    /// <remarks/>
    public System.IAsyncResult BeginLockSet(System.Guid sessionId, System.Guid resourceId, ResourceTypeEnum resType, System.Guid sectionId, System.Guid instanceID, bool checkOut, System.AsyncCallback callback, object asyncState) {
        return this.BeginInvoke("LockSet", new object[] {
                    sessionId,
                    resourceId,
                    resType,
                    sectionId,
                    instanceID,
                    checkOut}, callback, asyncState);
    }
    
    /// <remarks/>
    public void EndLockSet(System.IAsyncResult asyncResult) {
        this.EndInvoke(asyncResult);
    }
    
    /// <remarks/>
    public void LockSetAsync(System.Guid sessionId, System.Guid resourceId, ResourceTypeEnum resType, System.Guid sectionId, System.Guid instanceID, bool checkOut) {
        this.LockSetAsync(sessionId, resourceId, resType, sectionId, instanceID, checkOut, null);
    }
    
    /// <remarks/>
    public void LockSetAsync(System.Guid sessionId, System.Guid resourceId, ResourceTypeEnum resType, System.Guid sectionId, System.Guid instanceID, bool checkOut, object userState) {
        if ((this.LockSetOperationCompleted == null)) {
            this.LockSetOperationCompleted = new System.Threading.SendOrPostCallback(this.OnLockSetOperationCompleted);
        }
        this.InvokeAsync("LockSet", new object[] {
                    sessionId,
                    resourceId,
                    resType,
                    sectionId,
                    instanceID,
                    checkOut}, this.LockSetOperationCompleted, userState);
    }
    
    private void OnLockSetOperationCompleted(object arg) {
        if ((this.LockSetCompleted != null)) {
            System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
            this.LockSetCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
        }
    }
    
    /// <remarks/>
    [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://schemas.docsvision.com/Platform/2009-02-03/StorageServer/LogClear", RequestNamespace="http://schemas.docsvision.com/Platform/2009-02-03/StorageServer/", ResponseNamespace="http://schemas.docsvision.com/Platform/2009-02-03/StorageServer/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
    public void LogClear(System.Guid sessionId, string request) {
        this.Invoke("LogClear", new object[] {
                    sessionId,
                    request});
    }
    
    /// <remarks/>
    public System.IAsyncResult BeginLogClear(System.Guid sessionId, string request, System.AsyncCallback callback, object asyncState) {
        return this.BeginInvoke("LogClear", new object[] {
                    sessionId,
                    request}, callback, asyncState);
    }
    
    /// <remarks/>
    public void EndLogClear(System.IAsyncResult asyncResult) {
        this.EndInvoke(asyncResult);
    }
    
    /// <remarks/>
    public void LogClearAsync(System.Guid sessionId, string request) {
        this.LogClearAsync(sessionId, request, null);
    }
    
    /// <remarks/>
    public void LogClearAsync(System.Guid sessionId, string request, object userState) {
        if ((this.LogClearOperationCompleted == null)) {
            this.LogClearOperationCompleted = new System.Threading.SendOrPostCallback(this.OnLogClearOperationCompleted);
        }
        this.InvokeAsync("LogClear", new object[] {
                    sessionId,
                    request}, this.LogClearOperationCompleted, userState);
    }
    
    private void OnLogClearOperationCompleted(object arg) {
        if ((this.LogClearCompleted != null)) {
            System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
            this.LogClearCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
        }
    }
    
    /// <remarks/>
    [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://schemas.docsvision.com/Platform/2009-02-03/StorageServer/LogFind", RequestNamespace="http://schemas.docsvision.com/Platform/2009-02-03/StorageServer/", ResponseNamespace="http://schemas.docsvision.com/Platform/2009-02-03/StorageServer/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
    [return: System.Xml.Serialization.XmlElementAttribute("cursorInfo")]
    public CursorInfo LogFind(System.Guid sessionId, string request) {
        object[] results = this.Invoke("LogFind", new object[] {
                    sessionId,
                    request});
        return ((CursorInfo)(results[0]));
    }
    
    /// <remarks/>
    public System.IAsyncResult BeginLogFind(System.Guid sessionId, string request, System.AsyncCallback callback, object asyncState) {
        return this.BeginInvoke("LogFind", new object[] {
                    sessionId,
                    request}, callback, asyncState);
    }
    
    /// <remarks/>
    public CursorInfo EndLogFind(System.IAsyncResult asyncResult) {
        object[] results = this.EndInvoke(asyncResult);
        return ((CursorInfo)(results[0]));
    }
    
    /// <remarks/>
    public void LogFindAsync(System.Guid sessionId, string request) {
        this.LogFindAsync(sessionId, request, null);
    }
    
    /// <remarks/>
    public void LogFindAsync(System.Guid sessionId, string request, object userState) {
        if ((this.LogFindOperationCompleted == null)) {
            this.LogFindOperationCompleted = new System.Threading.SendOrPostCallback(this.OnLogFindOperationCompleted);
        }
        this.InvokeAsync("LogFind", new object[] {
                    sessionId,
                    request}, this.LogFindOperationCompleted, userState);
    }
    
    private void OnLogFindOperationCompleted(object arg) {
        if ((this.LogFindCompleted != null)) {
            System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
            this.LogFindCompleted(this, new LogFindCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
        }
    }
    
    /// <remarks/>
    [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://schemas.docsvision.com/Platform/2009-02-03/StorageServer/LogGetStrategy", RequestNamespace="http://schemas.docsvision.com/Platform/2009-02-03/StorageServer/", ResponseNamespace="http://schemas.docsvision.com/Platform/2009-02-03/StorageServer/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
    [return: System.Xml.Serialization.XmlElementAttribute("logStrategy")]
    public LogStrategyEnum LogGetStrategy(System.Guid sessionId, out ClearLogStrategyEnum clearLogStrategy, out int clearLogMaxCount, out int clearLogCutCount, out int clearLogCutDays) {
        object[] results = this.Invoke("LogGetStrategy", new object[] {
                    sessionId});
        clearLogStrategy = ((ClearLogStrategyEnum)(results[1]));
        clearLogMaxCount = ((int)(results[2]));
        clearLogCutCount = ((int)(results[3]));
        clearLogCutDays = ((int)(results[4]));
        return ((LogStrategyEnum)(results[0]));
    }
    
    /// <remarks/>
    public System.IAsyncResult BeginLogGetStrategy(System.Guid sessionId, System.AsyncCallback callback, object asyncState) {
        return this.BeginInvoke("LogGetStrategy", new object[] {
                    sessionId}, callback, asyncState);
    }
    
    /// <remarks/>
    public LogStrategyEnum EndLogGetStrategy(System.IAsyncResult asyncResult, out ClearLogStrategyEnum clearLogStrategy, out int clearLogMaxCount, out int clearLogCutCount, out int clearLogCutDays) {
        object[] results = this.EndInvoke(asyncResult);
        clearLogStrategy = ((ClearLogStrategyEnum)(results[1]));
        clearLogMaxCount = ((int)(results[2]));
        clearLogCutCount = ((int)(results[3]));
        clearLogCutDays = ((int)(results[4]));
        return ((LogStrategyEnum)(results[0]));
    }
    
    /// <remarks/>
    public void LogGetStrategyAsync(System.Guid sessionId) {
        this.LogGetStrategyAsync(sessionId, null);
    }
    
    /// <remarks/>
    public void LogGetStrategyAsync(System.Guid sessionId, object userState) {
        if ((this.LogGetStrategyOperationCompleted == null)) {
            this.LogGetStrategyOperationCompleted = new System.Threading.SendOrPostCallback(this.OnLogGetStrategyOperationCompleted);
        }
        this.InvokeAsync("LogGetStrategy", new object[] {
                    sessionId}, this.LogGetStrategyOperationCompleted, userState);
    }
    
    private void OnLogGetStrategyOperationCompleted(object arg) {
        if ((this.LogGetStrategyCompleted != null)) {
            System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
            this.LogGetStrategyCompleted(this, new LogGetStrategyCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
        }
    }
    
    /// <remarks/>
    [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://schemas.docsvision.com/Platform/2009-02-03/StorageServer/LogRead", RequestNamespace="http://schemas.docsvision.com/Platform/2009-02-03/StorageServer/", ResponseNamespace="http://schemas.docsvision.com/Platform/2009-02-03/StorageServer/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
    [return: System.Xml.Serialization.XmlElementAttribute("messageData")]
    public string LogRead(System.Guid sessionId, int messageId) {
        object[] results = this.Invoke("LogRead", new object[] {
                    sessionId,
                    messageId});
        return ((string)(results[0]));
    }
    
    /// <remarks/>
    public System.IAsyncResult BeginLogRead(System.Guid sessionId, int messageId, System.AsyncCallback callback, object asyncState) {
        return this.BeginInvoke("LogRead", new object[] {
                    sessionId,
                    messageId}, callback, asyncState);
    }
    
    /// <remarks/>
    public string EndLogRead(System.IAsyncResult asyncResult) {
        object[] results = this.EndInvoke(asyncResult);
        return ((string)(results[0]));
    }
    
    /// <remarks/>
    public void LogReadAsync(System.Guid sessionId, int messageId) {
        this.LogReadAsync(sessionId, messageId, null);
    }
    
    /// <remarks/>
    public void LogReadAsync(System.Guid sessionId, int messageId, object userState) {
        if ((this.LogReadOperationCompleted == null)) {
            this.LogReadOperationCompleted = new System.Threading.SendOrPostCallback(this.OnLogReadOperationCompleted);
        }
        this.InvokeAsync("LogRead", new object[] {
                    sessionId,
                    messageId}, this.LogReadOperationCompleted, userState);
    }
    
    private void OnLogReadOperationCompleted(object arg) {
        if ((this.LogReadCompleted != null)) {
            System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
            this.LogReadCompleted(this, new LogReadCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
        }
    }
    
    /// <remarks/>
    [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://schemas.docsvision.com/Platform/2009-02-03/StorageServer/LogReadEx", RequestNamespace="http://schemas.docsvision.com/Platform/2009-02-03/StorageServer/", ResponseNamespace="http://schemas.docsvision.com/Platform/2009-02-03/StorageServer/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
    [return: System.Xml.Serialization.XmlElementAttribute("messageData")]
    public string LogReadEx(System.Guid sessionId, long messageId) {
        object[] results = this.Invoke("LogReadEx", new object[] {
                    sessionId,
                    messageId});
        return ((string)(results[0]));
    }
    
    /// <remarks/>
    public System.IAsyncResult BeginLogReadEx(System.Guid sessionId, long messageId, System.AsyncCallback callback, object asyncState) {
        return this.BeginInvoke("LogReadEx", new object[] {
                    sessionId,
                    messageId}, callback, asyncState);
    }
    
    /// <remarks/>
    public string EndLogReadEx(System.IAsyncResult asyncResult) {
        object[] results = this.EndInvoke(asyncResult);
        return ((string)(results[0]));
    }
    
    /// <remarks/>
    public void LogReadExAsync(System.Guid sessionId, long messageId) {
        this.LogReadExAsync(sessionId, messageId, null);
    }
    
    /// <remarks/>
    public void LogReadExAsync(System.Guid sessionId, long messageId, object userState) {
        if ((this.LogReadExOperationCompleted == null)) {
            this.LogReadExOperationCompleted = new System.Threading.SendOrPostCallback(this.OnLogReadExOperationCompleted);
        }
        this.InvokeAsync("LogReadEx", new object[] {
                    sessionId,
                    messageId}, this.LogReadExOperationCompleted, userState);
    }
    
    private void OnLogReadExOperationCompleted(object arg) {
        if ((this.LogReadExCompleted != null)) {
            System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
            this.LogReadExCompleted(this, new LogReadExCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
        }
    }
    
    /// <remarks/>
    [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://schemas.docsvision.com/Platform/2009-02-03/StorageServer/LogSetStrategy", RequestNamespace="http://schemas.docsvision.com/Platform/2009-02-03/StorageServer/", ResponseNamespace="http://schemas.docsvision.com/Platform/2009-02-03/StorageServer/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
    public void LogSetStrategy(System.Guid sessionId, LogStrategyEnum logStrategy, ClearLogStrategyEnum clearLogStrategy, int clearLogMaxCount, int clearLogCutCount, int clearLogCutDays) {
        this.Invoke("LogSetStrategy", new object[] {
                    sessionId,
                    logStrategy,
                    clearLogStrategy,
                    clearLogMaxCount,
                    clearLogCutCount,
                    clearLogCutDays});
    }
    
    /// <remarks/>
    public System.IAsyncResult BeginLogSetStrategy(System.Guid sessionId, LogStrategyEnum logStrategy, ClearLogStrategyEnum clearLogStrategy, int clearLogMaxCount, int clearLogCutCount, int clearLogCutDays, System.AsyncCallback callback, object asyncState) {
        return this.BeginInvoke("LogSetStrategy", new object[] {
                    sessionId,
                    logStrategy,
                    clearLogStrategy,
                    clearLogMaxCount,
                    clearLogCutCount,
                    clearLogCutDays}, callback, asyncState);
    }
    
    /// <remarks/>
    public void EndLogSetStrategy(System.IAsyncResult asyncResult) {
        this.EndInvoke(asyncResult);
    }
    
    /// <remarks/>
    public void LogSetStrategyAsync(System.Guid sessionId, LogStrategyEnum logStrategy, ClearLogStrategyEnum clearLogStrategy, int clearLogMaxCount, int clearLogCutCount, int clearLogCutDays) {
        this.LogSetStrategyAsync(sessionId, logStrategy, clearLogStrategy, clearLogMaxCount, clearLogCutCount, clearLogCutDays, null);
    }
    
    /// <remarks/>
    public void LogSetStrategyAsync(System.Guid sessionId, LogStrategyEnum logStrategy, ClearLogStrategyEnum clearLogStrategy, int clearLogMaxCount, int clearLogCutCount, int clearLogCutDays, object userState) {
        if ((this.LogSetStrategyOperationCompleted == null)) {
            this.LogSetStrategyOperationCompleted = new System.Threading.SendOrPostCallback(this.OnLogSetStrategyOperationCompleted);
        }
        this.InvokeAsync("LogSetStrategy", new object[] {
                    sessionId,
                    logStrategy,
                    clearLogStrategy,
                    clearLogMaxCount,
                    clearLogCutCount,
                    clearLogCutDays}, this.LogSetStrategyOperationCompleted, userState);
    }
    
    private void OnLogSetStrategyOperationCompleted(object arg) {
        if ((this.LogSetStrategyCompleted != null)) {
            System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
            this.LogSetStrategyCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
        }
    }
    
    /// <remarks/>
    [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://schemas.docsvision.com/Platform/2009-02-03/StorageServer/LogWrite", RequestNamespace="http://schemas.docsvision.com/Platform/2009-02-03/StorageServer/", ResponseNamespace="http://schemas.docsvision.com/Platform/2009-02-03/StorageServer/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
    public void LogWrite(System.Guid sessionId, System.Guid resourceId, System.Guid typeId, System.Guid parentID, EventTypeEnum eventType, uint operation, string eventMsg, string eventData) {
        this.Invoke("LogWrite", new object[] {
                    sessionId,
                    resourceId,
                    typeId,
                    parentID,
                    eventType,
                    operation,
                    eventMsg,
                    eventData});
    }
    
    /// <remarks/>
    public System.IAsyncResult BeginLogWrite(System.Guid sessionId, System.Guid resourceId, System.Guid typeId, System.Guid parentID, EventTypeEnum eventType, uint operation, string eventMsg, string eventData, System.AsyncCallback callback, object asyncState) {
        return this.BeginInvoke("LogWrite", new object[] {
                    sessionId,
                    resourceId,
                    typeId,
                    parentID,
                    eventType,
                    operation,
                    eventMsg,
                    eventData}, callback, asyncState);
    }
    
    /// <remarks/>
    public void EndLogWrite(System.IAsyncResult asyncResult) {
        this.EndInvoke(asyncResult);
    }
    
    /// <remarks/>
    public void LogWriteAsync(System.Guid sessionId, System.Guid resourceId, System.Guid typeId, System.Guid parentID, EventTypeEnum eventType, uint operation, string eventMsg, string eventData) {
        this.LogWriteAsync(sessionId, resourceId, typeId, parentID, eventType, operation, eventMsg, eventData, null);
    }
    
    /// <remarks/>
    public void LogWriteAsync(System.Guid sessionId, System.Guid resourceId, System.Guid typeId, System.Guid parentID, EventTypeEnum eventType, uint operation, string eventMsg, string eventData, object userState) {
        if ((this.LogWriteOperationCompleted == null)) {
            this.LogWriteOperationCompleted = new System.Threading.SendOrPostCallback(this.OnLogWriteOperationCompleted);
        }
        this.InvokeAsync("LogWrite", new object[] {
                    sessionId,
                    resourceId,
                    typeId,
                    parentID,
                    eventType,
                    operation,
                    eventMsg,
                    eventData}, this.LogWriteOperationCompleted, userState);
    }
    
    private void OnLogWriteOperationCompleted(object arg) {
        if ((this.LogWriteCompleted != null)) {
            System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
            this.LogWriteCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
        }
    }
    
    /// <remarks/>
    [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://schemas.docsvision.com/Platform/2009-02-03/StorageServer/LogWriteEx", RequestNamespace="http://schemas.docsvision.com/Platform/2009-02-03/StorageServer/", ResponseNamespace="http://schemas.docsvision.com/Platform/2009-02-03/StorageServer/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
    public void LogWriteEx(System.Guid sessionId, System.Guid resourceId, System.Guid typeId, System.Guid parentID, EventTypeEnum eventType, System.Guid operationId, string eventMsg, string eventData) {
        this.Invoke("LogWriteEx", new object[] {
                    sessionId,
                    resourceId,
                    typeId,
                    parentID,
                    eventType,
                    operationId,
                    eventMsg,
                    eventData});
    }
    
    /// <remarks/>
    public System.IAsyncResult BeginLogWriteEx(System.Guid sessionId, System.Guid resourceId, System.Guid typeId, System.Guid parentID, EventTypeEnum eventType, System.Guid operationId, string eventMsg, string eventData, System.AsyncCallback callback, object asyncState) {
        return this.BeginInvoke("LogWriteEx", new object[] {
                    sessionId,
                    resourceId,
                    typeId,
                    parentID,
                    eventType,
                    operationId,
                    eventMsg,
                    eventData}, callback, asyncState);
    }
    
    /// <remarks/>
    public void EndLogWriteEx(System.IAsyncResult asyncResult) {
        this.EndInvoke(asyncResult);
    }
    
    /// <remarks/>
    public void LogWriteExAsync(System.Guid sessionId, System.Guid resourceId, System.Guid typeId, System.Guid parentID, EventTypeEnum eventType, System.Guid operationId, string eventMsg, string eventData) {
        this.LogWriteExAsync(sessionId, resourceId, typeId, parentID, eventType, operationId, eventMsg, eventData, null);
    }
    
    /// <remarks/>
    public void LogWriteExAsync(System.Guid sessionId, System.Guid resourceId, System.Guid typeId, System.Guid parentID, EventTypeEnum eventType, System.Guid operationId, string eventMsg, string eventData, object userState) {
        if ((this.LogWriteExOperationCompleted == null)) {
            this.LogWriteExOperationCompleted = new System.Threading.SendOrPostCallback(this.OnLogWriteExOperationCompleted);
        }
        this.InvokeAsync("LogWriteEx", new object[] {
                    sessionId,
                    resourceId,
                    typeId,
                    parentID,
                    eventType,
                    operationId,
                    eventMsg,
                    eventData}, this.LogWriteExOperationCompleted, userState);
    }
    
    private void OnLogWriteExOperationCompleted(object arg) {
        if ((this.LogWriteExCompleted != null)) {
            System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
            this.LogWriteExCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
        }
    }
    
    /// <remarks/>
    [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://schemas.docsvision.com/Platform/2009-02-03/StorageServer/NumAllocateNumber" +
        "", RequestNamespace="http://schemas.docsvision.com/Platform/2009-02-03/StorageServer/", ResponseNamespace="http://schemas.docsvision.com/Platform/2009-02-03/StorageServer/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
    [return: System.Xml.Serialization.XmlElementAttribute("NumberId")]
    public System.Guid NumAllocateNumber(System.Guid sessionId, System.Guid numeratorId, System.Guid userId, string zoneName, int number) {
        object[] results = this.Invoke("NumAllocateNumber", new object[] {
                    sessionId,
                    numeratorId,
                    userId,
                    zoneName,
                    number});
        return ((System.Guid)(results[0]));
    }
    
    /// <remarks/>
    public System.IAsyncResult BeginNumAllocateNumber(System.Guid sessionId, System.Guid numeratorId, System.Guid userId, string zoneName, int number, System.AsyncCallback callback, object asyncState) {
        return this.BeginInvoke("NumAllocateNumber", new object[] {
                    sessionId,
                    numeratorId,
                    userId,
                    zoneName,
                    number}, callback, asyncState);
    }
    
    /// <remarks/>
    public System.Guid EndNumAllocateNumber(System.IAsyncResult asyncResult) {
        object[] results = this.EndInvoke(asyncResult);
        return ((System.Guid)(results[0]));
    }
    
    /// <remarks/>
    public void NumAllocateNumberAsync(System.Guid sessionId, System.Guid numeratorId, System.Guid userId, string zoneName, int number) {
        this.NumAllocateNumberAsync(sessionId, numeratorId, userId, zoneName, number, null);
    }
    
    /// <remarks/>
    public void NumAllocateNumberAsync(System.Guid sessionId, System.Guid numeratorId, System.Guid userId, string zoneName, int number, object userState) {
        if ((this.NumAllocateNumberOperationCompleted == null)) {
            this.NumAllocateNumberOperationCompleted = new System.Threading.SendOrPostCallback(this.OnNumAllocateNumberOperationCompleted);
        }
        this.InvokeAsync("NumAllocateNumber", new object[] {
                    sessionId,
                    numeratorId,
                    userId,
                    zoneName,
                    number}, this.NumAllocateNumberOperationCompleted, userState);
    }
    
    private void OnNumAllocateNumberOperationCompleted(object arg) {
        if ((this.NumAllocateNumberCompleted != null)) {
            System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
            this.NumAllocateNumberCompleted(this, new NumAllocateNumberCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
        }
    }
    
    /// <remarks/>
    [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://schemas.docsvision.com/Platform/2009-02-03/StorageServer/NumAllocateNumber" +
        "s", RequestNamespace="http://schemas.docsvision.com/Platform/2009-02-03/StorageServer/", ResponseNamespace="http://schemas.docsvision.com/Platform/2009-02-03/StorageServer/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
    public void NumAllocateNumbers(System.Guid sessionId, System.Guid numeratorId, System.Guid userId, string zoneName, int firstNumber, int lastNumber) {
        this.Invoke("NumAllocateNumbers", new object[] {
                    sessionId,
                    numeratorId,
                    userId,
                    zoneName,
                    firstNumber,
                    lastNumber});
    }
    
    /// <remarks/>
    public System.IAsyncResult BeginNumAllocateNumbers(System.Guid sessionId, System.Guid numeratorId, System.Guid userId, string zoneName, int firstNumber, int lastNumber, System.AsyncCallback callback, object asyncState) {
        return this.BeginInvoke("NumAllocateNumbers", new object[] {
                    sessionId,
                    numeratorId,
                    userId,
                    zoneName,
                    firstNumber,
                    lastNumber}, callback, asyncState);
    }
    
    /// <remarks/>
    public void EndNumAllocateNumbers(System.IAsyncResult asyncResult) {
        this.EndInvoke(asyncResult);
    }
    
    /// <remarks/>
    public void NumAllocateNumbersAsync(System.Guid sessionId, System.Guid numeratorId, System.Guid userId, string zoneName, int firstNumber, int lastNumber) {
        this.NumAllocateNumbersAsync(sessionId, numeratorId, userId, zoneName, firstNumber, lastNumber, null);
    }
    
    /// <remarks/>
    public void NumAllocateNumbersAsync(System.Guid sessionId, System.Guid numeratorId, System.Guid userId, string zoneName, int firstNumber, int lastNumber, object userState) {
        if ((this.NumAllocateNumbersOperationCompleted == null)) {
            this.NumAllocateNumbersOperationCompleted = new System.Threading.SendOrPostCallback(this.OnNumAllocateNumbersOperationCompleted);
        }
        this.InvokeAsync("NumAllocateNumbers", new object[] {
                    sessionId,
                    numeratorId,
                    userId,
                    zoneName,
                    firstNumber,
                    lastNumber}, this.NumAllocateNumbersOperationCompleted, userState);
    }
    
    private void OnNumAllocateNumbersOperationCompleted(object arg) {
        if ((this.NumAllocateNumbersCompleted != null)) {
            System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
            this.NumAllocateNumbersCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
        }
    }
    
    /// <remarks/>
    [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://schemas.docsvision.com/Platform/2009-02-03/StorageServer/NumChangeLeftBoun" +
        "d", RequestNamespace="http://schemas.docsvision.com/Platform/2009-02-03/StorageServer/", ResponseNamespace="http://schemas.docsvision.com/Platform/2009-02-03/StorageServer/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
    public void NumChangeLeftBound(System.Guid sessionId, System.Guid numeratorId, int newLeftBound, bool forceChange) {
        this.Invoke("NumChangeLeftBound", new object[] {
                    sessionId,
                    numeratorId,
                    newLeftBound,
                    forceChange});
    }
    
    /// <remarks/>
    public System.IAsyncResult BeginNumChangeLeftBound(System.Guid sessionId, System.Guid numeratorId, int newLeftBound, bool forceChange, System.AsyncCallback callback, object asyncState) {
        return this.BeginInvoke("NumChangeLeftBound", new object[] {
                    sessionId,
                    numeratorId,
                    newLeftBound,
                    forceChange}, callback, asyncState);
    }
    
    /// <remarks/>
    public void EndNumChangeLeftBound(System.IAsyncResult asyncResult) {
        this.EndInvoke(asyncResult);
    }
    
    /// <remarks/>
    public void NumChangeLeftBoundAsync(System.Guid sessionId, System.Guid numeratorId, int newLeftBound, bool forceChange) {
        this.NumChangeLeftBoundAsync(sessionId, numeratorId, newLeftBound, forceChange, null);
    }
    
    /// <remarks/>
    public void NumChangeLeftBoundAsync(System.Guid sessionId, System.Guid numeratorId, int newLeftBound, bool forceChange, object userState) {
        if ((this.NumChangeLeftBoundOperationCompleted == null)) {
            this.NumChangeLeftBoundOperationCompleted = new System.Threading.SendOrPostCallback(this.OnNumChangeLeftBoundOperationCompleted);
        }
        this.InvokeAsync("NumChangeLeftBound", new object[] {
                    sessionId,
                    numeratorId,
                    newLeftBound,
                    forceChange}, this.NumChangeLeftBoundOperationCompleted, userState);
    }
    
    private void OnNumChangeLeftBoundOperationCompleted(object arg) {
        if ((this.NumChangeLeftBoundCompleted != null)) {
            System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
            this.NumChangeLeftBoundCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
        }
    }
    
    /// <remarks/>
    [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://schemas.docsvision.com/Platform/2009-02-03/StorageServer/NumChangeRightBou" +
        "nd", RequestNamespace="http://schemas.docsvision.com/Platform/2009-02-03/StorageServer/", ResponseNamespace="http://schemas.docsvision.com/Platform/2009-02-03/StorageServer/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
    public void NumChangeRightBound(System.Guid sessionId, System.Guid numeratorId, int newRightBound, bool forceChange) {
        this.Invoke("NumChangeRightBound", new object[] {
                    sessionId,
                    numeratorId,
                    newRightBound,
                    forceChange});
    }
    
    /// <remarks/>
    public System.IAsyncResult BeginNumChangeRightBound(System.Guid sessionId, System.Guid numeratorId, int newRightBound, bool forceChange, System.AsyncCallback callback, object asyncState) {
        return this.BeginInvoke("NumChangeRightBound", new object[] {
                    sessionId,
                    numeratorId,
                    newRightBound,
                    forceChange}, callback, asyncState);
    }
    
    /// <remarks/>
    public void EndNumChangeRightBound(System.IAsyncResult asyncResult) {
        this.EndInvoke(asyncResult);
    }
    
    /// <remarks/>
    public void NumChangeRightBoundAsync(System.Guid sessionId, System.Guid numeratorId, int newRightBound, bool forceChange) {
        this.NumChangeRightBoundAsync(sessionId, numeratorId, newRightBound, forceChange, null);
    }
    
    /// <remarks/>
    public void NumChangeRightBoundAsync(System.Guid sessionId, System.Guid numeratorId, int newRightBound, bool forceChange, object userState) {
        if ((this.NumChangeRightBoundOperationCompleted == null)) {
            this.NumChangeRightBoundOperationCompleted = new System.Threading.SendOrPostCallback(this.OnNumChangeRightBoundOperationCompleted);
        }
        this.InvokeAsync("NumChangeRightBound", new object[] {
                    sessionId,
                    numeratorId,
                    newRightBound,
                    forceChange}, this.NumChangeRightBoundOperationCompleted, userState);
    }
    
    private void OnNumChangeRightBoundOperationCompleted(object arg) {
        if ((this.NumChangeRightBoundCompleted != null)) {
            System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
            this.NumChangeRightBoundCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
        }
    }
    
    /// <remarks/>
    [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://schemas.docsvision.com/Platform/2009-02-03/StorageServer/NumGetFirstFree", RequestNamespace="http://schemas.docsvision.com/Platform/2009-02-03/StorageServer/", ResponseNamespace="http://schemas.docsvision.com/Platform/2009-02-03/StorageServer/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
    [return: System.Xml.Serialization.XmlElementAttribute("number")]
    public int NumGetFirstFree(System.Guid sessionId, System.Guid numeratorId, string zoneName, System.Guid userId, out System.Guid NumberId) {
        object[] results = this.Invoke("NumGetFirstFree", new object[] {
                    sessionId,
                    numeratorId,
                    zoneName,
                    userId});
        NumberId = ((System.Guid)(results[1]));
        return ((int)(results[0]));
    }
    
    /// <remarks/>
    public System.IAsyncResult BeginNumGetFirstFree(System.Guid sessionId, System.Guid numeratorId, string zoneName, System.Guid userId, System.AsyncCallback callback, object asyncState) {
        return this.BeginInvoke("NumGetFirstFree", new object[] {
                    sessionId,
                    numeratorId,
                    zoneName,
                    userId}, callback, asyncState);
    }
    
    /// <remarks/>
    public int EndNumGetFirstFree(System.IAsyncResult asyncResult, out System.Guid NumberId) {
        object[] results = this.EndInvoke(asyncResult);
        NumberId = ((System.Guid)(results[1]));
        return ((int)(results[0]));
    }
    
    /// <remarks/>
    public void NumGetFirstFreeAsync(System.Guid sessionId, System.Guid numeratorId, string zoneName, System.Guid userId) {
        this.NumGetFirstFreeAsync(sessionId, numeratorId, zoneName, userId, null);
    }
    
    /// <remarks/>
    public void NumGetFirstFreeAsync(System.Guid sessionId, System.Guid numeratorId, string zoneName, System.Guid userId, object userState) {
        if ((this.NumGetFirstFreeOperationCompleted == null)) {
            this.NumGetFirstFreeOperationCompleted = new System.Threading.SendOrPostCallback(this.OnNumGetFirstFreeOperationCompleted);
        }
        this.InvokeAsync("NumGetFirstFree", new object[] {
                    sessionId,
                    numeratorId,
                    zoneName,
                    userId}, this.NumGetFirstFreeOperationCompleted, userState);
    }
    
    private void OnNumGetFirstFreeOperationCompleted(object arg) {
        if ((this.NumGetFirstFreeCompleted != null)) {
            System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
            this.NumGetFirstFreeCompleted(this, new NumGetFirstFreeCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
        }
    }
    
    /// <remarks/>
    [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://schemas.docsvision.com/Platform/2009-02-03/StorageServer/NumGetLastFree", RequestNamespace="http://schemas.docsvision.com/Platform/2009-02-03/StorageServer/", ResponseNamespace="http://schemas.docsvision.com/Platform/2009-02-03/StorageServer/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
    [return: System.Xml.Serialization.XmlElementAttribute("number")]
    public int NumGetLastFree(System.Guid sessionId, System.Guid numeratorId, string zoneName, System.Guid userId, out System.Guid NumberId) {
        object[] results = this.Invoke("NumGetLastFree", new object[] {
                    sessionId,
                    numeratorId,
                    zoneName,
                    userId});
        NumberId = ((System.Guid)(results[1]));
        return ((int)(results[0]));
    }
    
    /// <remarks/>
    public System.IAsyncResult BeginNumGetLastFree(System.Guid sessionId, System.Guid numeratorId, string zoneName, System.Guid userId, System.AsyncCallback callback, object asyncState) {
        return this.BeginInvoke("NumGetLastFree", new object[] {
                    sessionId,
                    numeratorId,
                    zoneName,
                    userId}, callback, asyncState);
    }
    
    /// <remarks/>
    public int EndNumGetLastFree(System.IAsyncResult asyncResult, out System.Guid NumberId) {
        object[] results = this.EndInvoke(asyncResult);
        NumberId = ((System.Guid)(results[1]));
        return ((int)(results[0]));
    }
    
    /// <remarks/>
    public void NumGetLastFreeAsync(System.Guid sessionId, System.Guid numeratorId, string zoneName, System.Guid userId) {
        this.NumGetLastFreeAsync(sessionId, numeratorId, zoneName, userId, null);
    }
    
    /// <remarks/>
    public void NumGetLastFreeAsync(System.Guid sessionId, System.Guid numeratorId, string zoneName, System.Guid userId, object userState) {
        if ((this.NumGetLastFreeOperationCompleted == null)) {
            this.NumGetLastFreeOperationCompleted = new System.Threading.SendOrPostCallback(this.OnNumGetLastFreeOperationCompleted);
        }
        this.InvokeAsync("NumGetLastFree", new object[] {
                    sessionId,
                    numeratorId,
                    zoneName,
                    userId}, this.NumGetLastFreeOperationCompleted, userState);
    }
    
    private void OnNumGetLastFreeOperationCompleted(object arg) {
        if ((this.NumGetLastFreeCompleted != null)) {
            System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
            this.NumGetLastFreeCompleted(this, new NumGetLastFreeCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
        }
    }
    
    /// <remarks/>
    [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://schemas.docsvision.com/Platform/2009-02-03/StorageServer/NumGetNumberByID", RequestNamespace="http://schemas.docsvision.com/Platform/2009-02-03/StorageServer/", ResponseNamespace="http://schemas.docsvision.com/Platform/2009-02-03/StorageServer/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
    [return: System.Xml.Serialization.XmlElementAttribute("number")]
    public int NumGetNumberByID(System.Guid sessionId, System.Guid numeratorId, string zoneName, System.Guid NumberId) {
        object[] results = this.Invoke("NumGetNumberByID", new object[] {
                    sessionId,
                    numeratorId,
                    zoneName,
                    NumberId});
        return ((int)(results[0]));
    }
    
    /// <remarks/>
    public System.IAsyncResult BeginNumGetNumberByID(System.Guid sessionId, System.Guid numeratorId, string zoneName, System.Guid NumberId, System.AsyncCallback callback, object asyncState) {
        return this.BeginInvoke("NumGetNumberByID", new object[] {
                    sessionId,
                    numeratorId,
                    zoneName,
                    NumberId}, callback, asyncState);
    }
    
    /// <remarks/>
    public int EndNumGetNumberByID(System.IAsyncResult asyncResult) {
        object[] results = this.EndInvoke(asyncResult);
        return ((int)(results[0]));
    }
    
    /// <remarks/>
    public void NumGetNumberByIDAsync(System.Guid sessionId, System.Guid numeratorId, string zoneName, System.Guid NumberId) {
        this.NumGetNumberByIDAsync(sessionId, numeratorId, zoneName, NumberId, null);
    }
    
    /// <remarks/>
    public void NumGetNumberByIDAsync(System.Guid sessionId, System.Guid numeratorId, string zoneName, System.Guid NumberId, object userState) {
        if ((this.NumGetNumberByIDOperationCompleted == null)) {
            this.NumGetNumberByIDOperationCompleted = new System.Threading.SendOrPostCallback(this.OnNumGetNumberByIDOperationCompleted);
        }
        this.InvokeAsync("NumGetNumberByID", new object[] {
                    sessionId,
                    numeratorId,
                    zoneName,
                    NumberId}, this.NumGetNumberByIDOperationCompleted, userState);
    }
    
    private void OnNumGetNumberByIDOperationCompleted(object arg) {
        if ((this.NumGetNumberByIDCompleted != null)) {
            System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
            this.NumGetNumberByIDCompleted(this, new NumGetNumberByIDCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
        }
    }
    
    /// <remarks/>
    [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://schemas.docsvision.com/Platform/2009-02-03/StorageServer/NumGetNumberID", RequestNamespace="http://schemas.docsvision.com/Platform/2009-02-03/StorageServer/", ResponseNamespace="http://schemas.docsvision.com/Platform/2009-02-03/StorageServer/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
    [return: System.Xml.Serialization.XmlElementAttribute("NumberId")]
    public System.Guid NumGetNumberID(System.Guid sessionId, System.Guid numeratorId, System.Guid zoneId, int number) {
        object[] results = this.Invoke("NumGetNumberID", new object[] {
                    sessionId,
                    numeratorId,
                    zoneId,
                    number});
        return ((System.Guid)(results[0]));
    }
    
    /// <remarks/>
    public System.IAsyncResult BeginNumGetNumberID(System.Guid sessionId, System.Guid numeratorId, System.Guid zoneId, int number, System.AsyncCallback callback, object asyncState) {
        return this.BeginInvoke("NumGetNumberID", new object[] {
                    sessionId,
                    numeratorId,
                    zoneId,
                    number}, callback, asyncState);
    }
    
    /// <remarks/>
    public System.Guid EndNumGetNumberID(System.IAsyncResult asyncResult) {
        object[] results = this.EndInvoke(asyncResult);
        return ((System.Guid)(results[0]));
    }
    
    /// <remarks/>
    public void NumGetNumberIDAsync(System.Guid sessionId, System.Guid numeratorId, System.Guid zoneId, int number) {
        this.NumGetNumberIDAsync(sessionId, numeratorId, zoneId, number, null);
    }
    
    /// <remarks/>
    public void NumGetNumberIDAsync(System.Guid sessionId, System.Guid numeratorId, System.Guid zoneId, int number, object userState) {
        if ((this.NumGetNumberIDOperationCompleted == null)) {
            this.NumGetNumberIDOperationCompleted = new System.Threading.SendOrPostCallback(this.OnNumGetNumberIDOperationCompleted);
        }
        this.InvokeAsync("NumGetNumberID", new object[] {
                    sessionId,
                    numeratorId,
                    zoneId,
                    number}, this.NumGetNumberIDOperationCompleted, userState);
    }
    
    private void OnNumGetNumberIDOperationCompleted(object arg) {
        if ((this.NumGetNumberIDCompleted != null)) {
            System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
            this.NumGetNumberIDCompleted(this, new NumGetNumberIDCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
        }
    }
    
    /// <remarks/>
    [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://schemas.docsvision.com/Platform/2009-02-03/StorageServer/NumGetNumberInfo", RequestNamespace="http://schemas.docsvision.com/Platform/2009-02-03/StorageServer/", ResponseNamespace="http://schemas.docsvision.com/Platform/2009-02-03/StorageServer/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
    [return: System.Xml.Serialization.XmlElementAttribute("xmlInfoRow")]
    public string NumGetNumberInfo(System.Guid sessionId, System.Guid numeratorId, System.Guid numberId) {
        object[] results = this.Invoke("NumGetNumberInfo", new object[] {
                    sessionId,
                    numeratorId,
                    numberId});
        return ((string)(results[0]));
    }
    
    /// <remarks/>
    public System.IAsyncResult BeginNumGetNumberInfo(System.Guid sessionId, System.Guid numeratorId, System.Guid numberId, System.AsyncCallback callback, object asyncState) {
        return this.BeginInvoke("NumGetNumberInfo", new object[] {
                    sessionId,
                    numeratorId,
                    numberId}, callback, asyncState);
    }
    
    /// <remarks/>
    public string EndNumGetNumberInfo(System.IAsyncResult asyncResult) {
        object[] results = this.EndInvoke(asyncResult);
        return ((string)(results[0]));
    }
    
    /// <remarks/>
    public void NumGetNumberInfoAsync(System.Guid sessionId, System.Guid numeratorId, System.Guid numberId) {
        this.NumGetNumberInfoAsync(sessionId, numeratorId, numberId, null);
    }
    
    /// <remarks/>
    public void NumGetNumberInfoAsync(System.Guid sessionId, System.Guid numeratorId, System.Guid numberId, object userState) {
        if ((this.NumGetNumberInfoOperationCompleted == null)) {
            this.NumGetNumberInfoOperationCompleted = new System.Threading.SendOrPostCallback(this.OnNumGetNumberInfoOperationCompleted);
        }
        this.InvokeAsync("NumGetNumberInfo", new object[] {
                    sessionId,
                    numeratorId,
                    numberId}, this.NumGetNumberInfoOperationCompleted, userState);
    }
    
    private void OnNumGetNumberInfoOperationCompleted(object arg) {
        if ((this.NumGetNumberInfoCompleted != null)) {
            System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
            this.NumGetNumberInfoCompleted(this, new NumGetNumberInfoCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
        }
    }
    
    /// <remarks/>
    [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://schemas.docsvision.com/Platform/2009-02-03/StorageServer/NumGetNumbersStat" +
        "us", RequestNamespace="http://schemas.docsvision.com/Platform/2009-02-03/StorageServer/", ResponseNamespace="http://schemas.docsvision.com/Platform/2009-02-03/StorageServer/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
    [return: System.Xml.Serialization.XmlElementAttribute("cursorInfo")]
    public CursorInfo NumGetNumbersStatus(System.Guid sessionId, System.Guid numeratorId, string zoneName, int firstNumber, int lastNumber) {
        object[] results = this.Invoke("NumGetNumbersStatus", new object[] {
                    sessionId,
                    numeratorId,
                    zoneName,
                    firstNumber,
                    lastNumber});
        return ((CursorInfo)(results[0]));
    }
    
    /// <remarks/>
    public System.IAsyncResult BeginNumGetNumbersStatus(System.Guid sessionId, System.Guid numeratorId, string zoneName, int firstNumber, int lastNumber, System.AsyncCallback callback, object asyncState) {
        return this.BeginInvoke("NumGetNumbersStatus", new object[] {
                    sessionId,
                    numeratorId,
                    zoneName,
                    firstNumber,
                    lastNumber}, callback, asyncState);
    }
    
    /// <remarks/>
    public CursorInfo EndNumGetNumbersStatus(System.IAsyncResult asyncResult) {
        object[] results = this.EndInvoke(asyncResult);
        return ((CursorInfo)(results[0]));
    }
    
    /// <remarks/>
    public void NumGetNumbersStatusAsync(System.Guid sessionId, System.Guid numeratorId, string zoneName, int firstNumber, int lastNumber) {
        this.NumGetNumbersStatusAsync(sessionId, numeratorId, zoneName, firstNumber, lastNumber, null);
    }
    
    /// <remarks/>
    public void NumGetNumbersStatusAsync(System.Guid sessionId, System.Guid numeratorId, string zoneName, int firstNumber, int lastNumber, object userState) {
        if ((this.NumGetNumbersStatusOperationCompleted == null)) {
            this.NumGetNumbersStatusOperationCompleted = new System.Threading.SendOrPostCallback(this.OnNumGetNumbersStatusOperationCompleted);
        }
        this.InvokeAsync("NumGetNumbersStatus", new object[] {
                    sessionId,
                    numeratorId,
                    zoneName,
                    firstNumber,
                    lastNumber}, this.NumGetNumbersStatusOperationCompleted, userState);
    }
    
    private void OnNumGetNumbersStatusOperationCompleted(object arg) {
        if ((this.NumGetNumbersStatusCompleted != null)) {
            System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
            this.NumGetNumbersStatusCompleted(this, new NumGetNumbersStatusCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
        }
    }
    
    /// <remarks/>
    [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://schemas.docsvision.com/Platform/2009-02-03/StorageServer/NumGetNumberStatu" +
        "s", RequestNamespace="http://schemas.docsvision.com/Platform/2009-02-03/StorageServer/", ResponseNamespace="http://schemas.docsvision.com/Platform/2009-02-03/StorageServer/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
    [return: System.Xml.Serialization.XmlElementAttribute("numberStatus")]
    public NumberStatusEnum NumGetNumberStatus(System.Guid sessionId, System.Guid numeratorId, string zoneName, int number) {
        object[] results = this.Invoke("NumGetNumberStatus", new object[] {
                    sessionId,
                    numeratorId,
                    zoneName,
                    number});
        return ((NumberStatusEnum)(results[0]));
    }
    
    /// <remarks/>
    public System.IAsyncResult BeginNumGetNumberStatus(System.Guid sessionId, System.Guid numeratorId, string zoneName, int number, System.AsyncCallback callback, object asyncState) {
        return this.BeginInvoke("NumGetNumberStatus", new object[] {
                    sessionId,
                    numeratorId,
                    zoneName,
                    number}, callback, asyncState);
    }
    
    /// <remarks/>
    public NumberStatusEnum EndNumGetNumberStatus(System.IAsyncResult asyncResult) {
        object[] results = this.EndInvoke(asyncResult);
        return ((NumberStatusEnum)(results[0]));
    }
    
    /// <remarks/>
    public void NumGetNumberStatusAsync(System.Guid sessionId, System.Guid numeratorId, string zoneName, int number) {
        this.NumGetNumberStatusAsync(sessionId, numeratorId, zoneName, number, null);
    }
    
    /// <remarks/>
    public void NumGetNumberStatusAsync(System.Guid sessionId, System.Guid numeratorId, string zoneName, int number, object userState) {
        if ((this.NumGetNumberStatusOperationCompleted == null)) {
            this.NumGetNumberStatusOperationCompleted = new System.Threading.SendOrPostCallback(this.OnNumGetNumberStatusOperationCompleted);
        }
        this.InvokeAsync("NumGetNumberStatus", new object[] {
                    sessionId,
                    numeratorId,
                    zoneName,
                    number}, this.NumGetNumberStatusOperationCompleted, userState);
    }
    
    private void OnNumGetNumberStatusOperationCompleted(object arg) {
        if ((this.NumGetNumberStatusCompleted != null)) {
            System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
            this.NumGetNumberStatusCompleted(this, new NumGetNumberStatusCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
        }
    }
    
    /// <remarks/>
    [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://schemas.docsvision.com/Platform/2009-02-03/StorageServer/NumReleaseNumber", RequestNamespace="http://schemas.docsvision.com/Platform/2009-02-03/StorageServer/", ResponseNamespace="http://schemas.docsvision.com/Platform/2009-02-03/StorageServer/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
    public void NumReleaseNumber(System.Guid sessionId, System.Guid numeratorId, string zoneName, int number) {
        this.Invoke("NumReleaseNumber", new object[] {
                    sessionId,
                    numeratorId,
                    zoneName,
                    number});
    }
    
    /// <remarks/>
    public System.IAsyncResult BeginNumReleaseNumber(System.Guid sessionId, System.Guid numeratorId, string zoneName, int number, System.AsyncCallback callback, object asyncState) {
        return this.BeginInvoke("NumReleaseNumber", new object[] {
                    sessionId,
                    numeratorId,
                    zoneName,
                    number}, callback, asyncState);
    }
    
    /// <remarks/>
    public void EndNumReleaseNumber(System.IAsyncResult asyncResult) {
        this.EndInvoke(asyncResult);
    }
    
    /// <remarks/>
    public void NumReleaseNumberAsync(System.Guid sessionId, System.Guid numeratorId, string zoneName, int number) {
        this.NumReleaseNumberAsync(sessionId, numeratorId, zoneName, number, null);
    }
    
    /// <remarks/>
    public void NumReleaseNumberAsync(System.Guid sessionId, System.Guid numeratorId, string zoneName, int number, object userState) {
        if ((this.NumReleaseNumberOperationCompleted == null)) {
            this.NumReleaseNumberOperationCompleted = new System.Threading.SendOrPostCallback(this.OnNumReleaseNumberOperationCompleted);
        }
        this.InvokeAsync("NumReleaseNumber", new object[] {
                    sessionId,
                    numeratorId,
                    zoneName,
                    number}, this.NumReleaseNumberOperationCompleted, userState);
    }
    
    private void OnNumReleaseNumberOperationCompleted(object arg) {
        if ((this.NumReleaseNumberCompleted != null)) {
            System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
            this.NumReleaseNumberCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
        }
    }
    
    /// <remarks/>
    [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://schemas.docsvision.com/Platform/2009-02-03/StorageServer/NumReleaseNumberB" +
        "yID", RequestNamespace="http://schemas.docsvision.com/Platform/2009-02-03/StorageServer/", ResponseNamespace="http://schemas.docsvision.com/Platform/2009-02-03/StorageServer/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
    public void NumReleaseNumberByID(System.Guid sessionId, System.Guid numeratorId, System.Guid NumberId) {
        this.Invoke("NumReleaseNumberByID", new object[] {
                    sessionId,
                    numeratorId,
                    NumberId});
    }
    
    /// <remarks/>
    public System.IAsyncResult BeginNumReleaseNumberByID(System.Guid sessionId, System.Guid numeratorId, System.Guid NumberId, System.AsyncCallback callback, object asyncState) {
        return this.BeginInvoke("NumReleaseNumberByID", new object[] {
                    sessionId,
                    numeratorId,
                    NumberId}, callback, asyncState);
    }
    
    /// <remarks/>
    public void EndNumReleaseNumberByID(System.IAsyncResult asyncResult) {
        this.EndInvoke(asyncResult);
    }
    
    /// <remarks/>
    public void NumReleaseNumberByIDAsync(System.Guid sessionId, System.Guid numeratorId, System.Guid NumberId) {
        this.NumReleaseNumberByIDAsync(sessionId, numeratorId, NumberId, null);
    }
    
    /// <remarks/>
    public void NumReleaseNumberByIDAsync(System.Guid sessionId, System.Guid numeratorId, System.Guid NumberId, object userState) {
        if ((this.NumReleaseNumberByIDOperationCompleted == null)) {
            this.NumReleaseNumberByIDOperationCompleted = new System.Threading.SendOrPostCallback(this.OnNumReleaseNumberByIDOperationCompleted);
        }
        this.InvokeAsync("NumReleaseNumberByID", new object[] {
                    sessionId,
                    numeratorId,
                    NumberId}, this.NumReleaseNumberByIDOperationCompleted, userState);
    }
    
    private void OnNumReleaseNumberByIDOperationCompleted(object arg) {
        if ((this.NumReleaseNumberByIDCompleted != null)) {
            System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
            this.NumReleaseNumberByIDCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
        }
    }
    
    /// <remarks/>
    [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://schemas.docsvision.com/Platform/2009-02-03/StorageServer/NumReleaseNumbers" +
        "", RequestNamespace="http://schemas.docsvision.com/Platform/2009-02-03/StorageServer/", ResponseNamespace="http://schemas.docsvision.com/Platform/2009-02-03/StorageServer/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
    public void NumReleaseNumbers(System.Guid sessionId, System.Guid numeratorId, string zoneName, int firstNumber, int lastNumbers) {
        this.Invoke("NumReleaseNumbers", new object[] {
                    sessionId,
                    numeratorId,
                    zoneName,
                    firstNumber,
                    lastNumbers});
    }
    
    /// <remarks/>
    public System.IAsyncResult BeginNumReleaseNumbers(System.Guid sessionId, System.Guid numeratorId, string zoneName, int firstNumber, int lastNumbers, System.AsyncCallback callback, object asyncState) {
        return this.BeginInvoke("NumReleaseNumbers", new object[] {
                    sessionId,
                    numeratorId,
                    zoneName,
                    firstNumber,
                    lastNumbers}, callback, asyncState);
    }
    
    /// <remarks/>
    public void EndNumReleaseNumbers(System.IAsyncResult asyncResult) {
        this.EndInvoke(asyncResult);
    }
    
    /// <remarks/>
    public void NumReleaseNumbersAsync(System.Guid sessionId, System.Guid numeratorId, string zoneName, int firstNumber, int lastNumbers) {
        this.NumReleaseNumbersAsync(sessionId, numeratorId, zoneName, firstNumber, lastNumbers, null);
    }
    
    /// <remarks/>
    public void NumReleaseNumbersAsync(System.Guid sessionId, System.Guid numeratorId, string zoneName, int firstNumber, int lastNumbers, object userState) {
        if ((this.NumReleaseNumbersOperationCompleted == null)) {
            this.NumReleaseNumbersOperationCompleted = new System.Threading.SendOrPostCallback(this.OnNumReleaseNumbersOperationCompleted);
        }
        this.InvokeAsync("NumReleaseNumbers", new object[] {
                    sessionId,
                    numeratorId,
                    zoneName,
                    firstNumber,
                    lastNumbers}, this.NumReleaseNumbersOperationCompleted, userState);
    }
    
    private void OnNumReleaseNumbersOperationCompleted(object arg) {
        if ((this.NumReleaseNumbersCompleted != null)) {
            System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
            this.NumReleaseNumbersCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
        }
    }
    
    /// <remarks/>
    [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://schemas.docsvision.com/Platform/2009-02-03/StorageServer/ReportGetData", RequestNamespace="http://schemas.docsvision.com/Platform/2009-02-03/StorageServer/", ResponseNamespace="http://schemas.docsvision.com/Platform/2009-02-03/StorageServer/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
    [return: System.Xml.Serialization.XmlElementAttribute("cursorInfo")]
    public CursorInfo ReportGetData(System.Guid sessionId, System.Guid reportId, string paramsData) {
        object[] results = this.Invoke("ReportGetData", new object[] {
                    sessionId,
                    reportId,
                    paramsData});
        return ((CursorInfo)(results[0]));
    }
    
    /// <remarks/>
    public System.IAsyncResult BeginReportGetData(System.Guid sessionId, System.Guid reportId, string paramsData, System.AsyncCallback callback, object asyncState) {
        return this.BeginInvoke("ReportGetData", new object[] {
                    sessionId,
                    reportId,
                    paramsData}, callback, asyncState);
    }
    
    /// <remarks/>
    public CursorInfo EndReportGetData(System.IAsyncResult asyncResult) {
        object[] results = this.EndInvoke(asyncResult);
        return ((CursorInfo)(results[0]));
    }
    
    /// <remarks/>
    public void ReportGetDataAsync(System.Guid sessionId, System.Guid reportId, string paramsData) {
        this.ReportGetDataAsync(sessionId, reportId, paramsData, null);
    }
    
    /// <remarks/>
    public void ReportGetDataAsync(System.Guid sessionId, System.Guid reportId, string paramsData, object userState) {
        if ((this.ReportGetDataOperationCompleted == null)) {
            this.ReportGetDataOperationCompleted = new System.Threading.SendOrPostCallback(this.OnReportGetDataOperationCompleted);
        }
        this.InvokeAsync("ReportGetData", new object[] {
                    sessionId,
                    reportId,
                    paramsData}, this.ReportGetDataOperationCompleted, userState);
    }
    
    private void OnReportGetDataOperationCompleted(object arg) {
        if ((this.ReportGetDataCompleted != null)) {
            System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
            this.ReportGetDataCompleted(this, new ReportGetDataCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
        }
    }
    
    /// <remarks/>
    [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://schemas.docsvision.com/Platform/2009-02-03/StorageServer/ReportGetInfo", RequestNamespace="http://schemas.docsvision.com/Platform/2009-02-03/StorageServer/", ResponseNamespace="http://schemas.docsvision.com/Platform/2009-02-03/StorageServer/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
    [return: System.Xml.Serialization.XmlElementAttribute("reportInfo")]
    public string ReportGetInfo(System.Guid sessionId, System.Guid reportId) {
        object[] results = this.Invoke("ReportGetInfo", new object[] {
                    sessionId,
                    reportId});
        return ((string)(results[0]));
    }
    
    /// <remarks/>
    public System.IAsyncResult BeginReportGetInfo(System.Guid sessionId, System.Guid reportId, System.AsyncCallback callback, object asyncState) {
        return this.BeginInvoke("ReportGetInfo", new object[] {
                    sessionId,
                    reportId}, callback, asyncState);
    }
    
    /// <remarks/>
    public string EndReportGetInfo(System.IAsyncResult asyncResult) {
        object[] results = this.EndInvoke(asyncResult);
        return ((string)(results[0]));
    }
    
    /// <remarks/>
    public void ReportGetInfoAsync(System.Guid sessionId, System.Guid reportId) {
        this.ReportGetInfoAsync(sessionId, reportId, null);
    }
    
    /// <remarks/>
    public void ReportGetInfoAsync(System.Guid sessionId, System.Guid reportId, object userState) {
        if ((this.ReportGetInfoOperationCompleted == null)) {
            this.ReportGetInfoOperationCompleted = new System.Threading.SendOrPostCallback(this.OnReportGetInfoOperationCompleted);
        }
        this.InvokeAsync("ReportGetInfo", new object[] {
                    sessionId,
                    reportId}, this.ReportGetInfoOperationCompleted, userState);
    }
    
    private void OnReportGetInfoOperationCompleted(object arg) {
        if ((this.ReportGetInfoCompleted != null)) {
            System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
            this.ReportGetInfoCompleted(this, new ReportGetInfoCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
        }
    }
    
    /// <remarks/>
    [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://schemas.docsvision.com/Platform/2009-02-03/StorageServer/ReportGetList", RequestNamespace="http://schemas.docsvision.com/Platform/2009-02-03/StorageServer/", ResponseNamespace="http://schemas.docsvision.com/Platform/2009-02-03/StorageServer/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
    [return: System.Xml.Serialization.XmlElementAttribute("reportList")]
    public string ReportGetList(System.Guid sessionId) {
        object[] results = this.Invoke("ReportGetList", new object[] {
                    sessionId});
        return ((string)(results[0]));
    }
    
    /// <remarks/>
    public System.IAsyncResult BeginReportGetList(System.Guid sessionId, System.AsyncCallback callback, object asyncState) {
        return this.BeginInvoke("ReportGetList", new object[] {
                    sessionId}, callback, asyncState);
    }
    
    /// <remarks/>
    public string EndReportGetList(System.IAsyncResult asyncResult) {
        object[] results = this.EndInvoke(asyncResult);
        return ((string)(results[0]));
    }
    
    /// <remarks/>
    public void ReportGetListAsync(System.Guid sessionId) {
        this.ReportGetListAsync(sessionId, null);
    }
    
    /// <remarks/>
    public void ReportGetListAsync(System.Guid sessionId, object userState) {
        if ((this.ReportGetListOperationCompleted == null)) {
            this.ReportGetListOperationCompleted = new System.Threading.SendOrPostCallback(this.OnReportGetListOperationCompleted);
        }
        this.InvokeAsync("ReportGetList", new object[] {
                    sessionId}, this.ReportGetListOperationCompleted, userState);
    }
    
    private void OnReportGetListOperationCompleted(object arg) {
        if ((this.ReportGetListCompleted != null)) {
            System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
            this.ReportGetListCompleted(this, new ReportGetListCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
        }
    }
    
    /// <remarks/>
    [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://schemas.docsvision.com/Platform/2009-02-03/StorageServer/RowCopy", RequestNamespace="http://schemas.docsvision.com/Platform/2009-02-03/StorageServer/", ResponseNamespace="http://schemas.docsvision.com/Platform/2009-02-03/StorageServer/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
    [return: System.Xml.Serialization.XmlElementAttribute("newServerRowId")]
    public System.Guid RowCopy(System.Guid sessionId, System.Guid sectionId, System.Guid rowId, System.Guid newRowId, System.Guid newInstanceId, System.Guid newParentRowId, System.Guid newParentTreeRowId) {
        object[] results = this.Invoke("RowCopy", new object[] {
                    sessionId,
                    sectionId,
                    rowId,
                    newRowId,
                    newInstanceId,
                    newParentRowId,
                    newParentTreeRowId});
        return ((System.Guid)(results[0]));
    }
    
    /// <remarks/>
    public System.IAsyncResult BeginRowCopy(System.Guid sessionId, System.Guid sectionId, System.Guid rowId, System.Guid newRowId, System.Guid newInstanceId, System.Guid newParentRowId, System.Guid newParentTreeRowId, System.AsyncCallback callback, object asyncState) {
        return this.BeginInvoke("RowCopy", new object[] {
                    sessionId,
                    sectionId,
                    rowId,
                    newRowId,
                    newInstanceId,
                    newParentRowId,
                    newParentTreeRowId}, callback, asyncState);
    }
    
    /// <remarks/>
    public System.Guid EndRowCopy(System.IAsyncResult asyncResult) {
        object[] results = this.EndInvoke(asyncResult);
        return ((System.Guid)(results[0]));
    }
    
    /// <remarks/>
    public void RowCopyAsync(System.Guid sessionId, System.Guid sectionId, System.Guid rowId, System.Guid newRowId, System.Guid newInstanceId, System.Guid newParentRowId, System.Guid newParentTreeRowId) {
        this.RowCopyAsync(sessionId, sectionId, rowId, newRowId, newInstanceId, newParentRowId, newParentTreeRowId, null);
    }
    
    /// <remarks/>
    public void RowCopyAsync(System.Guid sessionId, System.Guid sectionId, System.Guid rowId, System.Guid newRowId, System.Guid newInstanceId, System.Guid newParentRowId, System.Guid newParentTreeRowId, object userState) {
        if ((this.RowCopyOperationCompleted == null)) {
            this.RowCopyOperationCompleted = new System.Threading.SendOrPostCallback(this.OnRowCopyOperationCompleted);
        }
        this.InvokeAsync("RowCopy", new object[] {
                    sessionId,
                    sectionId,
                    rowId,
                    newRowId,
                    newInstanceId,
                    newParentRowId,
                    newParentTreeRowId}, this.RowCopyOperationCompleted, userState);
    }
    
    private void OnRowCopyOperationCompleted(object arg) {
        if ((this.RowCopyCompleted != null)) {
            System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
            this.RowCopyCompleted(this, new RowCopyCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
        }
    }
    
    /// <remarks/>
    [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://schemas.docsvision.com/Platform/2009-02-03/StorageServer/RowCreate", RequestNamespace="http://schemas.docsvision.com/Platform/2009-02-03/StorageServer/", ResponseNamespace="http://schemas.docsvision.com/Platform/2009-02-03/StorageServer/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
    [return: System.Xml.Serialization.XmlElementAttribute("newRowId")]
    public System.Guid RowCreate(System.Guid sessionId, System.Guid sectionId, System.Guid rowId, System.Guid instanceID, System.Guid parentRowId, System.Guid parentTreeRowId) {
        object[] results = this.Invoke("RowCreate", new object[] {
                    sessionId,
                    sectionId,
                    rowId,
                    instanceID,
                    parentRowId,
                    parentTreeRowId});
        return ((System.Guid)(results[0]));
    }
    
    /// <remarks/>
    public System.IAsyncResult BeginRowCreate(System.Guid sessionId, System.Guid sectionId, System.Guid rowId, System.Guid instanceID, System.Guid parentRowId, System.Guid parentTreeRowId, System.AsyncCallback callback, object asyncState) {
        return this.BeginInvoke("RowCreate", new object[] {
                    sessionId,
                    sectionId,
                    rowId,
                    instanceID,
                    parentRowId,
                    parentTreeRowId}, callback, asyncState);
    }
    
    /// <remarks/>
    public System.Guid EndRowCreate(System.IAsyncResult asyncResult) {
        object[] results = this.EndInvoke(asyncResult);
        return ((System.Guid)(results[0]));
    }
    
    /// <remarks/>
    public void RowCreateAsync(System.Guid sessionId, System.Guid sectionId, System.Guid rowId, System.Guid instanceID, System.Guid parentRowId, System.Guid parentTreeRowId) {
        this.RowCreateAsync(sessionId, sectionId, rowId, instanceID, parentRowId, parentTreeRowId, null);
    }
    
    /// <remarks/>
    public void RowCreateAsync(System.Guid sessionId, System.Guid sectionId, System.Guid rowId, System.Guid instanceID, System.Guid parentRowId, System.Guid parentTreeRowId, object userState) {
        if ((this.RowCreateOperationCompleted == null)) {
            this.RowCreateOperationCompleted = new System.Threading.SendOrPostCallback(this.OnRowCreateOperationCompleted);
        }
        this.InvokeAsync("RowCreate", new object[] {
                    sessionId,
                    sectionId,
                    rowId,
                    instanceID,
                    parentRowId,
                    parentTreeRowId}, this.RowCreateOperationCompleted, userState);
    }
    
    private void OnRowCreateOperationCompleted(object arg) {
        if ((this.RowCreateCompleted != null)) {
            System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
            this.RowCreateCompleted(this, new RowCreateCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
        }
    }
    
    /// <remarks/>
    [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://schemas.docsvision.com/Platform/2009-02-03/StorageServer/RowDelete", RequestNamespace="http://schemas.docsvision.com/Platform/2009-02-03/StorageServer/", ResponseNamespace="http://schemas.docsvision.com/Platform/2009-02-03/StorageServer/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
    public void RowDelete(System.Guid sessionId, System.Guid sectionId, System.Guid rowId) {
        this.Invoke("RowDelete", new object[] {
                    sessionId,
                    sectionId,
                    rowId});
    }
    
    /// <remarks/>
    public System.IAsyncResult BeginRowDelete(System.Guid sessionId, System.Guid sectionId, System.Guid rowId, System.AsyncCallback callback, object asyncState) {
        return this.BeginInvoke("RowDelete", new object[] {
                    sessionId,
                    sectionId,
                    rowId}, callback, asyncState);
    }
    
    /// <remarks/>
    public void EndRowDelete(System.IAsyncResult asyncResult) {
        this.EndInvoke(asyncResult);
    }
    
    /// <remarks/>
    public void RowDeleteAsync(System.Guid sessionId, System.Guid sectionId, System.Guid rowId) {
        this.RowDeleteAsync(sessionId, sectionId, rowId, null);
    }
    
    /// <remarks/>
    public void RowDeleteAsync(System.Guid sessionId, System.Guid sectionId, System.Guid rowId, object userState) {
        if ((this.RowDeleteOperationCompleted == null)) {
            this.RowDeleteOperationCompleted = new System.Threading.SendOrPostCallback(this.OnRowDeleteOperationCompleted);
        }
        this.InvokeAsync("RowDelete", new object[] {
                    sessionId,
                    sectionId,
                    rowId}, this.RowDeleteOperationCompleted, userState);
    }
    
    private void OnRowDeleteOperationCompleted(object arg) {
        if ((this.RowDeleteCompleted != null)) {
            System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
            this.RowDeleteCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
        }
    }
    
    /// <remarks/>
    [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://schemas.docsvision.com/Platform/2009-02-03/StorageServer/RowExists", RequestNamespace="http://schemas.docsvision.com/Platform/2009-02-03/StorageServer/", ResponseNamespace="http://schemas.docsvision.com/Platform/2009-02-03/StorageServer/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
    [return: System.Xml.Serialization.XmlElementAttribute("exists")]
    public bool RowExists(System.Guid sessionId, System.Guid sectionId, System.Guid rowId) {
        object[] results = this.Invoke("RowExists", new object[] {
                    sessionId,
                    sectionId,
                    rowId});
        return ((bool)(results[0]));
    }
    
    /// <remarks/>
    public System.IAsyncResult BeginRowExists(System.Guid sessionId, System.Guid sectionId, System.Guid rowId, System.AsyncCallback callback, object asyncState) {
        return this.BeginInvoke("RowExists", new object[] {
                    sessionId,
                    sectionId,
                    rowId}, callback, asyncState);
    }
    
    /// <remarks/>
    public bool EndRowExists(System.IAsyncResult asyncResult) {
        object[] results = this.EndInvoke(asyncResult);
        return ((bool)(results[0]));
    }
    
    /// <remarks/>
    public void RowExistsAsync(System.Guid sessionId, System.Guid sectionId, System.Guid rowId) {
        this.RowExistsAsync(sessionId, sectionId, rowId, null);
    }
    
    /// <remarks/>
    public void RowExistsAsync(System.Guid sessionId, System.Guid sectionId, System.Guid rowId, object userState) {
        if ((this.RowExistsOperationCompleted == null)) {
            this.RowExistsOperationCompleted = new System.Threading.SendOrPostCallback(this.OnRowExistsOperationCompleted);
        }
        this.InvokeAsync("RowExists", new object[] {
                    sessionId,
                    sectionId,
                    rowId}, this.RowExistsOperationCompleted, userState);
    }
    
    private void OnRowExistsOperationCompleted(object arg) {
        if ((this.RowExistsCompleted != null)) {
            System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
            this.RowExistsCompleted(this, new RowExistsCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
        }
    }
    
    /// <remarks/>
    [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://schemas.docsvision.com/Platform/2009-02-03/StorageServer/RowGetData", RequestNamespace="http://schemas.docsvision.com/Platform/2009-02-03/StorageServer/", ResponseNamespace="http://schemas.docsvision.com/Platform/2009-02-03/StorageServer/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
    [return: System.Xml.Serialization.XmlElementAttribute("rowData")]
    public string RowGetData(System.Guid sessionId, System.Guid sectionId, System.Guid rowId, System.Guid instanceID, out bool usingCompression) {
        object[] results = this.Invoke("RowGetData", new object[] {
                    sessionId,
                    sectionId,
                    rowId,
                    instanceID});
        usingCompression = ((bool)(results[1]));
        return ((string)(results[0]));
    }
    
    /// <remarks/>
    public System.IAsyncResult BeginRowGetData(System.Guid sessionId, System.Guid sectionId, System.Guid rowId, System.Guid instanceID, System.AsyncCallback callback, object asyncState) {
        return this.BeginInvoke("RowGetData", new object[] {
                    sessionId,
                    sectionId,
                    rowId,
                    instanceID}, callback, asyncState);
    }
    
    /// <remarks/>
    public string EndRowGetData(System.IAsyncResult asyncResult, out bool usingCompression) {
        object[] results = this.EndInvoke(asyncResult);
        usingCompression = ((bool)(results[1]));
        return ((string)(results[0]));
    }
    
    /// <remarks/>
    public void RowGetDataAsync(System.Guid sessionId, System.Guid sectionId, System.Guid rowId, System.Guid instanceID) {
        this.RowGetDataAsync(sessionId, sectionId, rowId, instanceID, null);
    }
    
    /// <remarks/>
    public void RowGetDataAsync(System.Guid sessionId, System.Guid sectionId, System.Guid rowId, System.Guid instanceID, object userState) {
        if ((this.RowGetDataOperationCompleted == null)) {
            this.RowGetDataOperationCompleted = new System.Threading.SendOrPostCallback(this.OnRowGetDataOperationCompleted);
        }
        this.InvokeAsync("RowGetData", new object[] {
                    sessionId,
                    sectionId,
                    rowId,
                    instanceID}, this.RowGetDataOperationCompleted, userState);
    }
    
    private void OnRowGetDataOperationCompleted(object arg) {
        if ((this.RowGetDataCompleted != null)) {
            System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
            this.RowGetDataCompleted(this, new RowGetDataCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
        }
    }
    
    /// <remarks/>
    [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://schemas.docsvision.com/Platform/2009-02-03/StorageServer/RowGetDataByInsta" +
        "nceID", RequestNamespace="http://schemas.docsvision.com/Platform/2009-02-03/StorageServer/", ResponseNamespace="http://schemas.docsvision.com/Platform/2009-02-03/StorageServer/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
    [return: System.Xml.Serialization.XmlElementAttribute("rowData")]
    public string RowGetDataByInstanceID(System.Guid sessionId, System.Guid instanceID, System.Guid sectionId, out bool usingCompression) {
        object[] results = this.Invoke("RowGetDataByInstanceID", new object[] {
                    sessionId,
                    instanceID,
                    sectionId});
        usingCompression = ((bool)(results[1]));
        return ((string)(results[0]));
    }
    
    /// <remarks/>
    public System.IAsyncResult BeginRowGetDataByInstanceID(System.Guid sessionId, System.Guid instanceID, System.Guid sectionId, System.AsyncCallback callback, object asyncState) {
        return this.BeginInvoke("RowGetDataByInstanceID", new object[] {
                    sessionId,
                    instanceID,
                    sectionId}, callback, asyncState);
    }
    
    /// <remarks/>
    public string EndRowGetDataByInstanceID(System.IAsyncResult asyncResult, out bool usingCompression) {
        object[] results = this.EndInvoke(asyncResult);
        usingCompression = ((bool)(results[1]));
        return ((string)(results[0]));
    }
    
    /// <remarks/>
    public void RowGetDataByInstanceIDAsync(System.Guid sessionId, System.Guid instanceID, System.Guid sectionId) {
        this.RowGetDataByInstanceIDAsync(sessionId, instanceID, sectionId, null);
    }
    
    /// <remarks/>
    public void RowGetDataByInstanceIDAsync(System.Guid sessionId, System.Guid instanceID, System.Guid sectionId, object userState) {
        if ((this.RowGetDataByInstanceIDOperationCompleted == null)) {
            this.RowGetDataByInstanceIDOperationCompleted = new System.Threading.SendOrPostCallback(this.OnRowGetDataByInstanceIDOperationCompleted);
        }
        this.InvokeAsync("RowGetDataByInstanceID", new object[] {
                    sessionId,
                    instanceID,
                    sectionId}, this.RowGetDataByInstanceIDOperationCompleted, userState);
    }
    
    private void OnRowGetDataByInstanceIDOperationCompleted(object arg) {
        if ((this.RowGetDataByInstanceIDCompleted != null)) {
            System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
            this.RowGetDataByInstanceIDCompleted(this, new RowGetDataByInstanceIDCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
        }
    }
    
    /// <remarks/>
    [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://schemas.docsvision.com/Platform/2009-02-03/StorageServer/RowGetHierarchy", RequestNamespace="http://schemas.docsvision.com/Platform/2009-02-03/StorageServer/", ResponseNamespace="http://schemas.docsvision.com/Platform/2009-02-03/StorageServer/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
    [return: System.Xml.Serialization.XmlElementAttribute("hierarchyData")]
    public string RowGetHierarchy(System.Guid sessionId, System.Guid sectionId, System.Guid rowId) {
        object[] results = this.Invoke("RowGetHierarchy", new object[] {
                    sessionId,
                    sectionId,
                    rowId});
        return ((string)(results[0]));
    }
    
    /// <remarks/>
    public System.IAsyncResult BeginRowGetHierarchy(System.Guid sessionId, System.Guid sectionId, System.Guid rowId, System.AsyncCallback callback, object asyncState) {
        return this.BeginInvoke("RowGetHierarchy", new object[] {
                    sessionId,
                    sectionId,
                    rowId}, callback, asyncState);
    }
    
    /// <remarks/>
    public string EndRowGetHierarchy(System.IAsyncResult asyncResult) {
        object[] results = this.EndInvoke(asyncResult);
        return ((string)(results[0]));
    }
    
    /// <remarks/>
    public void RowGetHierarchyAsync(System.Guid sessionId, System.Guid sectionId, System.Guid rowId) {
        this.RowGetHierarchyAsync(sessionId, sectionId, rowId, null);
    }
    
    /// <remarks/>
    public void RowGetHierarchyAsync(System.Guid sessionId, System.Guid sectionId, System.Guid rowId, object userState) {
        if ((this.RowGetHierarchyOperationCompleted == null)) {
            this.RowGetHierarchyOperationCompleted = new System.Threading.SendOrPostCallback(this.OnRowGetHierarchyOperationCompleted);
        }
        this.InvokeAsync("RowGetHierarchy", new object[] {
                    sessionId,
                    sectionId,
                    rowId}, this.RowGetHierarchyOperationCompleted, userState);
    }
    
    private void OnRowGetHierarchyOperationCompleted(object arg) {
        if ((this.RowGetHierarchyCompleted != null)) {
            System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
            this.RowGetHierarchyCompleted(this, new RowGetHierarchyCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
        }
    }
    
    /// <remarks/>
    [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://schemas.docsvision.com/Platform/2009-02-03/StorageServer/RowGetInfo", RequestNamespace="http://schemas.docsvision.com/Platform/2009-02-03/StorageServer/", ResponseNamespace="http://schemas.docsvision.com/Platform/2009-02-03/StorageServer/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
    [return: System.Xml.Serialization.XmlElementAttribute("instanceID")]
    public System.Guid RowGetInfo(System.Guid sessionId, System.Guid sectionId, System.Guid rowId, out System.Guid parentRowId, out System.Guid parentTreeRowId) {
        object[] results = this.Invoke("RowGetInfo", new object[] {
                    sessionId,
                    sectionId,
                    rowId});
        parentRowId = ((System.Guid)(results[1]));
        parentTreeRowId = ((System.Guid)(results[2]));
        return ((System.Guid)(results[0]));
    }
    
    /// <remarks/>
    public System.IAsyncResult BeginRowGetInfo(System.Guid sessionId, System.Guid sectionId, System.Guid rowId, System.AsyncCallback callback, object asyncState) {
        return this.BeginInvoke("RowGetInfo", new object[] {
                    sessionId,
                    sectionId,
                    rowId}, callback, asyncState);
    }
    
    /// <remarks/>
    public System.Guid EndRowGetInfo(System.IAsyncResult asyncResult, out System.Guid parentRowId, out System.Guid parentTreeRowId) {
        object[] results = this.EndInvoke(asyncResult);
        parentRowId = ((System.Guid)(results[1]));
        parentTreeRowId = ((System.Guid)(results[2]));
        return ((System.Guid)(results[0]));
    }
    
    /// <remarks/>
    public void RowGetInfoAsync(System.Guid sessionId, System.Guid sectionId, System.Guid rowId) {
        this.RowGetInfoAsync(sessionId, sectionId, rowId, null);
    }
    
    /// <remarks/>
    public void RowGetInfoAsync(System.Guid sessionId, System.Guid sectionId, System.Guid rowId, object userState) {
        if ((this.RowGetInfoOperationCompleted == null)) {
            this.RowGetInfoOperationCompleted = new System.Threading.SendOrPostCallback(this.OnRowGetInfoOperationCompleted);
        }
        this.InvokeAsync("RowGetInfo", new object[] {
                    sessionId,
                    sectionId,
                    rowId}, this.RowGetInfoOperationCompleted, userState);
    }
    
    private void OnRowGetInfoOperationCompleted(object arg) {
        if ((this.RowGetInfoCompleted != null)) {
            System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
            this.RowGetInfoCompleted(this, new RowGetInfoCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
        }
    }
    
    /// <remarks/>
    [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://schemas.docsvision.com/Platform/2009-02-03/StorageServer/RowMove", RequestNamespace="http://schemas.docsvision.com/Platform/2009-02-03/StorageServer/", ResponseNamespace="http://schemas.docsvision.com/Platform/2009-02-03/StorageServer/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
    public void RowMove(System.Guid sessionId, System.Guid sectionId, System.Guid rowId, System.Guid newParentRowId, System.Guid newParentTreeRowId) {
        this.Invoke("RowMove", new object[] {
                    sessionId,
                    sectionId,
                    rowId,
                    newParentRowId,
                    newParentTreeRowId});
    }
    
    /// <remarks/>
    public System.IAsyncResult BeginRowMove(System.Guid sessionId, System.Guid sectionId, System.Guid rowId, System.Guid newParentRowId, System.Guid newParentTreeRowId, System.AsyncCallback callback, object asyncState) {
        return this.BeginInvoke("RowMove", new object[] {
                    sessionId,
                    sectionId,
                    rowId,
                    newParentRowId,
                    newParentTreeRowId}, callback, asyncState);
    }
    
    /// <remarks/>
    public void EndRowMove(System.IAsyncResult asyncResult) {
        this.EndInvoke(asyncResult);
    }
    
    /// <remarks/>
    public void RowMoveAsync(System.Guid sessionId, System.Guid sectionId, System.Guid rowId, System.Guid newParentRowId, System.Guid newParentTreeRowId) {
        this.RowMoveAsync(sessionId, sectionId, rowId, newParentRowId, newParentTreeRowId, null);
    }
    
    /// <remarks/>
    public void RowMoveAsync(System.Guid sessionId, System.Guid sectionId, System.Guid rowId, System.Guid newParentRowId, System.Guid newParentTreeRowId, object userState) {
        if ((this.RowMoveOperationCompleted == null)) {
            this.RowMoveOperationCompleted = new System.Threading.SendOrPostCallback(this.OnRowMoveOperationCompleted);
        }
        this.InvokeAsync("RowMove", new object[] {
                    sessionId,
                    sectionId,
                    rowId,
                    newParentRowId,
                    newParentTreeRowId}, this.RowMoveOperationCompleted, userState);
    }
    
    private void OnRowMoveOperationCompleted(object arg) {
        if ((this.RowMoveCompleted != null)) {
            System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
            this.RowMoveCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
        }
    }
    
    /// <remarks/>
    [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://schemas.docsvision.com/Platform/2009-02-03/StorageServer/RowSetData", RequestNamespace="http://schemas.docsvision.com/Platform/2009-02-03/StorageServer/", ResponseNamespace="http://schemas.docsvision.com/Platform/2009-02-03/StorageServer/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
    public void RowSetData(System.Guid sessionId, System.Guid sectionId, System.Guid rowId, string rowData) {
        this.Invoke("RowSetData", new object[] {
                    sessionId,
                    sectionId,
                    rowId,
                    rowData});
    }
    
    /// <remarks/>
    public System.IAsyncResult BeginRowSetData(System.Guid sessionId, System.Guid sectionId, System.Guid rowId, string rowData, System.AsyncCallback callback, object asyncState) {
        return this.BeginInvoke("RowSetData", new object[] {
                    sessionId,
                    sectionId,
                    rowId,
                    rowData}, callback, asyncState);
    }
    
    /// <remarks/>
    public void EndRowSetData(System.IAsyncResult asyncResult) {
        this.EndInvoke(asyncResult);
    }
    
    /// <remarks/>
    public void RowSetDataAsync(System.Guid sessionId, System.Guid sectionId, System.Guid rowId, string rowData) {
        this.RowSetDataAsync(sessionId, sectionId, rowId, rowData, null);
    }
    
    /// <remarks/>
    public void RowSetDataAsync(System.Guid sessionId, System.Guid sectionId, System.Guid rowId, string rowData, object userState) {
        if ((this.RowSetDataOperationCompleted == null)) {
            this.RowSetDataOperationCompleted = new System.Threading.SendOrPostCallback(this.OnRowSetDataOperationCompleted);
        }
        this.InvokeAsync("RowSetData", new object[] {
                    sessionId,
                    sectionId,
                    rowId,
                    rowData}, this.RowSetDataOperationCompleted, userState);
    }
    
    private void OnRowSetDataOperationCompleted(object arg) {
        if ((this.RowSetDataCompleted != null)) {
            System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
            this.RowSetDataCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
        }
    }
    
    /// <remarks/>
    [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://schemas.docsvision.com/Platform/2009-02-03/StorageServer/SearchCards", RequestNamespace="http://schemas.docsvision.com/Platform/2009-02-03/StorageServer/", ResponseNamespace="http://schemas.docsvision.com/Platform/2009-02-03/StorageServer/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
    [return: System.Xml.Serialization.XmlElementAttribute("cards")]
    public string SearchCards(System.Guid sessionId, string filter, out bool usingCompression) {
        object[] results = this.Invoke("SearchCards", new object[] {
                    sessionId,
                    filter});
        usingCompression = ((bool)(results[1]));
        return ((string)(results[0]));
    }
    
    /// <remarks/>
    public System.IAsyncResult BeginSearchCards(System.Guid sessionId, string filter, System.AsyncCallback callback, object asyncState) {
        return this.BeginInvoke("SearchCards", new object[] {
                    sessionId,
                    filter}, callback, asyncState);
    }
    
    /// <remarks/>
    public string EndSearchCards(System.IAsyncResult asyncResult, out bool usingCompression) {
        object[] results = this.EndInvoke(asyncResult);
        usingCompression = ((bool)(results[1]));
        return ((string)(results[0]));
    }
    
    /// <remarks/>
    public void SearchCardsAsync(System.Guid sessionId, string filter) {
        this.SearchCardsAsync(sessionId, filter, null);
    }
    
    /// <remarks/>
    public void SearchCardsAsync(System.Guid sessionId, string filter, object userState) {
        if ((this.SearchCardsOperationCompleted == null)) {
            this.SearchCardsOperationCompleted = new System.Threading.SendOrPostCallback(this.OnSearchCardsOperationCompleted);
        }
        this.InvokeAsync("SearchCards", new object[] {
                    sessionId,
                    filter}, this.SearchCardsOperationCompleted, userState);
    }
    
    private void OnSearchCardsOperationCompleted(object arg) {
        if ((this.SearchCardsCompleted != null)) {
            System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
            this.SearchCardsCompleted(this, new SearchCardsCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
        }
    }
    
    /// <remarks/>
    [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://schemas.docsvision.com/Platform/2009-02-03/StorageServer/SearchCardsEx", RequestNamespace="http://schemas.docsvision.com/Platform/2009-02-03/StorageServer/", ResponseNamespace="http://schemas.docsvision.com/Platform/2009-02-03/StorageServer/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
    [return: System.Xml.Serialization.XmlElementAttribute("cursorInfo")]
    public CursorInfo SearchCardsEx(System.Guid sessionId, string search, int flags, string parameters) {
        object[] results = this.Invoke("SearchCardsEx", new object[] {
                    sessionId,
                    search,
                    flags,
                    parameters});
        return ((CursorInfo)(results[0]));
    }
    
    /// <remarks/>
    public System.IAsyncResult BeginSearchCardsEx(System.Guid sessionId, string search, int flags, string parameters, System.AsyncCallback callback, object asyncState) {
        return this.BeginInvoke("SearchCardsEx", new object[] {
                    sessionId,
                    search,
                    flags,
                    parameters}, callback, asyncState);
    }
    
    /// <remarks/>
    public CursorInfo EndSearchCardsEx(System.IAsyncResult asyncResult) {
        object[] results = this.EndInvoke(asyncResult);
        return ((CursorInfo)(results[0]));
    }
    
    /// <remarks/>
    public void SearchCardsExAsync(System.Guid sessionId, string search, int flags, string parameters) {
        this.SearchCardsExAsync(sessionId, search, flags, parameters, null);
    }
    
    /// <remarks/>
    public void SearchCardsExAsync(System.Guid sessionId, string search, int flags, string parameters, object userState) {
        if ((this.SearchCardsExOperationCompleted == null)) {
            this.SearchCardsExOperationCompleted = new System.Threading.SendOrPostCallback(this.OnSearchCardsExOperationCompleted);
        }
        this.InvokeAsync("SearchCardsEx", new object[] {
                    sessionId,
                    search,
                    flags,
                    parameters}, this.SearchCardsExOperationCompleted, userState);
    }
    
    private void OnSearchCardsExOperationCompleted(object arg) {
        if ((this.SearchCardsExCompleted != null)) {
            System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
            this.SearchCardsExCompleted(this, new SearchCardsExCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
        }
    }
    
    /// <remarks/>
    [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://schemas.docsvision.com/Platform/2009-02-03/StorageServer/SearchCardsToFold" +
        "er", RequestNamespace="http://schemas.docsvision.com/Platform/2009-02-03/StorageServer/", ResponseNamespace="http://schemas.docsvision.com/Platform/2009-02-03/StorageServer/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
    public void SearchCardsToFolder(System.Guid sessionId, string filter, bool loadFilter, System.Guid folderId) {
        this.Invoke("SearchCardsToFolder", new object[] {
                    sessionId,
                    filter,
                    loadFilter,
                    folderId});
    }
    
    /// <remarks/>
    public System.IAsyncResult BeginSearchCardsToFolder(System.Guid sessionId, string filter, bool loadFilter, System.Guid folderId, System.AsyncCallback callback, object asyncState) {
        return this.BeginInvoke("SearchCardsToFolder", new object[] {
                    sessionId,
                    filter,
                    loadFilter,
                    folderId}, callback, asyncState);
    }
    
    /// <remarks/>
    public void EndSearchCardsToFolder(System.IAsyncResult asyncResult) {
        this.EndInvoke(asyncResult);
    }
    
    /// <remarks/>
    public void SearchCardsToFolderAsync(System.Guid sessionId, string filter, bool loadFilter, System.Guid folderId) {
        this.SearchCardsToFolderAsync(sessionId, filter, loadFilter, folderId, null);
    }
    
    /// <remarks/>
    public void SearchCardsToFolderAsync(System.Guid sessionId, string filter, bool loadFilter, System.Guid folderId, object userState) {
        if ((this.SearchCardsToFolderOperationCompleted == null)) {
            this.SearchCardsToFolderOperationCompleted = new System.Threading.SendOrPostCallback(this.OnSearchCardsToFolderOperationCompleted);
        }
        this.InvokeAsync("SearchCardsToFolder", new object[] {
                    sessionId,
                    filter,
                    loadFilter,
                    folderId}, this.SearchCardsToFolderOperationCompleted, userState);
    }
    
    private void OnSearchCardsToFolderOperationCompleted(object arg) {
        if ((this.SearchCardsToFolderCompleted != null)) {
            System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
            this.SearchCardsToFolderCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
        }
    }
    
    /// <remarks/>
    [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://schemas.docsvision.com/Platform/2009-02-03/StorageServer/SearchCardsToStor" +
        "e", RequestNamespace="http://schemas.docsvision.com/Platform/2009-02-03/StorageServer/", ResponseNamespace="http://schemas.docsvision.com/Platform/2009-02-03/StorageServer/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
    public void SearchCardsToStore(System.Guid sessionId, string search, int flags, string parameters, System.Guid storeId) {
        this.Invoke("SearchCardsToStore", new object[] {
                    sessionId,
                    search,
                    flags,
                    parameters,
                    storeId});
    }
    
    /// <remarks/>
    public System.IAsyncResult BeginSearchCardsToStore(System.Guid sessionId, string search, int flags, string parameters, System.Guid storeId, System.AsyncCallback callback, object asyncState) {
        return this.BeginInvoke("SearchCardsToStore", new object[] {
                    sessionId,
                    search,
                    flags,
                    parameters,
                    storeId}, callback, asyncState);
    }
    
    /// <remarks/>
    public void EndSearchCardsToStore(System.IAsyncResult asyncResult) {
        this.EndInvoke(asyncResult);
    }
    
    /// <remarks/>
    public void SearchCardsToStoreAsync(System.Guid sessionId, string search, int flags, string parameters, System.Guid storeId) {
        this.SearchCardsToStoreAsync(sessionId, search, flags, parameters, storeId, null);
    }
    
    /// <remarks/>
    public void SearchCardsToStoreAsync(System.Guid sessionId, string search, int flags, string parameters, System.Guid storeId, object userState) {
        if ((this.SearchCardsToStoreOperationCompleted == null)) {
            this.SearchCardsToStoreOperationCompleted = new System.Threading.SendOrPostCallback(this.OnSearchCardsToStoreOperationCompleted);
        }
        this.InvokeAsync("SearchCardsToStore", new object[] {
                    sessionId,
                    search,
                    flags,
                    parameters,
                    storeId}, this.SearchCardsToStoreOperationCompleted, userState);
    }
    
    private void OnSearchCardsToStoreOperationCompleted(object arg) {
        if ((this.SearchCardsToStoreCompleted != null)) {
            System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
            this.SearchCardsToStoreCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
        }
    }
    
    /// <remarks/>
    [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://schemas.docsvision.com/Platform/2009-02-03/StorageServer/SearchCreate", RequestNamespace="http://schemas.docsvision.com/Platform/2009-02-03/StorageServer/", ResponseNamespace="http://schemas.docsvision.com/Platform/2009-02-03/StorageServer/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
    public void SearchCreate(System.Guid sessionId, System.Guid queryId, string query) {
        this.Invoke("SearchCreate", new object[] {
                    sessionId,
                    queryId,
                    query});
    }
    
    /// <remarks/>
    public System.IAsyncResult BeginSearchCreate(System.Guid sessionId, System.Guid queryId, string query, System.AsyncCallback callback, object asyncState) {
        return this.BeginInvoke("SearchCreate", new object[] {
                    sessionId,
                    queryId,
                    query}, callback, asyncState);
    }
    
    /// <remarks/>
    public void EndSearchCreate(System.IAsyncResult asyncResult) {
        this.EndInvoke(asyncResult);
    }
    
    /// <remarks/>
    public void SearchCreateAsync(System.Guid sessionId, System.Guid queryId, string query) {
        this.SearchCreateAsync(sessionId, queryId, query, null);
    }
    
    /// <remarks/>
    public void SearchCreateAsync(System.Guid sessionId, System.Guid queryId, string query, object userState) {
        if ((this.SearchCreateOperationCompleted == null)) {
            this.SearchCreateOperationCompleted = new System.Threading.SendOrPostCallback(this.OnSearchCreateOperationCompleted);
        }
        this.InvokeAsync("SearchCreate", new object[] {
                    sessionId,
                    queryId,
                    query}, this.SearchCreateOperationCompleted, userState);
    }
    
    private void OnSearchCreateOperationCompleted(object arg) {
        if ((this.SearchCreateCompleted != null)) {
            System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
            this.SearchCreateCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
        }
    }
    
    /// <remarks/>
    [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://schemas.docsvision.com/Platform/2009-02-03/StorageServer/SearchDelete", RequestNamespace="http://schemas.docsvision.com/Platform/2009-02-03/StorageServer/", ResponseNamespace="http://schemas.docsvision.com/Platform/2009-02-03/StorageServer/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
    public void SearchDelete(System.Guid sessionId, System.Guid queryId) {
        this.Invoke("SearchDelete", new object[] {
                    sessionId,
                    queryId});
    }
    
    /// <remarks/>
    public System.IAsyncResult BeginSearchDelete(System.Guid sessionId, System.Guid queryId, System.AsyncCallback callback, object asyncState) {
        return this.BeginInvoke("SearchDelete", new object[] {
                    sessionId,
                    queryId}, callback, asyncState);
    }
    
    /// <remarks/>
    public void EndSearchDelete(System.IAsyncResult asyncResult) {
        this.EndInvoke(asyncResult);
    }
    
    /// <remarks/>
    public void SearchDeleteAsync(System.Guid sessionId, System.Guid queryId) {
        this.SearchDeleteAsync(sessionId, queryId, null);
    }
    
    /// <remarks/>
    public void SearchDeleteAsync(System.Guid sessionId, System.Guid queryId, object userState) {
        if ((this.SearchDeleteOperationCompleted == null)) {
            this.SearchDeleteOperationCompleted = new System.Threading.SendOrPostCallback(this.OnSearchDeleteOperationCompleted);
        }
        this.InvokeAsync("SearchDelete", new object[] {
                    sessionId,
                    queryId}, this.SearchDeleteOperationCompleted, userState);
    }
    
    private void OnSearchDeleteOperationCompleted(object arg) {
        if ((this.SearchDeleteCompleted != null)) {
            System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
            this.SearchDeleteCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
        }
    }
    
    /// <remarks/>
    [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://schemas.docsvision.com/Platform/2009-02-03/StorageServer/SearchRows", RequestNamespace="http://schemas.docsvision.com/Platform/2009-02-03/StorageServer/", ResponseNamespace="http://schemas.docsvision.com/Platform/2009-02-03/StorageServer/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
    [return: System.Xml.Serialization.XmlElementAttribute("rows")]
    public string SearchRows(System.Guid sessionId, System.Guid instanceID, System.Guid sectionId, string filter, out bool usingCompression) {
        object[] results = this.Invoke("SearchRows", new object[] {
                    sessionId,
                    instanceID,
                    sectionId,
                    filter});
        usingCompression = ((bool)(results[1]));
        return ((string)(results[0]));
    }
    
    /// <remarks/>
    public System.IAsyncResult BeginSearchRows(System.Guid sessionId, System.Guid instanceID, System.Guid sectionId, string filter, System.AsyncCallback callback, object asyncState) {
        return this.BeginInvoke("SearchRows", new object[] {
                    sessionId,
                    instanceID,
                    sectionId,
                    filter}, callback, asyncState);
    }
    
    /// <remarks/>
    public string EndSearchRows(System.IAsyncResult asyncResult, out bool usingCompression) {
        object[] results = this.EndInvoke(asyncResult);
        usingCompression = ((bool)(results[1]));
        return ((string)(results[0]));
    }
    
    /// <remarks/>
    public void SearchRowsAsync(System.Guid sessionId, System.Guid instanceID, System.Guid sectionId, string filter) {
        this.SearchRowsAsync(sessionId, instanceID, sectionId, filter, null);
    }
    
    /// <remarks/>
    public void SearchRowsAsync(System.Guid sessionId, System.Guid instanceID, System.Guid sectionId, string filter, object userState) {
        if ((this.SearchRowsOperationCompleted == null)) {
            this.SearchRowsOperationCompleted = new System.Threading.SendOrPostCallback(this.OnSearchRowsOperationCompleted);
        }
        this.InvokeAsync("SearchRows", new object[] {
                    sessionId,
                    instanceID,
                    sectionId,
                    filter}, this.SearchRowsOperationCompleted, userState);
    }
    
    private void OnSearchRowsOperationCompleted(object arg) {
        if ((this.SearchRowsCompleted != null)) {
            System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
            this.SearchRowsCompleted(this, new SearchRowsCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
        }
    }
    
    /// <remarks/>
    [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://schemas.docsvision.com/Platform/2009-02-03/StorageServer/SearchWordResolve" +
        "", RequestNamespace="http://schemas.docsvision.com/Platform/2009-02-03/StorageServer/", ResponseNamespace="http://schemas.docsvision.com/Platform/2009-02-03/StorageServer/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
    [return: System.Xml.Serialization.XmlElementAttribute("result")]
    public string SearchWordResolve(System.Guid sessionId, string contextWord) {
        object[] results = this.Invoke("SearchWordResolve", new object[] {
                    sessionId,
                    contextWord});
        return ((string)(results[0]));
    }
    
    /// <remarks/>
    public System.IAsyncResult BeginSearchWordResolve(System.Guid sessionId, string contextWord, System.AsyncCallback callback, object asyncState) {
        return this.BeginInvoke("SearchWordResolve", new object[] {
                    sessionId,
                    contextWord}, callback, asyncState);
    }
    
    /// <remarks/>
    public string EndSearchWordResolve(System.IAsyncResult asyncResult) {
        object[] results = this.EndInvoke(asyncResult);
        return ((string)(results[0]));
    }
    
    /// <remarks/>
    public void SearchWordResolveAsync(System.Guid sessionId, string contextWord) {
        this.SearchWordResolveAsync(sessionId, contextWord, null);
    }
    
    /// <remarks/>
    public void SearchWordResolveAsync(System.Guid sessionId, string contextWord, object userState) {
        if ((this.SearchWordResolveOperationCompleted == null)) {
            this.SearchWordResolveOperationCompleted = new System.Threading.SendOrPostCallback(this.OnSearchWordResolveOperationCompleted);
        }
        this.InvokeAsync("SearchWordResolve", new object[] {
                    sessionId,
                    contextWord}, this.SearchWordResolveOperationCompleted, userState);
    }
    
    private void OnSearchWordResolveOperationCompleted(object arg) {
        if ((this.SearchWordResolveCompleted != null)) {
            System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
            this.SearchWordResolveCompleted(this, new SearchWordResolveCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
        }
    }
    
    /// <remarks/>
    [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://schemas.docsvision.com/Platform/2009-02-03/StorageServer/SecurityCheckAcce" +
        "ss", RequestNamespace="http://schemas.docsvision.com/Platform/2009-02-03/StorageServer/", ResponseNamespace="http://schemas.docsvision.com/Platform/2009-02-03/StorageServer/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
    [return: System.Xml.Serialization.XmlElementAttribute("granted")]
    public bool SecurityCheckAccess(System.Guid sessionId, SecureObjectEnum objectType, System.Guid objectId, System.Guid locationId, uint accessMask) {
        object[] results = this.Invoke("SecurityCheckAccess", new object[] {
                    sessionId,
                    objectType,
                    objectId,
                    locationId,
                    accessMask});
        return ((bool)(results[0]));
    }
    
    /// <remarks/>
    public System.IAsyncResult BeginSecurityCheckAccess(System.Guid sessionId, SecureObjectEnum objectType, System.Guid objectId, System.Guid locationId, uint accessMask, System.AsyncCallback callback, object asyncState) {
        return this.BeginInvoke("SecurityCheckAccess", new object[] {
                    sessionId,
                    objectType,
                    objectId,
                    locationId,
                    accessMask}, callback, asyncState);
    }
    
    /// <remarks/>
    public bool EndSecurityCheckAccess(System.IAsyncResult asyncResult) {
        object[] results = this.EndInvoke(asyncResult);
        return ((bool)(results[0]));
    }
    
    /// <remarks/>
    public void SecurityCheckAccessAsync(System.Guid sessionId, SecureObjectEnum objectType, System.Guid objectId, System.Guid locationId, uint accessMask) {
        this.SecurityCheckAccessAsync(sessionId, objectType, objectId, locationId, accessMask, null);
    }
    
    /// <remarks/>
    public void SecurityCheckAccessAsync(System.Guid sessionId, SecureObjectEnum objectType, System.Guid objectId, System.Guid locationId, uint accessMask, object userState) {
        if ((this.SecurityCheckAccessOperationCompleted == null)) {
            this.SecurityCheckAccessOperationCompleted = new System.Threading.SendOrPostCallback(this.OnSecurityCheckAccessOperationCompleted);
        }
        this.InvokeAsync("SecurityCheckAccess", new object[] {
                    sessionId,
                    objectType,
                    objectId,
                    locationId,
                    accessMask}, this.SecurityCheckAccessOperationCompleted, userState);
    }
    
    private void OnSecurityCheckAccessOperationCompleted(object arg) {
        if ((this.SecurityCheckAccessCompleted != null)) {
            System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
            this.SecurityCheckAccessCompleted(this, new SecurityCheckAccessCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
        }
    }
    
    /// <remarks/>
    [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://schemas.docsvision.com/Platform/2009-02-03/StorageServer/SecurityCheckAcce" +
        "ssEx", RequestNamespace="http://schemas.docsvision.com/Platform/2009-02-03/StorageServer/", ResponseNamespace="http://schemas.docsvision.com/Platform/2009-02-03/StorageServer/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
    [return: System.Xml.Serialization.XmlElementAttribute("granted")]
    public bool SecurityCheckAccessEx(System.Guid sessionId, SecureObjectEnum objectType, System.Guid objectId, System.Guid locationId, System.Guid propId, uint accessMask, out uint grantedMask) {
        object[] results = this.Invoke("SecurityCheckAccessEx", new object[] {
                    sessionId,
                    objectType,
                    objectId,
                    locationId,
                    propId,
                    accessMask});
        grantedMask = ((uint)(results[1]));
        return ((bool)(results[0]));
    }
    
    /// <remarks/>
    public System.IAsyncResult BeginSecurityCheckAccessEx(System.Guid sessionId, SecureObjectEnum objectType, System.Guid objectId, System.Guid locationId, System.Guid propId, uint accessMask, System.AsyncCallback callback, object asyncState) {
        return this.BeginInvoke("SecurityCheckAccessEx", new object[] {
                    sessionId,
                    objectType,
                    objectId,
                    locationId,
                    propId,
                    accessMask}, callback, asyncState);
    }
    
    /// <remarks/>
    public bool EndSecurityCheckAccessEx(System.IAsyncResult asyncResult, out uint grantedMask) {
        object[] results = this.EndInvoke(asyncResult);
        grantedMask = ((uint)(results[1]));
        return ((bool)(results[0]));
    }
    
    /// <remarks/>
    public void SecurityCheckAccessExAsync(System.Guid sessionId, SecureObjectEnum objectType, System.Guid objectId, System.Guid locationId, System.Guid propId, uint accessMask) {
        this.SecurityCheckAccessExAsync(sessionId, objectType, objectId, locationId, propId, accessMask, null);
    }
    
    /// <remarks/>
    public void SecurityCheckAccessExAsync(System.Guid sessionId, SecureObjectEnum objectType, System.Guid objectId, System.Guid locationId, System.Guid propId, uint accessMask, object userState) {
        if ((this.SecurityCheckAccessExOperationCompleted == null)) {
            this.SecurityCheckAccessExOperationCompleted = new System.Threading.SendOrPostCallback(this.OnSecurityCheckAccessExOperationCompleted);
        }
        this.InvokeAsync("SecurityCheckAccessEx", new object[] {
                    sessionId,
                    objectType,
                    objectId,
                    locationId,
                    propId,
                    accessMask}, this.SecurityCheckAccessExOperationCompleted, userState);
    }
    
    private void OnSecurityCheckAccessExOperationCompleted(object arg) {
        if ((this.SecurityCheckAccessExCompleted != null)) {
            System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
            this.SecurityCheckAccessExCompleted(this, new SecurityCheckAccessExCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
        }
    }
    
    /// <remarks/>
    [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://schemas.docsvision.com/Platform/2009-02-03/StorageServer/SecurityGetObject" +
        "Descriptor", RequestNamespace="http://schemas.docsvision.com/Platform/2009-02-03/StorageServer/", ResponseNamespace="http://schemas.docsvision.com/Platform/2009-02-03/StorageServer/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
    [return: System.Xml.Serialization.XmlElementAttribute("descBytes", DataType="base64Binary")]
    public byte[] SecurityGetObjectDescriptor(System.Guid sessionId, SecureObjectEnum objectType, System.Guid objectId, System.Guid locationId) {
        object[] results = this.Invoke("SecurityGetObjectDescriptor", new object[] {
                    sessionId,
                    objectType,
                    objectId,
                    locationId});
        return ((byte[])(results[0]));
    }
    
    /// <remarks/>
    public System.IAsyncResult BeginSecurityGetObjectDescriptor(System.Guid sessionId, SecureObjectEnum objectType, System.Guid objectId, System.Guid locationId, System.AsyncCallback callback, object asyncState) {
        return this.BeginInvoke("SecurityGetObjectDescriptor", new object[] {
                    sessionId,
                    objectType,
                    objectId,
                    locationId}, callback, asyncState);
    }
    
    /// <remarks/>
    public byte[] EndSecurityGetObjectDescriptor(System.IAsyncResult asyncResult) {
        object[] results = this.EndInvoke(asyncResult);
        return ((byte[])(results[0]));
    }
    
    /// <remarks/>
    public void SecurityGetObjectDescriptorAsync(System.Guid sessionId, SecureObjectEnum objectType, System.Guid objectId, System.Guid locationId) {
        this.SecurityGetObjectDescriptorAsync(sessionId, objectType, objectId, locationId, null);
    }
    
    /// <remarks/>
    public void SecurityGetObjectDescriptorAsync(System.Guid sessionId, SecureObjectEnum objectType, System.Guid objectId, System.Guid locationId, object userState) {
        if ((this.SecurityGetObjectDescriptorOperationCompleted == null)) {
            this.SecurityGetObjectDescriptorOperationCompleted = new System.Threading.SendOrPostCallback(this.OnSecurityGetObjectDescriptorOperationCompleted);
        }
        this.InvokeAsync("SecurityGetObjectDescriptor", new object[] {
                    sessionId,
                    objectType,
                    objectId,
                    locationId}, this.SecurityGetObjectDescriptorOperationCompleted, userState);
    }
    
    private void OnSecurityGetObjectDescriptorOperationCompleted(object arg) {
        if ((this.SecurityGetObjectDescriptorCompleted != null)) {
            System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
            this.SecurityGetObjectDescriptorCompleted(this, new SecurityGetObjectDescriptorCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
        }
    }
    
    /// <remarks/>
    [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://schemas.docsvision.com/Platform/2009-02-03/StorageServer/SecurityGetObject" +
        "DescriptorEx", RequestNamespace="http://schemas.docsvision.com/Platform/2009-02-03/StorageServer/", ResponseNamespace="http://schemas.docsvision.com/Platform/2009-02-03/StorageServer/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
    [return: System.Xml.Serialization.XmlElementAttribute("descriptor", DataType="base64Binary")]
    public byte[] SecurityGetObjectDescriptorEx(System.Guid sessionId, SecureObjectEnum objectType, System.Guid objectId, System.Guid locationId, int securityInfo) {
        object[] results = this.Invoke("SecurityGetObjectDescriptorEx", new object[] {
                    sessionId,
                    objectType,
                    objectId,
                    locationId,
                    securityInfo});
        return ((byte[])(results[0]));
    }
    
    /// <remarks/>
    public System.IAsyncResult BeginSecurityGetObjectDescriptorEx(System.Guid sessionId, SecureObjectEnum objectType, System.Guid objectId, System.Guid locationId, int securityInfo, System.AsyncCallback callback, object asyncState) {
        return this.BeginInvoke("SecurityGetObjectDescriptorEx", new object[] {
                    sessionId,
                    objectType,
                    objectId,
                    locationId,
                    securityInfo}, callback, asyncState);
    }
    
    /// <remarks/>
    public byte[] EndSecurityGetObjectDescriptorEx(System.IAsyncResult asyncResult) {
        object[] results = this.EndInvoke(asyncResult);
        return ((byte[])(results[0]));
    }
    
    /// <remarks/>
    public void SecurityGetObjectDescriptorExAsync(System.Guid sessionId, SecureObjectEnum objectType, System.Guid objectId, System.Guid locationId, int securityInfo) {
        this.SecurityGetObjectDescriptorExAsync(sessionId, objectType, objectId, locationId, securityInfo, null);
    }
    
    /// <remarks/>
    public void SecurityGetObjectDescriptorExAsync(System.Guid sessionId, SecureObjectEnum objectType, System.Guid objectId, System.Guid locationId, int securityInfo, object userState) {
        if ((this.SecurityGetObjectDescriptorExOperationCompleted == null)) {
            this.SecurityGetObjectDescriptorExOperationCompleted = new System.Threading.SendOrPostCallback(this.OnSecurityGetObjectDescriptorExOperationCompleted);
        }
        this.InvokeAsync("SecurityGetObjectDescriptorEx", new object[] {
                    sessionId,
                    objectType,
                    objectId,
                    locationId,
                    securityInfo}, this.SecurityGetObjectDescriptorExOperationCompleted, userState);
    }
    
    private void OnSecurityGetObjectDescriptorExOperationCompleted(object arg) {
        if ((this.SecurityGetObjectDescriptorExCompleted != null)) {
            System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
            this.SecurityGetObjectDescriptorExCompleted(this, new SecurityGetObjectDescriptorExCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
        }
    }
    
    /// <remarks/>
    [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://schemas.docsvision.com/Platform/2009-02-03/StorageServer/SecurityGetSchema" +
        "", RequestNamespace="http://schemas.docsvision.com/Platform/2009-02-03/StorageServer/", ResponseNamespace="http://schemas.docsvision.com/Platform/2009-02-03/StorageServer/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
    [return: System.Xml.Serialization.XmlElementAttribute("securitySchema")]
    public string SecurityGetSchema(System.Guid sessionId) {
        object[] results = this.Invoke("SecurityGetSchema", new object[] {
                    sessionId});
        return ((string)(results[0]));
    }
    
    /// <remarks/>
    public System.IAsyncResult BeginSecurityGetSchema(System.Guid sessionId, System.AsyncCallback callback, object asyncState) {
        return this.BeginInvoke("SecurityGetSchema", new object[] {
                    sessionId}, callback, asyncState);
    }
    
    /// <remarks/>
    public string EndSecurityGetSchema(System.IAsyncResult asyncResult) {
        object[] results = this.EndInvoke(asyncResult);
        return ((string)(results[0]));
    }
    
    /// <remarks/>
    public void SecurityGetSchemaAsync(System.Guid sessionId) {
        this.SecurityGetSchemaAsync(sessionId, null);
    }
    
    /// <remarks/>
    public void SecurityGetSchemaAsync(System.Guid sessionId, object userState) {
        if ((this.SecurityGetSchemaOperationCompleted == null)) {
            this.SecurityGetSchemaOperationCompleted = new System.Threading.SendOrPostCallback(this.OnSecurityGetSchemaOperationCompleted);
        }
        this.InvokeAsync("SecurityGetSchema", new object[] {
                    sessionId}, this.SecurityGetSchemaOperationCompleted, userState);
    }
    
    private void OnSecurityGetSchemaOperationCompleted(object arg) {
        if ((this.SecurityGetSchemaCompleted != null)) {
            System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
            this.SecurityGetSchemaCompleted(this, new SecurityGetSchemaCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
        }
    }
    
    /// <remarks/>
    [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://schemas.docsvision.com/Platform/2009-02-03/StorageServer/SecurityIsAdmin", RequestNamespace="http://schemas.docsvision.com/Platform/2009-02-03/StorageServer/", ResponseNamespace="http://schemas.docsvision.com/Platform/2009-02-03/StorageServer/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
    [return: System.Xml.Serialization.XmlElementAttribute("isAdmin")]
    public bool SecurityIsAdmin(System.Guid sessionId) {
        object[] results = this.Invoke("SecurityIsAdmin", new object[] {
                    sessionId});
        return ((bool)(results[0]));
    }
    
    /// <remarks/>
    public System.IAsyncResult BeginSecurityIsAdmin(System.Guid sessionId, System.AsyncCallback callback, object asyncState) {
        return this.BeginInvoke("SecurityIsAdmin", new object[] {
                    sessionId}, callback, asyncState);
    }
    
    /// <remarks/>
    public bool EndSecurityIsAdmin(System.IAsyncResult asyncResult) {
        object[] results = this.EndInvoke(asyncResult);
        return ((bool)(results[0]));
    }
    
    /// <remarks/>
    public void SecurityIsAdminAsync(System.Guid sessionId) {
        this.SecurityIsAdminAsync(sessionId, null);
    }
    
    /// <remarks/>
    public void SecurityIsAdminAsync(System.Guid sessionId, object userState) {
        if ((this.SecurityIsAdminOperationCompleted == null)) {
            this.SecurityIsAdminOperationCompleted = new System.Threading.SendOrPostCallback(this.OnSecurityIsAdminOperationCompleted);
        }
        this.InvokeAsync("SecurityIsAdmin", new object[] {
                    sessionId}, this.SecurityIsAdminOperationCompleted, userState);
    }
    
    private void OnSecurityIsAdminOperationCompleted(object arg) {
        if ((this.SecurityIsAdminCompleted != null)) {
            System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
            this.SecurityIsAdminCompleted(this, new SecurityIsAdminCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
        }
    }
    
    /// <remarks/>
    [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://schemas.docsvision.com/Platform/2009-02-03/StorageServer/SecuritySetObject" +
        "Descriptor", RequestNamespace="http://schemas.docsvision.com/Platform/2009-02-03/StorageServer/", ResponseNamespace="http://schemas.docsvision.com/Platform/2009-02-03/StorageServer/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
    [return: System.Xml.Serialization.XmlElementAttribute("descriptorId")]
    public System.Guid SecuritySetObjectDescriptor(System.Guid sessionId, SecureObjectEnum objectType, System.Guid objectId, System.Guid locationId, [System.Xml.Serialization.XmlElementAttribute(DataType="base64Binary")] byte[] descriptor, [System.Xml.Serialization.XmlElementAttribute(DataType="base64Binary")] out byte[] newDescBytes) {
        object[] results = this.Invoke("SecuritySetObjectDescriptor", new object[] {
                    sessionId,
                    objectType,
                    objectId,
                    locationId,
                    descriptor});
        newDescBytes = ((byte[])(results[1]));
        return ((System.Guid)(results[0]));
    }
    
    /// <remarks/>
    public System.IAsyncResult BeginSecuritySetObjectDescriptor(System.Guid sessionId, SecureObjectEnum objectType, System.Guid objectId, System.Guid locationId, byte[] descriptor, System.AsyncCallback callback, object asyncState) {
        return this.BeginInvoke("SecuritySetObjectDescriptor", new object[] {
                    sessionId,
                    objectType,
                    objectId,
                    locationId,
                    descriptor}, callback, asyncState);
    }
    
    /// <remarks/>
    public System.Guid EndSecuritySetObjectDescriptor(System.IAsyncResult asyncResult, out byte[] newDescBytes) {
        object[] results = this.EndInvoke(asyncResult);
        newDescBytes = ((byte[])(results[1]));
        return ((System.Guid)(results[0]));
    }
    
    /// <remarks/>
    public void SecuritySetObjectDescriptorAsync(System.Guid sessionId, SecureObjectEnum objectType, System.Guid objectId, System.Guid locationId, byte[] descriptor) {
        this.SecuritySetObjectDescriptorAsync(sessionId, objectType, objectId, locationId, descriptor, null);
    }
    
    /// <remarks/>
    public void SecuritySetObjectDescriptorAsync(System.Guid sessionId, SecureObjectEnum objectType, System.Guid objectId, System.Guid locationId, byte[] descriptor, object userState) {
        if ((this.SecuritySetObjectDescriptorOperationCompleted == null)) {
            this.SecuritySetObjectDescriptorOperationCompleted = new System.Threading.SendOrPostCallback(this.OnSecuritySetObjectDescriptorOperationCompleted);
        }
        this.InvokeAsync("SecuritySetObjectDescriptor", new object[] {
                    sessionId,
                    objectType,
                    objectId,
                    locationId,
                    descriptor}, this.SecuritySetObjectDescriptorOperationCompleted, userState);
    }
    
    private void OnSecuritySetObjectDescriptorOperationCompleted(object arg) {
        if ((this.SecuritySetObjectDescriptorCompleted != null)) {
            System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
            this.SecuritySetObjectDescriptorCompleted(this, new SecuritySetObjectDescriptorCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
        }
    }
    
    /// <remarks/>
    [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://schemas.docsvision.com/Platform/2009-02-03/StorageServer/SecuritySetObject" +
        "DescriptorEx", RequestNamespace="http://schemas.docsvision.com/Platform/2009-02-03/StorageServer/", ResponseNamespace="http://schemas.docsvision.com/Platform/2009-02-03/StorageServer/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
    [return: System.Xml.Serialization.XmlElementAttribute("descriptorId")]
    public System.Guid SecuritySetObjectDescriptorEx(System.Guid sessionId, SecureObjectEnum objectType, System.Guid objectId, System.Guid locationId, [System.Xml.Serialization.XmlElementAttribute(DataType="base64Binary")] byte[] descBytes, int securityInfo, [System.Xml.Serialization.XmlElementAttribute(DataType="base64Binary")] out byte[] newDescBytes) {
        object[] results = this.Invoke("SecuritySetObjectDescriptorEx", new object[] {
                    sessionId,
                    objectType,
                    objectId,
                    locationId,
                    descBytes,
                    securityInfo});
        newDescBytes = ((byte[])(results[1]));
        return ((System.Guid)(results[0]));
    }
    
    /// <remarks/>
    public System.IAsyncResult BeginSecuritySetObjectDescriptorEx(System.Guid sessionId, SecureObjectEnum objectType, System.Guid objectId, System.Guid locationId, byte[] descBytes, int securityInfo, System.AsyncCallback callback, object asyncState) {
        return this.BeginInvoke("SecuritySetObjectDescriptorEx", new object[] {
                    sessionId,
                    objectType,
                    objectId,
                    locationId,
                    descBytes,
                    securityInfo}, callback, asyncState);
    }
    
    /// <remarks/>
    public System.Guid EndSecuritySetObjectDescriptorEx(System.IAsyncResult asyncResult, out byte[] newDescBytes) {
        object[] results = this.EndInvoke(asyncResult);
        newDescBytes = ((byte[])(results[1]));
        return ((System.Guid)(results[0]));
    }
    
    /// <remarks/>
    public void SecuritySetObjectDescriptorExAsync(System.Guid sessionId, SecureObjectEnum objectType, System.Guid objectId, System.Guid locationId, byte[] descBytes, int securityInfo) {
        this.SecuritySetObjectDescriptorExAsync(sessionId, objectType, objectId, locationId, descBytes, securityInfo, null);
    }
    
    /// <remarks/>
    public void SecuritySetObjectDescriptorExAsync(System.Guid sessionId, SecureObjectEnum objectType, System.Guid objectId, System.Guid locationId, byte[] descBytes, int securityInfo, object userState) {
        if ((this.SecuritySetObjectDescriptorExOperationCompleted == null)) {
            this.SecuritySetObjectDescriptorExOperationCompleted = new System.Threading.SendOrPostCallback(this.OnSecuritySetObjectDescriptorExOperationCompleted);
        }
        this.InvokeAsync("SecuritySetObjectDescriptorEx", new object[] {
                    sessionId,
                    objectType,
                    objectId,
                    locationId,
                    descBytes,
                    securityInfo}, this.SecuritySetObjectDescriptorExOperationCompleted, userState);
    }
    
    private void OnSecuritySetObjectDescriptorExOperationCompleted(object arg) {
        if ((this.SecuritySetObjectDescriptorExCompleted != null)) {
            System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
            this.SecuritySetObjectDescriptorExCompleted(this, new SecuritySetObjectDescriptorExCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
        }
    }
    
    /// <remarks/>
    [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://schemas.docsvision.com/Platform/2009-02-03/StorageServer/SessionGetList", RequestNamespace="http://schemas.docsvision.com/Platform/2009-02-03/StorageServer/", ResponseNamespace="http://schemas.docsvision.com/Platform/2009-02-03/StorageServer/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
    [return: System.Xml.Serialization.XmlElementAttribute("sessions")]
    public string SessionGetList(string baseName) {
        object[] results = this.Invoke("SessionGetList", new object[] {
                    baseName});
        return ((string)(results[0]));
    }
    
    /// <remarks/>
    public System.IAsyncResult BeginSessionGetList(string baseName, System.AsyncCallback callback, object asyncState) {
        return this.BeginInvoke("SessionGetList", new object[] {
                    baseName}, callback, asyncState);
    }
    
    /// <remarks/>
    public string EndSessionGetList(System.IAsyncResult asyncResult) {
        object[] results = this.EndInvoke(asyncResult);
        return ((string)(results[0]));
    }
    
    /// <remarks/>
    public void SessionGetListAsync(string baseName) {
        this.SessionGetListAsync(baseName, null);
    }
    
    /// <remarks/>
    public void SessionGetListAsync(string baseName, object userState) {
        if ((this.SessionGetListOperationCompleted == null)) {
            this.SessionGetListOperationCompleted = new System.Threading.SendOrPostCallback(this.OnSessionGetListOperationCompleted);
        }
        this.InvokeAsync("SessionGetList", new object[] {
                    baseName}, this.SessionGetListOperationCompleted, userState);
    }
    
    private void OnSessionGetListOperationCompleted(object arg) {
        if ((this.SessionGetListCompleted != null)) {
            System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
            this.SessionGetListCompleted(this, new SessionGetListCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
        }
    }
    
    /// <remarks/>
    [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://schemas.docsvision.com/Platform/2009-02-03/StorageServer/SessionGetSetting" +
        "s", RequestNamespace="http://schemas.docsvision.com/Platform/2009-02-03/StorageServer/", ResponseNamespace="http://schemas.docsvision.com/Platform/2009-02-03/StorageServer/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
    [return: System.Xml.Serialization.XmlElementAttribute("settings")]
    public string SessionGetSettings(System.Guid sessionId) {
        object[] results = this.Invoke("SessionGetSettings", new object[] {
                    sessionId});
        return ((string)(results[0]));
    }
    
    /// <remarks/>
    public System.IAsyncResult BeginSessionGetSettings(System.Guid sessionId, System.AsyncCallback callback, object asyncState) {
        return this.BeginInvoke("SessionGetSettings", new object[] {
                    sessionId}, callback, asyncState);
    }
    
    /// <remarks/>
    public string EndSessionGetSettings(System.IAsyncResult asyncResult) {
        object[] results = this.EndInvoke(asyncResult);
        return ((string)(results[0]));
    }
    
    /// <remarks/>
    public void SessionGetSettingsAsync(System.Guid sessionId) {
        this.SessionGetSettingsAsync(sessionId, null);
    }
    
    /// <remarks/>
    public void SessionGetSettingsAsync(System.Guid sessionId, object userState) {
        if ((this.SessionGetSettingsOperationCompleted == null)) {
            this.SessionGetSettingsOperationCompleted = new System.Threading.SendOrPostCallback(this.OnSessionGetSettingsOperationCompleted);
        }
        this.InvokeAsync("SessionGetSettings", new object[] {
                    sessionId}, this.SessionGetSettingsOperationCompleted, userState);
    }
    
    private void OnSessionGetSettingsOperationCompleted(object arg) {
        if ((this.SessionGetSettingsCompleted != null)) {
            System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
            this.SessionGetSettingsCompleted(this, new SessionGetSettingsCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
        }
    }
    
    /// <remarks/>
    [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://schemas.docsvision.com/Platform/2009-02-03/StorageServer/SessionKeepAlive", RequestNamespace="http://schemas.docsvision.com/Platform/2009-02-03/StorageServer/", ResponseNamespace="http://schemas.docsvision.com/Platform/2009-02-03/StorageServer/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
    public void SessionKeepAlive(System.Guid sessionId) {
        this.Invoke("SessionKeepAlive", new object[] {
                    sessionId});
    }
    
    /// <remarks/>
    public System.IAsyncResult BeginSessionKeepAlive(System.Guid sessionId, System.AsyncCallback callback, object asyncState) {
        return this.BeginInvoke("SessionKeepAlive", new object[] {
                    sessionId}, callback, asyncState);
    }
    
    /// <remarks/>
    public void EndSessionKeepAlive(System.IAsyncResult asyncResult) {
        this.EndInvoke(asyncResult);
    }
    
    /// <remarks/>
    public void SessionKeepAliveAsync(System.Guid sessionId) {
        this.SessionKeepAliveAsync(sessionId, null);
    }
    
    /// <remarks/>
    public void SessionKeepAliveAsync(System.Guid sessionId, object userState) {
        if ((this.SessionKeepAliveOperationCompleted == null)) {
            this.SessionKeepAliveOperationCompleted = new System.Threading.SendOrPostCallback(this.OnSessionKeepAliveOperationCompleted);
        }
        this.InvokeAsync("SessionKeepAlive", new object[] {
                    sessionId}, this.SessionKeepAliveOperationCompleted, userState);
    }
    
    private void OnSessionKeepAliveOperationCompleted(object arg) {
        if ((this.SessionKeepAliveCompleted != null)) {
            System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
            this.SessionKeepAliveCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
        }
    }
    
    /// <remarks/>
    [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://schemas.docsvision.com/Platform/2009-02-03/StorageServer/SessionLogin", RequestNamespace="http://schemas.docsvision.com/Platform/2009-02-03/StorageServer/", ResponseNamespace="http://schemas.docsvision.com/Platform/2009-02-03/StorageServer/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
    [return: System.Xml.Serialization.XmlElementAttribute("sessionId")]
    public System.Guid SessionLogin(string baseName, string sessionSettings, out string userSettings) {
        object[] results = this.Invoke("SessionLogin", new object[] {
                    baseName,
                    sessionSettings});
        userSettings = ((string)(results[1]));
        return ((System.Guid)(results[0]));
    }
    
    /// <remarks/>
    public System.IAsyncResult BeginSessionLogin(string baseName, string sessionSettings, System.AsyncCallback callback, object asyncState) {
        return this.BeginInvoke("SessionLogin", new object[] {
                    baseName,
                    sessionSettings}, callback, asyncState);
    }
    
    /// <remarks/>
    public System.Guid EndSessionLogin(System.IAsyncResult asyncResult, out string userSettings) {
        object[] results = this.EndInvoke(asyncResult);
        userSettings = ((string)(results[1]));
        return ((System.Guid)(results[0]));
    }
    
    /// <remarks/>
    public void SessionLoginAsync(string baseName, string sessionSettings) {
        this.SessionLoginAsync(baseName, sessionSettings, null);
    }
    
    /// <remarks/>
    public void SessionLoginAsync(string baseName, string sessionSettings, object userState) {
        if ((this.SessionLoginOperationCompleted == null)) {
            this.SessionLoginOperationCompleted = new System.Threading.SendOrPostCallback(this.OnSessionLoginOperationCompleted);
        }
        this.InvokeAsync("SessionLogin", new object[] {
                    baseName,
                    sessionSettings}, this.SessionLoginOperationCompleted, userState);
    }
    
    private void OnSessionLoginOperationCompleted(object arg) {
        if ((this.SessionLoginCompleted != null)) {
            System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
            this.SessionLoginCompleted(this, new SessionLoginCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
        }
    }
    
    /// <remarks/>
    [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://schemas.docsvision.com/Platform/2009-02-03/StorageServer/SessionLoginEx", RequestNamespace="http://schemas.docsvision.com/Platform/2009-02-03/StorageServer/", ResponseNamespace="http://schemas.docsvision.com/Platform/2009-02-03/StorageServer/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
    [return: System.Xml.Serialization.XmlElementAttribute("sessionId")]
    public System.Guid SessionLoginEx(string baseName, string sessionSettings, int flags, out CursorInfo sessionLoginResponse) {
        object[] results = this.Invoke("SessionLoginEx", new object[] {
                    baseName,
                    sessionSettings,
                    flags});
        sessionLoginResponse = ((CursorInfo)(results[1]));
        return ((System.Guid)(results[0]));
    }
    
    /// <remarks/>
    public System.IAsyncResult BeginSessionLoginEx(string baseName, string sessionSettings, int flags, System.AsyncCallback callback, object asyncState) {
        return this.BeginInvoke("SessionLoginEx", new object[] {
                    baseName,
                    sessionSettings,
                    flags}, callback, asyncState);
    }
    
    /// <remarks/>
    public System.Guid EndSessionLoginEx(System.IAsyncResult asyncResult, out CursorInfo sessionLoginResponse) {
        object[] results = this.EndInvoke(asyncResult);
        sessionLoginResponse = ((CursorInfo)(results[1]));
        return ((System.Guid)(results[0]));
    }
    
    /// <remarks/>
    public void SessionLoginExAsync(string baseName, string sessionSettings, int flags) {
        this.SessionLoginExAsync(baseName, sessionSettings, flags, null);
    }
    
    /// <remarks/>
    public void SessionLoginExAsync(string baseName, string sessionSettings, int flags, object userState) {
        if ((this.SessionLoginExOperationCompleted == null)) {
            this.SessionLoginExOperationCompleted = new System.Threading.SendOrPostCallback(this.OnSessionLoginExOperationCompleted);
        }
        this.InvokeAsync("SessionLoginEx", new object[] {
                    baseName,
                    sessionSettings,
                    flags}, this.SessionLoginExOperationCompleted, userState);
    }
    
    private void OnSessionLoginExOperationCompleted(object arg) {
        if ((this.SessionLoginExCompleted != null)) {
            System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
            this.SessionLoginExCompleted(this, new SessionLoginExCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
        }
    }
    
    /// <remarks/>
    [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://schemas.docsvision.com/Platform/2009-02-03/StorageServer/SessionLoginCusto" +
        "m", RequestNamespace="http://schemas.docsvision.com/Platform/2009-02-03/StorageServer/", ResponseNamespace="http://schemas.docsvision.com/Platform/2009-02-03/StorageServer/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
    [return: System.Xml.Serialization.XmlElementAttribute("sessionID")]
    public System.Guid SessionLoginCustom(string baseName, string sessionSettings, int flags, System.Guid customEmployeeID, out CursorInfo sessionLoginResponse) {
        object[] results = this.Invoke("SessionLoginCustom", new object[] {
                    baseName,
                    sessionSettings,
                    flags,
                    customEmployeeID});
        sessionLoginResponse = ((CursorInfo)(results[1]));
        return ((System.Guid)(results[0]));
    }
    
    /// <remarks/>
    public System.IAsyncResult BeginSessionLoginCustom(string baseName, string sessionSettings, int flags, System.Guid customEmployeeID, System.AsyncCallback callback, object asyncState) {
        return this.BeginInvoke("SessionLoginCustom", new object[] {
                    baseName,
                    sessionSettings,
                    flags,
                    customEmployeeID}, callback, asyncState);
    }
    
    /// <remarks/>
    public System.Guid EndSessionLoginCustom(System.IAsyncResult asyncResult, out CursorInfo sessionLoginResponse) {
        object[] results = this.EndInvoke(asyncResult);
        sessionLoginResponse = ((CursorInfo)(results[1]));
        return ((System.Guid)(results[0]));
    }
    
    /// <remarks/>
    public void SessionLoginCustomAsync(string baseName, string sessionSettings, int flags, System.Guid customEmployeeID) {
        this.SessionLoginCustomAsync(baseName, sessionSettings, flags, customEmployeeID, null);
    }
    
    /// <remarks/>
    public void SessionLoginCustomAsync(string baseName, string sessionSettings, int flags, System.Guid customEmployeeID, object userState) {
        if ((this.SessionLoginCustomOperationCompleted == null)) {
            this.SessionLoginCustomOperationCompleted = new System.Threading.SendOrPostCallback(this.OnSessionLoginCustomOperationCompleted);
        }
        this.InvokeAsync("SessionLoginCustom", new object[] {
                    baseName,
                    sessionSettings,
                    flags,
                    customEmployeeID}, this.SessionLoginCustomOperationCompleted, userState);
    }
    
    private void OnSessionLoginCustomOperationCompleted(object arg) {
        if ((this.SessionLoginCustomCompleted != null)) {
            System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
            this.SessionLoginCustomCompleted(this, new SessionLoginCustomCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
        }
    }
    
    /// <remarks/>
    [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://schemas.docsvision.com/Platform/2009-02-03/StorageServer/SessionLogout", RequestNamespace="http://schemas.docsvision.com/Platform/2009-02-03/StorageServer/", ResponseNamespace="http://schemas.docsvision.com/Platform/2009-02-03/StorageServer/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
    public void SessionLogout(System.Guid sessionId) {
        this.Invoke("SessionLogout", new object[] {
                    sessionId});
    }
    
    /// <remarks/>
    public System.IAsyncResult BeginSessionLogout(System.Guid sessionId, System.AsyncCallback callback, object asyncState) {
        return this.BeginInvoke("SessionLogout", new object[] {
                    sessionId}, callback, asyncState);
    }
    
    /// <remarks/>
    public void EndSessionLogout(System.IAsyncResult asyncResult) {
        this.EndInvoke(asyncResult);
    }
    
    /// <remarks/>
    public void SessionLogoutAsync(System.Guid sessionId) {
        this.SessionLogoutAsync(sessionId, null);
    }
    
    /// <remarks/>
    public void SessionLogoutAsync(System.Guid sessionId, object userState) {
        if ((this.SessionLogoutOperationCompleted == null)) {
            this.SessionLogoutOperationCompleted = new System.Threading.SendOrPostCallback(this.OnSessionLogoutOperationCompleted);
        }
        this.InvokeAsync("SessionLogout", new object[] {
                    sessionId}, this.SessionLogoutOperationCompleted, userState);
    }
    
    private void OnSessionLogoutOperationCompleted(object arg) {
        if ((this.SessionLogoutCompleted != null)) {
            System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
            this.SessionLogoutCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
        }
    }
    
    /// <remarks/>
    [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://schemas.docsvision.com/Platform/2009-02-03/StorageServer/SessionSetSetting" +
        "s", RequestNamespace="http://schemas.docsvision.com/Platform/2009-02-03/StorageServer/", ResponseNamespace="http://schemas.docsvision.com/Platform/2009-02-03/StorageServer/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
    public void SessionSetSettings(System.Guid sessionId, string settings) {
        this.Invoke("SessionSetSettings", new object[] {
                    sessionId,
                    settings});
    }
    
    /// <remarks/>
    public System.IAsyncResult BeginSessionSetSettings(System.Guid sessionId, string settings, System.AsyncCallback callback, object asyncState) {
        return this.BeginInvoke("SessionSetSettings", new object[] {
                    sessionId,
                    settings}, callback, asyncState);
    }
    
    /// <remarks/>
    public void EndSessionSetSettings(System.IAsyncResult asyncResult) {
        this.EndInvoke(asyncResult);
    }
    
    /// <remarks/>
    public void SessionSetSettingsAsync(System.Guid sessionId, string settings) {
        this.SessionSetSettingsAsync(sessionId, settings, null);
    }
    
    /// <remarks/>
    public void SessionSetSettingsAsync(System.Guid sessionId, string settings, object userState) {
        if ((this.SessionSetSettingsOperationCompleted == null)) {
            this.SessionSetSettingsOperationCompleted = new System.Threading.SendOrPostCallback(this.OnSessionSetSettingsOperationCompleted);
        }
        this.InvokeAsync("SessionSetSettings", new object[] {
                    sessionId,
                    settings}, this.SessionSetSettingsOperationCompleted, userState);
    }
    
    private void OnSessionSetSettingsOperationCompleted(object arg) {
        if ((this.SessionSetSettingsCompleted != null)) {
            System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
            this.SessionSetSettingsCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
        }
    }
    
    /// <remarks/>
    [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://schemas.docsvision.com/Platform/2009-02-03/StorageServer/SessionTerminate", RequestNamespace="http://schemas.docsvision.com/Platform/2009-02-03/StorageServer/", ResponseNamespace="http://schemas.docsvision.com/Platform/2009-02-03/StorageServer/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
    public void SessionTerminate(string baseName, System.Guid sessionId) {
        this.Invoke("SessionTerminate", new object[] {
                    baseName,
                    sessionId});
    }
    
    /// <remarks/>
    public System.IAsyncResult BeginSessionTerminate(string baseName, System.Guid sessionId, System.AsyncCallback callback, object asyncState) {
        return this.BeginInvoke("SessionTerminate", new object[] {
                    baseName,
                    sessionId}, callback, asyncState);
    }
    
    /// <remarks/>
    public void EndSessionTerminate(System.IAsyncResult asyncResult) {
        this.EndInvoke(asyncResult);
    }
    
    /// <remarks/>
    public void SessionTerminateAsync(string baseName, System.Guid sessionId) {
        this.SessionTerminateAsync(baseName, sessionId, null);
    }
    
    /// <remarks/>
    public void SessionTerminateAsync(string baseName, System.Guid sessionId, object userState) {
        if ((this.SessionTerminateOperationCompleted == null)) {
            this.SessionTerminateOperationCompleted = new System.Threading.SendOrPostCallback(this.OnSessionTerminateOperationCompleted);
        }
        this.InvokeAsync("SessionTerminate", new object[] {
                    baseName,
                    sessionId}, this.SessionTerminateOperationCompleted, userState);
    }
    
    private void OnSessionTerminateOperationCompleted(object arg) {
        if ((this.SessionTerminateCompleted != null)) {
            System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
            this.SessionTerminateCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
        }
    }
    
    /// <remarks/>
    [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://schemas.docsvision.com/Platform/2009-02-03/StorageServer/SessionUpdateOffl" +
        "ineState", RequestNamespace="http://schemas.docsvision.com/Platform/2009-02-03/StorageServer/", ResponseNamespace="http://schemas.docsvision.com/Platform/2009-02-03/StorageServer/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
    public void SessionUpdateOfflineState(System.Guid sessionId, bool offline) {
        this.Invoke("SessionUpdateOfflineState", new object[] {
                    sessionId,
                    offline});
    }
    
    /// <remarks/>
    public System.IAsyncResult BeginSessionUpdateOfflineState(System.Guid sessionId, bool offline, System.AsyncCallback callback, object asyncState) {
        return this.BeginInvoke("SessionUpdateOfflineState", new object[] {
                    sessionId,
                    offline}, callback, asyncState);
    }
    
    /// <remarks/>
    public void EndSessionUpdateOfflineState(System.IAsyncResult asyncResult) {
        this.EndInvoke(asyncResult);
    }
    
    /// <remarks/>
    public void SessionUpdateOfflineStateAsync(System.Guid sessionId, bool offline) {
        this.SessionUpdateOfflineStateAsync(sessionId, offline, null);
    }
    
    /// <remarks/>
    public void SessionUpdateOfflineStateAsync(System.Guid sessionId, bool offline, object userState) {
        if ((this.SessionUpdateOfflineStateOperationCompleted == null)) {
            this.SessionUpdateOfflineStateOperationCompleted = new System.Threading.SendOrPostCallback(this.OnSessionUpdateOfflineStateOperationCompleted);
        }
        this.InvokeAsync("SessionUpdateOfflineState", new object[] {
                    sessionId,
                    offline}, this.SessionUpdateOfflineStateOperationCompleted, userState);
    }
    
    private void OnSessionUpdateOfflineStateOperationCompleted(object arg) {
        if ((this.SessionUpdateOfflineStateCompleted != null)) {
            System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
            this.SessionUpdateOfflineStateCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
        }
    }
    
    /// <remarks/>
    [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://schemas.docsvision.com/Platform/2009-02-03/StorageServer/TransformCreate", RequestNamespace="http://schemas.docsvision.com/Platform/2009-02-03/StorageServer/", ResponseNamespace="http://schemas.docsvision.com/Platform/2009-02-03/StorageServer/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
    [return: System.Xml.Serialization.XmlElementAttribute("transformId")]
    public System.Guid TransformCreate(System.Guid sessionId, System.Guid cardId, string alias, string name, int transformType, int contentType, int localeId, bool activeTransform, string data, bool usingCompression) {
        object[] results = this.Invoke("TransformCreate", new object[] {
                    sessionId,
                    cardId,
                    alias,
                    name,
                    transformType,
                    contentType,
                    localeId,
                    activeTransform,
                    data,
                    usingCompression});
        return ((System.Guid)(results[0]));
    }
    
    /// <remarks/>
    public System.IAsyncResult BeginTransformCreate(System.Guid sessionId, System.Guid cardId, string alias, string name, int transformType, int contentType, int localeId, bool activeTransform, string data, bool usingCompression, System.AsyncCallback callback, object asyncState) {
        return this.BeginInvoke("TransformCreate", new object[] {
                    sessionId,
                    cardId,
                    alias,
                    name,
                    transformType,
                    contentType,
                    localeId,
                    activeTransform,
                    data,
                    usingCompression}, callback, asyncState);
    }
    
    /// <remarks/>
    public System.Guid EndTransformCreate(System.IAsyncResult asyncResult) {
        object[] results = this.EndInvoke(asyncResult);
        return ((System.Guid)(results[0]));
    }
    
    /// <remarks/>
    public void TransformCreateAsync(System.Guid sessionId, System.Guid cardId, string alias, string name, int transformType, int contentType, int localeId, bool activeTransform, string data, bool usingCompression) {
        this.TransformCreateAsync(sessionId, cardId, alias, name, transformType, contentType, localeId, activeTransform, data, usingCompression, null);
    }
    
    /// <remarks/>
    public void TransformCreateAsync(System.Guid sessionId, System.Guid cardId, string alias, string name, int transformType, int contentType, int localeId, bool activeTransform, string data, bool usingCompression, object userState) {
        if ((this.TransformCreateOperationCompleted == null)) {
            this.TransformCreateOperationCompleted = new System.Threading.SendOrPostCallback(this.OnTransformCreateOperationCompleted);
        }
        this.InvokeAsync("TransformCreate", new object[] {
                    sessionId,
                    cardId,
                    alias,
                    name,
                    transformType,
                    contentType,
                    localeId,
                    activeTransform,
                    data,
                    usingCompression}, this.TransformCreateOperationCompleted, userState);
    }
    
    private void OnTransformCreateOperationCompleted(object arg) {
        if ((this.TransformCreateCompleted != null)) {
            System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
            this.TransformCreateCompleted(this, new TransformCreateCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
        }
    }
    
    /// <remarks/>
    [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://schemas.docsvision.com/Platform/2009-02-03/StorageServer/TransformDelete", RequestNamespace="http://schemas.docsvision.com/Platform/2009-02-03/StorageServer/", ResponseNamespace="http://schemas.docsvision.com/Platform/2009-02-03/StorageServer/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
    public void TransformDelete(System.Guid sessionId, System.Guid transformId) {
        this.Invoke("TransformDelete", new object[] {
                    sessionId,
                    transformId});
    }
    
    /// <remarks/>
    public System.IAsyncResult BeginTransformDelete(System.Guid sessionId, System.Guid transformId, System.AsyncCallback callback, object asyncState) {
        return this.BeginInvoke("TransformDelete", new object[] {
                    sessionId,
                    transformId}, callback, asyncState);
    }
    
    /// <remarks/>
    public void EndTransformDelete(System.IAsyncResult asyncResult) {
        this.EndInvoke(asyncResult);
    }
    
    /// <remarks/>
    public void TransformDeleteAsync(System.Guid sessionId, System.Guid transformId) {
        this.TransformDeleteAsync(sessionId, transformId, null);
    }
    
    /// <remarks/>
    public void TransformDeleteAsync(System.Guid sessionId, System.Guid transformId, object userState) {
        if ((this.TransformDeleteOperationCompleted == null)) {
            this.TransformDeleteOperationCompleted = new System.Threading.SendOrPostCallback(this.OnTransformDeleteOperationCompleted);
        }
        this.InvokeAsync("TransformDelete", new object[] {
                    sessionId,
                    transformId}, this.TransformDeleteOperationCompleted, userState);
    }
    
    private void OnTransformDeleteOperationCompleted(object arg) {
        if ((this.TransformDeleteCompleted != null)) {
            System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
            this.TransformDeleteCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
        }
    }
    
    /// <remarks/>
    [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://schemas.docsvision.com/Platform/2009-02-03/StorageServer/TransformGetData", RequestNamespace="http://schemas.docsvision.com/Platform/2009-02-03/StorageServer/", ResponseNamespace="http://schemas.docsvision.com/Platform/2009-02-03/StorageServer/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
    [return: System.Xml.Serialization.XmlElementAttribute("transform")]
    public string TransformGetData(System.Guid sessionId, System.Guid transformId, out bool usingCompression) {
        object[] results = this.Invoke("TransformGetData", new object[] {
                    sessionId,
                    transformId});
        usingCompression = ((bool)(results[1]));
        return ((string)(results[0]));
    }
    
    /// <remarks/>
    public System.IAsyncResult BeginTransformGetData(System.Guid sessionId, System.Guid transformId, System.AsyncCallback callback, object asyncState) {
        return this.BeginInvoke("TransformGetData", new object[] {
                    sessionId,
                    transformId}, callback, asyncState);
    }
    
    /// <remarks/>
    public string EndTransformGetData(System.IAsyncResult asyncResult, out bool usingCompression) {
        object[] results = this.EndInvoke(asyncResult);
        usingCompression = ((bool)(results[1]));
        return ((string)(results[0]));
    }
    
    /// <remarks/>
    public void TransformGetDataAsync(System.Guid sessionId, System.Guid transformId) {
        this.TransformGetDataAsync(sessionId, transformId, null);
    }
    
    /// <remarks/>
    public void TransformGetDataAsync(System.Guid sessionId, System.Guid transformId, object userState) {
        if ((this.TransformGetDataOperationCompleted == null)) {
            this.TransformGetDataOperationCompleted = new System.Threading.SendOrPostCallback(this.OnTransformGetDataOperationCompleted);
        }
        this.InvokeAsync("TransformGetData", new object[] {
                    sessionId,
                    transformId}, this.TransformGetDataOperationCompleted, userState);
    }
    
    private void OnTransformGetDataOperationCompleted(object arg) {
        if ((this.TransformGetDataCompleted != null)) {
            System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
            this.TransformGetDataCompleted(this, new TransformGetDataCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
        }
    }
    
    /// <remarks/>
    [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://schemas.docsvision.com/Platform/2009-02-03/StorageServer/TransformGetDataE" +
        "x", RequestNamespace="http://schemas.docsvision.com/Platform/2009-02-03/StorageServer/", ResponseNamespace="http://schemas.docsvision.com/Platform/2009-02-03/StorageServer/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
    [return: System.Xml.Serialization.XmlElementAttribute("transform")]
    public string TransformGetDataEx(System.Guid sessionId, System.Guid transformId, string alias, out bool usingCompression) {
        object[] results = this.Invoke("TransformGetDataEx", new object[] {
                    sessionId,
                    transformId,
                    alias});
        usingCompression = ((bool)(results[1]));
        return ((string)(results[0]));
    }
    
    /// <remarks/>
    public System.IAsyncResult BeginTransformGetDataEx(System.Guid sessionId, System.Guid transformId, string alias, System.AsyncCallback callback, object asyncState) {
        return this.BeginInvoke("TransformGetDataEx", new object[] {
                    sessionId,
                    transformId,
                    alias}, callback, asyncState);
    }
    
    /// <remarks/>
    public string EndTransformGetDataEx(System.IAsyncResult asyncResult, out bool usingCompression) {
        object[] results = this.EndInvoke(asyncResult);
        usingCompression = ((bool)(results[1]));
        return ((string)(results[0]));
    }
    
    /// <remarks/>
    public void TransformGetDataExAsync(System.Guid sessionId, System.Guid transformId, string alias) {
        this.TransformGetDataExAsync(sessionId, transformId, alias, null);
    }
    
    /// <remarks/>
    public void TransformGetDataExAsync(System.Guid sessionId, System.Guid transformId, string alias, object userState) {
        if ((this.TransformGetDataExOperationCompleted == null)) {
            this.TransformGetDataExOperationCompleted = new System.Threading.SendOrPostCallback(this.OnTransformGetDataExOperationCompleted);
        }
        this.InvokeAsync("TransformGetDataEx", new object[] {
                    sessionId,
                    transformId,
                    alias}, this.TransformGetDataExOperationCompleted, userState);
    }
    
    private void OnTransformGetDataExOperationCompleted(object arg) {
        if ((this.TransformGetDataExCompleted != null)) {
            System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
            this.TransformGetDataExCompleted(this, new TransformGetDataExCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
        }
    }
    
    /// <remarks/>
    [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://schemas.docsvision.com/Platform/2009-02-03/StorageServer/TransformGetList", RequestNamespace="http://schemas.docsvision.com/Platform/2009-02-03/StorageServer/", ResponseNamespace="http://schemas.docsvision.com/Platform/2009-02-03/StorageServer/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
    [return: System.Xml.Serialization.XmlElementAttribute("transformList")]
    public string TransformGetList(System.Guid sessionId, System.Guid cardId) {
        object[] results = this.Invoke("TransformGetList", new object[] {
                    sessionId,
                    cardId});
        return ((string)(results[0]));
    }
    
    /// <remarks/>
    public System.IAsyncResult BeginTransformGetList(System.Guid sessionId, System.Guid cardId, System.AsyncCallback callback, object asyncState) {
        return this.BeginInvoke("TransformGetList", new object[] {
                    sessionId,
                    cardId}, callback, asyncState);
    }
    
    /// <remarks/>
    public string EndTransformGetList(System.IAsyncResult asyncResult) {
        object[] results = this.EndInvoke(asyncResult);
        return ((string)(results[0]));
    }
    
    /// <remarks/>
    public void TransformGetListAsync(System.Guid sessionId, System.Guid cardId) {
        this.TransformGetListAsync(sessionId, cardId, null);
    }
    
    /// <remarks/>
    public void TransformGetListAsync(System.Guid sessionId, System.Guid cardId, object userState) {
        if ((this.TransformGetListOperationCompleted == null)) {
            this.TransformGetListOperationCompleted = new System.Threading.SendOrPostCallback(this.OnTransformGetListOperationCompleted);
        }
        this.InvokeAsync("TransformGetList", new object[] {
                    sessionId,
                    cardId}, this.TransformGetListOperationCompleted, userState);
    }
    
    private void OnTransformGetListOperationCompleted(object arg) {
        if ((this.TransformGetListCompleted != null)) {
            System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
            this.TransformGetListCompleted(this, new TransformGetListCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
        }
    }
    
    /// <remarks/>
    [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://schemas.docsvision.com/Platform/2009-02-03/StorageServer/TransformSetData", RequestNamespace="http://schemas.docsvision.com/Platform/2009-02-03/StorageServer/", ResponseNamespace="http://schemas.docsvision.com/Platform/2009-02-03/StorageServer/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
    public void TransformSetData(System.Guid sessionId, System.Guid transformId, string data, bool usingCompression) {
        this.Invoke("TransformSetData", new object[] {
                    sessionId,
                    transformId,
                    data,
                    usingCompression});
    }
    
    /// <remarks/>
    public System.IAsyncResult BeginTransformSetData(System.Guid sessionId, System.Guid transformId, string data, bool usingCompression, System.AsyncCallback callback, object asyncState) {
        return this.BeginInvoke("TransformSetData", new object[] {
                    sessionId,
                    transformId,
                    data,
                    usingCompression}, callback, asyncState);
    }
    
    /// <remarks/>
    public void EndTransformSetData(System.IAsyncResult asyncResult) {
        this.EndInvoke(asyncResult);
    }
    
    /// <remarks/>
    public void TransformSetDataAsync(System.Guid sessionId, System.Guid transformId, string data, bool usingCompression) {
        this.TransformSetDataAsync(sessionId, transformId, data, usingCompression, null);
    }
    
    /// <remarks/>
    public void TransformSetDataAsync(System.Guid sessionId, System.Guid transformId, string data, bool usingCompression, object userState) {
        if ((this.TransformSetDataOperationCompleted == null)) {
            this.TransformSetDataOperationCompleted = new System.Threading.SendOrPostCallback(this.OnTransformSetDataOperationCompleted);
        }
        this.InvokeAsync("TransformSetData", new object[] {
                    sessionId,
                    transformId,
                    data,
                    usingCompression}, this.TransformSetDataOperationCompleted, userState);
    }
    
    private void OnTransformSetDataOperationCompleted(object arg) {
        if ((this.TransformSetDataCompleted != null)) {
            System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
            this.TransformSetDataCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
        }
    }
    
    /// <remarks/>
    [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://schemas.docsvision.com/Platform/2009-02-03/StorageServer/TransformSetInfo", RequestNamespace="http://schemas.docsvision.com/Platform/2009-02-03/StorageServer/", ResponseNamespace="http://schemas.docsvision.com/Platform/2009-02-03/StorageServer/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
    public void TransformSetInfo(System.Guid sessionId, System.Guid transformId, string alias, string name, int transformType, int contentType, int localeId, bool activeTransform) {
        this.Invoke("TransformSetInfo", new object[] {
                    sessionId,
                    transformId,
                    alias,
                    name,
                    transformType,
                    contentType,
                    localeId,
                    activeTransform});
    }
    
    /// <remarks/>
    public System.IAsyncResult BeginTransformSetInfo(System.Guid sessionId, System.Guid transformId, string alias, string name, int transformType, int contentType, int localeId, bool activeTransform, System.AsyncCallback callback, object asyncState) {
        return this.BeginInvoke("TransformSetInfo", new object[] {
                    sessionId,
                    transformId,
                    alias,
                    name,
                    transformType,
                    contentType,
                    localeId,
                    activeTransform}, callback, asyncState);
    }
    
    /// <remarks/>
    public void EndTransformSetInfo(System.IAsyncResult asyncResult) {
        this.EndInvoke(asyncResult);
    }
    
    /// <remarks/>
    public void TransformSetInfoAsync(System.Guid sessionId, System.Guid transformId, string alias, string name, int transformType, int contentType, int localeId, bool activeTransform) {
        this.TransformSetInfoAsync(sessionId, transformId, alias, name, transformType, contentType, localeId, activeTransform, null);
    }
    
    /// <remarks/>
    public void TransformSetInfoAsync(System.Guid sessionId, System.Guid transformId, string alias, string name, int transformType, int contentType, int localeId, bool activeTransform, object userState) {
        if ((this.TransformSetInfoOperationCompleted == null)) {
            this.TransformSetInfoOperationCompleted = new System.Threading.SendOrPostCallback(this.OnTransformSetInfoOperationCompleted);
        }
        this.InvokeAsync("TransformSetInfo", new object[] {
                    sessionId,
                    transformId,
                    alias,
                    name,
                    transformType,
                    contentType,
                    localeId,
                    activeTransform}, this.TransformSetInfoOperationCompleted, userState);
    }
    
    private void OnTransformSetInfoOperationCompleted(object arg) {
        if ((this.TransformSetInfoCompleted != null)) {
            System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
            this.TransformSetInfoCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
        }
    }
    
    /// <remarks/>
    [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://schemas.docsvision.com/Platform/2009-02-03/StorageServer/UserProfileGetAcc" +
        "ount", RequestNamespace="http://schemas.docsvision.com/Platform/2009-02-03/StorageServer/", ResponseNamespace="http://schemas.docsvision.com/Platform/2009-02-03/StorageServer/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
    [return: System.Xml.Serialization.XmlElementAttribute("userAccount")]
    public string UserProfileGetAccount(System.Guid sessionId, System.Guid userRefId) {
        object[] results = this.Invoke("UserProfileGetAccount", new object[] {
                    sessionId,
                    userRefId});
        return ((string)(results[0]));
    }
    
    /// <remarks/>
    public System.IAsyncResult BeginUserProfileGetAccount(System.Guid sessionId, System.Guid userRefId, System.AsyncCallback callback, object asyncState) {
        return this.BeginInvoke("UserProfileGetAccount", new object[] {
                    sessionId,
                    userRefId}, callback, asyncState);
    }
    
    /// <remarks/>
    public string EndUserProfileGetAccount(System.IAsyncResult asyncResult) {
        object[] results = this.EndInvoke(asyncResult);
        return ((string)(results[0]));
    }
    
    /// <remarks/>
    public void UserProfileGetAccountAsync(System.Guid sessionId, System.Guid userRefId) {
        this.UserProfileGetAccountAsync(sessionId, userRefId, null);
    }
    
    /// <remarks/>
    public void UserProfileGetAccountAsync(System.Guid sessionId, System.Guid userRefId, object userState) {
        if ((this.UserProfileGetAccountOperationCompleted == null)) {
            this.UserProfileGetAccountOperationCompleted = new System.Threading.SendOrPostCallback(this.OnUserProfileGetAccountOperationCompleted);
        }
        this.InvokeAsync("UserProfileGetAccount", new object[] {
                    sessionId,
                    userRefId}, this.UserProfileGetAccountOperationCompleted, userState);
    }
    
    private void OnUserProfileGetAccountOperationCompleted(object arg) {
        if ((this.UserProfileGetAccountCompleted != null)) {
            System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
            this.UserProfileGetAccountCompleted(this, new UserProfileGetAccountCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
        }
    }
    
    /// <remarks/>
    [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://schemas.docsvision.com/Platform/2009-02-03/StorageServer/UserProfileGetInf" +
        "o", RequestNamespace="http://schemas.docsvision.com/Platform/2009-02-03/StorageServer/", ResponseNamespace="http://schemas.docsvision.com/Platform/2009-02-03/StorageServer/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
    [return: System.Xml.Serialization.XmlElementAttribute("curUserName")]
    public string UserProfileGetInfo(System.Guid sessionId, string userName, out System.Guid userRefId) {
        object[] results = this.Invoke("UserProfileGetInfo", new object[] {
                    sessionId,
                    userName});
        userRefId = ((System.Guid)(results[1]));
        return ((string)(results[0]));
    }
    
    /// <remarks/>
    public System.IAsyncResult BeginUserProfileGetInfo(System.Guid sessionId, string userName, System.AsyncCallback callback, object asyncState) {
        return this.BeginInvoke("UserProfileGetInfo", new object[] {
                    sessionId,
                    userName}, callback, asyncState);
    }
    
    /// <remarks/>
    public string EndUserProfileGetInfo(System.IAsyncResult asyncResult, out System.Guid userRefId) {
        object[] results = this.EndInvoke(asyncResult);
        userRefId = ((System.Guid)(results[1]));
        return ((string)(results[0]));
    }
    
    /// <remarks/>
    public void UserProfileGetInfoAsync(System.Guid sessionId, string userName) {
        this.UserProfileGetInfoAsync(sessionId, userName, null);
    }
    
    /// <remarks/>
    public void UserProfileGetInfoAsync(System.Guid sessionId, string userName, object userState) {
        if ((this.UserProfileGetInfoOperationCompleted == null)) {
            this.UserProfileGetInfoOperationCompleted = new System.Threading.SendOrPostCallback(this.OnUserProfileGetInfoOperationCompleted);
        }
        this.InvokeAsync("UserProfileGetInfo", new object[] {
                    sessionId,
                    userName}, this.UserProfileGetInfoOperationCompleted, userState);
    }
    
    private void OnUserProfileGetInfoOperationCompleted(object arg) {
        if ((this.UserProfileGetInfoCompleted != null)) {
            System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
            this.UserProfileGetInfoCompleted(this, new UserProfileGetInfoCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
        }
    }
    
    /// <remarks/>
    [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://schemas.docsvision.com/Platform/2009-02-03/StorageServer/UserProfileSetInf" +
        "o", RequestNamespace="http://schemas.docsvision.com/Platform/2009-02-03/StorageServer/", ResponseNamespace="http://schemas.docsvision.com/Platform/2009-02-03/StorageServer/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
    public void UserProfileSetInfo(System.Guid sessionId, string userName, System.Guid userRefId) {
        this.Invoke("UserProfileSetInfo", new object[] {
                    sessionId,
                    userName,
                    userRefId});
    }
    
    /// <remarks/>
    public System.IAsyncResult BeginUserProfileSetInfo(System.Guid sessionId, string userName, System.Guid userRefId, System.AsyncCallback callback, object asyncState) {
        return this.BeginInvoke("UserProfileSetInfo", new object[] {
                    sessionId,
                    userName,
                    userRefId}, callback, asyncState);
    }
    
    /// <remarks/>
    public void EndUserProfileSetInfo(System.IAsyncResult asyncResult) {
        this.EndInvoke(asyncResult);
    }
    
    /// <remarks/>
    public void UserProfileSetInfoAsync(System.Guid sessionId, string userName, System.Guid userRefId) {
        this.UserProfileSetInfoAsync(sessionId, userName, userRefId, null);
    }
    
    /// <remarks/>
    public void UserProfileSetInfoAsync(System.Guid sessionId, string userName, System.Guid userRefId, object userState) {
        if ((this.UserProfileSetInfoOperationCompleted == null)) {
            this.UserProfileSetInfoOperationCompleted = new System.Threading.SendOrPostCallback(this.OnUserProfileSetInfoOperationCompleted);
        }
        this.InvokeAsync("UserProfileSetInfo", new object[] {
                    sessionId,
                    userName,
                    userRefId}, this.UserProfileSetInfoOperationCompleted, userState);
    }
    
    private void OnUserProfileSetInfoOperationCompleted(object arg) {
        if ((this.UserProfileSetInfoCompleted != null)) {
            System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
            this.UserProfileSetInfoCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
        }
    }
    
    /// <remarks/>
    [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://schemas.docsvision.com/Platform/2009-02-03/StorageServer/ViewCreate", RequestNamespace="http://schemas.docsvision.com/Platform/2009-02-03/StorageServer/", ResponseNamespace="http://schemas.docsvision.com/Platform/2009-02-03/StorageServer/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
    public void ViewCreate(System.Guid sessionId, System.Guid viewId, string request) {
        this.Invoke("ViewCreate", new object[] {
                    sessionId,
                    viewId,
                    request});
    }
    
    /// <remarks/>
    public System.IAsyncResult BeginViewCreate(System.Guid sessionId, System.Guid viewId, string request, System.AsyncCallback callback, object asyncState) {
        return this.BeginInvoke("ViewCreate", new object[] {
                    sessionId,
                    viewId,
                    request}, callback, asyncState);
    }
    
    /// <remarks/>
    public void EndViewCreate(System.IAsyncResult asyncResult) {
        this.EndInvoke(asyncResult);
    }
    
    /// <remarks/>
    public void ViewCreateAsync(System.Guid sessionId, System.Guid viewId, string request) {
        this.ViewCreateAsync(sessionId, viewId, request, null);
    }
    
    /// <remarks/>
    public void ViewCreateAsync(System.Guid sessionId, System.Guid viewId, string request, object userState) {
        if ((this.ViewCreateOperationCompleted == null)) {
            this.ViewCreateOperationCompleted = new System.Threading.SendOrPostCallback(this.OnViewCreateOperationCompleted);
        }
        this.InvokeAsync("ViewCreate", new object[] {
                    sessionId,
                    viewId,
                    request}, this.ViewCreateOperationCompleted, userState);
    }
    
    private void OnViewCreateOperationCompleted(object arg) {
        if ((this.ViewCreateCompleted != null)) {
            System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
            this.ViewCreateCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
        }
    }
    
    /// <remarks/>
    [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://schemas.docsvision.com/Platform/2009-02-03/StorageServer/ViewDelete", RequestNamespace="http://schemas.docsvision.com/Platform/2009-02-03/StorageServer/", ResponseNamespace="http://schemas.docsvision.com/Platform/2009-02-03/StorageServer/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
    public void ViewDelete(System.Guid sessionId, System.Guid viewId) {
        this.Invoke("ViewDelete", new object[] {
                    sessionId,
                    viewId});
    }
    
    /// <remarks/>
    public System.IAsyncResult BeginViewDelete(System.Guid sessionId, System.Guid viewId, System.AsyncCallback callback, object asyncState) {
        return this.BeginInvoke("ViewDelete", new object[] {
                    sessionId,
                    viewId}, callback, asyncState);
    }
    
    /// <remarks/>
    public void EndViewDelete(System.IAsyncResult asyncResult) {
        this.EndInvoke(asyncResult);
    }
    
    /// <remarks/>
    public void ViewDeleteAsync(System.Guid sessionId, System.Guid viewId) {
        this.ViewDeleteAsync(sessionId, viewId, null);
    }
    
    /// <remarks/>
    public void ViewDeleteAsync(System.Guid sessionId, System.Guid viewId, object userState) {
        if ((this.ViewDeleteOperationCompleted == null)) {
            this.ViewDeleteOperationCompleted = new System.Threading.SendOrPostCallback(this.OnViewDeleteOperationCompleted);
        }
        this.InvokeAsync("ViewDelete", new object[] {
                    sessionId,
                    viewId}, this.ViewDeleteOperationCompleted, userState);
    }
    
    private void OnViewDeleteOperationCompleted(object arg) {
        if ((this.ViewDeleteCompleted != null)) {
            System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
            this.ViewDeleteCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
        }
    }
    
    /// <remarks/>
    [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://schemas.docsvision.com/Platform/2009-02-03/StorageServer/ViewGetData", RequestNamespace="http://schemas.docsvision.com/Platform/2009-02-03/StorageServer/", ResponseNamespace="http://schemas.docsvision.com/Platform/2009-02-03/StorageServer/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
    [return: System.Xml.Serialization.XmlElementAttribute("cursorInfo")]
    public CursorInfo ViewGetData(System.Guid sessionId, ViewSourceEnum viewSource, string source, string view, int flags) {
        object[] results = this.Invoke("ViewGetData", new object[] {
                    sessionId,
                    viewSource,
                    source,
                    view,
                    flags});
        return ((CursorInfo)(results[0]));
    }
    
    /// <remarks/>
    public System.IAsyncResult BeginViewGetData(System.Guid sessionId, ViewSourceEnum viewSource, string source, string view, int flags, System.AsyncCallback callback, object asyncState) {
        return this.BeginInvoke("ViewGetData", new object[] {
                    sessionId,
                    viewSource,
                    source,
                    view,
                    flags}, callback, asyncState);
    }
    
    /// <remarks/>
    public CursorInfo EndViewGetData(System.IAsyncResult asyncResult) {
        object[] results = this.EndInvoke(asyncResult);
        return ((CursorInfo)(results[0]));
    }
    
    /// <remarks/>
    public void ViewGetDataAsync(System.Guid sessionId, ViewSourceEnum viewSource, string source, string view, int flags) {
        this.ViewGetDataAsync(sessionId, viewSource, source, view, flags, null);
    }
    
    /// <remarks/>
    public void ViewGetDataAsync(System.Guid sessionId, ViewSourceEnum viewSource, string source, string view, int flags, object userState) {
        if ((this.ViewGetDataOperationCompleted == null)) {
            this.ViewGetDataOperationCompleted = new System.Threading.SendOrPostCallback(this.OnViewGetDataOperationCompleted);
        }
        this.InvokeAsync("ViewGetData", new object[] {
                    sessionId,
                    viewSource,
                    source,
                    view,
                    flags}, this.ViewGetDataOperationCompleted, userState);
    }
    
    private void OnViewGetDataOperationCompleted(object arg) {
        if ((this.ViewGetDataCompleted != null)) {
            System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
            this.ViewGetDataCompleted(this, new ViewGetDataCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
        }
    }
    
    /// <remarks/>
    [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://schemas.docsvision.com/Platform/2009-02-03/StorageServer/ViewGetDataEx", RequestNamespace="http://schemas.docsvision.com/Platform/2009-02-03/StorageServer/", ResponseNamespace="http://schemas.docsvision.com/Platform/2009-02-03/StorageServer/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
    [return: System.Xml.Serialization.XmlElementAttribute("cursorInfo")]
    public CursorInfo ViewGetDataEx(System.Guid sessionId, ViewSourceEnum viewSource, string source, string view, int flags, string parameters) {
        object[] results = this.Invoke("ViewGetDataEx", new object[] {
                    sessionId,
                    viewSource,
                    source,
                    view,
                    flags,
                    parameters});
        return ((CursorInfo)(results[0]));
    }
    
    /// <remarks/>
    public System.IAsyncResult BeginViewGetDataEx(System.Guid sessionId, ViewSourceEnum viewSource, string source, string view, int flags, string parameters, System.AsyncCallback callback, object asyncState) {
        return this.BeginInvoke("ViewGetDataEx", new object[] {
                    sessionId,
                    viewSource,
                    source,
                    view,
                    flags,
                    parameters}, callback, asyncState);
    }
    
    /// <remarks/>
    public CursorInfo EndViewGetDataEx(System.IAsyncResult asyncResult) {
        object[] results = this.EndInvoke(asyncResult);
        return ((CursorInfo)(results[0]));
    }
    
    /// <remarks/>
    public void ViewGetDataExAsync(System.Guid sessionId, ViewSourceEnum viewSource, string source, string view, int flags, string parameters) {
        this.ViewGetDataExAsync(sessionId, viewSource, source, view, flags, parameters, null);
    }
    
    /// <remarks/>
    public void ViewGetDataExAsync(System.Guid sessionId, ViewSourceEnum viewSource, string source, string view, int flags, string parameters, object userState) {
        if ((this.ViewGetDataExOperationCompleted == null)) {
            this.ViewGetDataExOperationCompleted = new System.Threading.SendOrPostCallback(this.OnViewGetDataExOperationCompleted);
        }
        this.InvokeAsync("ViewGetDataEx", new object[] {
                    sessionId,
                    viewSource,
                    source,
                    view,
                    flags,
                    parameters}, this.ViewGetDataExOperationCompleted, userState);
    }
    
    private void OnViewGetDataExOperationCompleted(object arg) {
        if ((this.ViewGetDataExCompleted != null)) {
            System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
            this.ViewGetDataExCompleted(this, new ViewGetDataExCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
        }
    }
    
    /// <remarks/>
    [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://schemas.docsvision.com/Platform/2009-02-03/StorageServer/ViewReadData", RequestNamespace="http://schemas.docsvision.com/Platform/2009-02-03/StorageServer/", ResponseNamespace="http://schemas.docsvision.com/Platform/2009-02-03/StorageServer/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
    [return: System.Xml.Serialization.XmlElementAttribute("cursorInfo")]
    public CursorInfoEx ViewReadData(System.Guid sessionId, string viewReadRequest, string searchXml, string paramXml) {
        object[] results = this.Invoke("ViewReadData", new object[] {
                    sessionId,
                    viewReadRequest,
                    searchXml,
                    paramXml});
        return ((CursorInfoEx)(results[0]));
    }
    
    /// <remarks/>
    public System.IAsyncResult BeginViewReadData(System.Guid sessionId, string viewReadRequest, string searchXml, string paramXml, System.AsyncCallback callback, object asyncState) {
        return this.BeginInvoke("ViewReadData", new object[] {
                    sessionId,
                    viewReadRequest,
                    searchXml,
                    paramXml}, callback, asyncState);
    }
    
    /// <remarks/>
    public CursorInfoEx EndViewReadData(System.IAsyncResult asyncResult) {
        object[] results = this.EndInvoke(asyncResult);
        return ((CursorInfoEx)(results[0]));
    }
    
    /// <remarks/>
    public void ViewReadDataAsync(System.Guid sessionId, string viewReadRequest, string searchXml, string paramXml) {
        this.ViewReadDataAsync(sessionId, viewReadRequest, searchXml, paramXml, null);
    }
    
    /// <remarks/>
    public void ViewReadDataAsync(System.Guid sessionId, string viewReadRequest, string searchXml, string paramXml, object userState) {
        if ((this.ViewReadDataOperationCompleted == null)) {
            this.ViewReadDataOperationCompleted = new System.Threading.SendOrPostCallback(this.OnViewReadDataOperationCompleted);
        }
        this.InvokeAsync("ViewReadData", new object[] {
                    sessionId,
                    viewReadRequest,
                    searchXml,
                    paramXml}, this.ViewReadDataOperationCompleted, userState);
    }
    
    private void OnViewReadDataOperationCompleted(object arg) {
        if ((this.ViewReadDataCompleted != null)) {
            System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
            this.ViewReadDataCompleted(this, new ViewReadDataCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
        }
    }
    
    /// <remarks/>
    [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://schemas.docsvision.com/Platform/2009-02-03/StorageServer/ViewReadDataEx", RequestNamespace="http://schemas.docsvision.com/Platform/2009-02-03/StorageServer/", ResponseNamespace="http://schemas.docsvision.com/Platform/2009-02-03/StorageServer/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
    [return: System.Xml.Serialization.XmlElementAttribute("cursorInfo")]
    public CursorInfoEx ViewReadDataEx(System.Guid sessionId, string viewReadRequest, string searchXml, string paramXml, out string xmlResponse) {
        object[] results = this.Invoke("ViewReadDataEx", new object[] {
                    sessionId,
                    viewReadRequest,
                    searchXml,
                    paramXml});
        xmlResponse = ((string)(results[1]));
        return ((CursorInfoEx)(results[0]));
    }
    
    /// <remarks/>
    public System.IAsyncResult BeginViewReadDataEx(System.Guid sessionId, string viewReadRequest, string searchXml, string paramXml, System.AsyncCallback callback, object asyncState) {
        return this.BeginInvoke("ViewReadDataEx", new object[] {
                    sessionId,
                    viewReadRequest,
                    searchXml,
                    paramXml}, callback, asyncState);
    }
    
    /// <remarks/>
    public CursorInfoEx EndViewReadDataEx(System.IAsyncResult asyncResult, out string xmlResponse) {
        object[] results = this.EndInvoke(asyncResult);
        xmlResponse = ((string)(results[1]));
        return ((CursorInfoEx)(results[0]));
    }
    
    /// <remarks/>
    public void ViewReadDataExAsync(System.Guid sessionId, string viewReadRequest, string searchXml, string paramXml) {
        this.ViewReadDataExAsync(sessionId, viewReadRequest, searchXml, paramXml, null);
    }
    
    /// <remarks/>
    public void ViewReadDataExAsync(System.Guid sessionId, string viewReadRequest, string searchXml, string paramXml, object userState) {
        if ((this.ViewReadDataExOperationCompleted == null)) {
            this.ViewReadDataExOperationCompleted = new System.Threading.SendOrPostCallback(this.OnViewReadDataExOperationCompleted);
        }
        this.InvokeAsync("ViewReadDataEx", new object[] {
                    sessionId,
                    viewReadRequest,
                    searchXml,
                    paramXml}, this.ViewReadDataExOperationCompleted, userState);
    }
    
    private void OnViewReadDataExOperationCompleted(object arg) {
        if ((this.ViewReadDataExCompleted != null)) {
            System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
            this.ViewReadDataExCompleted(this, new ViewReadDataExCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
        }
    }
    
    /// <remarks/>
    [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://schemas.docsvision.com/Platform/2009-02-03/StorageServer/WorkflowGetActive" +
        "Processes", RequestNamespace="http://schemas.docsvision.com/Platform/2009-02-03/StorageServer/", ResponseNamespace="http://schemas.docsvision.com/Platform/2009-02-03/StorageServer/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
    [return: System.Xml.Serialization.XmlElementAttribute("cursorInfo")]
    public CursorInfo WorkflowGetActiveProcesses(System.Guid sessionId, string serviceId, int priority, double changeDateTime) {
        object[] results = this.Invoke("WorkflowGetActiveProcesses", new object[] {
                    sessionId,
                    serviceId,
                    priority,
                    changeDateTime});
        return ((CursorInfo)(results[0]));
    }
    
    /// <remarks/>
    public System.IAsyncResult BeginWorkflowGetActiveProcesses(System.Guid sessionId, string serviceId, int priority, double changeDateTime, System.AsyncCallback callback, object asyncState) {
        return this.BeginInvoke("WorkflowGetActiveProcesses", new object[] {
                    sessionId,
                    serviceId,
                    priority,
                    changeDateTime}, callback, asyncState);
    }
    
    /// <remarks/>
    public CursorInfo EndWorkflowGetActiveProcesses(System.IAsyncResult asyncResult) {
        object[] results = this.EndInvoke(asyncResult);
        return ((CursorInfo)(results[0]));
    }
    
    /// <remarks/>
    public void WorkflowGetActiveProcessesAsync(System.Guid sessionId, string serviceId, int priority, double changeDateTime) {
        this.WorkflowGetActiveProcessesAsync(sessionId, serviceId, priority, changeDateTime, null);
    }
    
    /// <remarks/>
    public void WorkflowGetActiveProcessesAsync(System.Guid sessionId, string serviceId, int priority, double changeDateTime, object userState) {
        if ((this.WorkflowGetActiveProcessesOperationCompleted == null)) {
            this.WorkflowGetActiveProcessesOperationCompleted = new System.Threading.SendOrPostCallback(this.OnWorkflowGetActiveProcessesOperationCompleted);
        }
        this.InvokeAsync("WorkflowGetActiveProcesses", new object[] {
                    sessionId,
                    serviceId,
                    priority,
                    changeDateTime}, this.WorkflowGetActiveProcessesOperationCompleted, userState);
    }
    
    private void OnWorkflowGetActiveProcessesOperationCompleted(object arg) {
        if ((this.WorkflowGetActiveProcessesCompleted != null)) {
            System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
            this.WorkflowGetActiveProcessesCompleted(this, new WorkflowGetActiveProcessesCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
        }
    }
    
    /// <remarks/>
    [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://schemas.docsvision.com/Platform/2009-02-03/StorageServer/WorkflowGetProces" +
        "sInfo", RequestNamespace="http://schemas.docsvision.com/Platform/2009-02-03/StorageServer/", ResponseNamespace="http://schemas.docsvision.com/Platform/2009-02-03/StorageServer/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
    [return: System.Xml.Serialization.XmlElementAttribute("processInfo")]
    public string WorkflowGetProcessInfo(System.Guid sessionId, System.Guid processId) {
        object[] results = this.Invoke("WorkflowGetProcessInfo", new object[] {
                    sessionId,
                    processId});
        return ((string)(results[0]));
    }
    
    /// <remarks/>
    public System.IAsyncResult BeginWorkflowGetProcessInfo(System.Guid sessionId, System.Guid processId, System.AsyncCallback callback, object asyncState) {
        return this.BeginInvoke("WorkflowGetProcessInfo", new object[] {
                    sessionId,
                    processId}, callback, asyncState);
    }
    
    /// <remarks/>
    public string EndWorkflowGetProcessInfo(System.IAsyncResult asyncResult) {
        object[] results = this.EndInvoke(asyncResult);
        return ((string)(results[0]));
    }
    
    /// <remarks/>
    public void WorkflowGetProcessInfoAsync(System.Guid sessionId, System.Guid processId) {
        this.WorkflowGetProcessInfoAsync(sessionId, processId, null);
    }
    
    /// <remarks/>
    public void WorkflowGetProcessInfoAsync(System.Guid sessionId, System.Guid processId, object userState) {
        if ((this.WorkflowGetProcessInfoOperationCompleted == null)) {
            this.WorkflowGetProcessInfoOperationCompleted = new System.Threading.SendOrPostCallback(this.OnWorkflowGetProcessInfoOperationCompleted);
        }
        this.InvokeAsync("WorkflowGetProcessInfo", new object[] {
                    sessionId,
                    processId}, this.WorkflowGetProcessInfoOperationCompleted, userState);
    }
    
    private void OnWorkflowGetProcessInfoOperationCompleted(object arg) {
        if ((this.WorkflowGetProcessInfoCompleted != null)) {
            System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
            this.WorkflowGetProcessInfoCompleted(this, new WorkflowGetProcessInfoCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
        }
    }
    
    /// <remarks/>
    [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://schemas.docsvision.com/Platform/2009-02-03/StorageServer/WorkflowGetProces" +
        "sList", RequestNamespace="http://schemas.docsvision.com/Platform/2009-02-03/StorageServer/", ResponseNamespace="http://schemas.docsvision.com/Platform/2009-02-03/StorageServer/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
    [return: System.Xml.Serialization.XmlElementAttribute("processList")]
    public string WorkflowGetProcessList(System.Guid sessionId) {
        object[] results = this.Invoke("WorkflowGetProcessList", new object[] {
                    sessionId});
        return ((string)(results[0]));
    }
    
    /// <remarks/>
    public System.IAsyncResult BeginWorkflowGetProcessList(System.Guid sessionId, System.AsyncCallback callback, object asyncState) {
        return this.BeginInvoke("WorkflowGetProcessList", new object[] {
                    sessionId}, callback, asyncState);
    }
    
    /// <remarks/>
    public string EndWorkflowGetProcessList(System.IAsyncResult asyncResult) {
        object[] results = this.EndInvoke(asyncResult);
        return ((string)(results[0]));
    }
    
    /// <remarks/>
    public void WorkflowGetProcessListAsync(System.Guid sessionId) {
        this.WorkflowGetProcessListAsync(sessionId, null);
    }
    
    /// <remarks/>
    public void WorkflowGetProcessListAsync(System.Guid sessionId, object userState) {
        if ((this.WorkflowGetProcessListOperationCompleted == null)) {
            this.WorkflowGetProcessListOperationCompleted = new System.Threading.SendOrPostCallback(this.OnWorkflowGetProcessListOperationCompleted);
        }
        this.InvokeAsync("WorkflowGetProcessList", new object[] {
                    sessionId}, this.WorkflowGetProcessListOperationCompleted, userState);
    }
    
    private void OnWorkflowGetProcessListOperationCompleted(object arg) {
        if ((this.WorkflowGetProcessListCompleted != null)) {
            System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
            this.WorkflowGetProcessListCompleted(this, new WorkflowGetProcessListCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
        }
    }
    
    /// <remarks/>
    [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://schemas.docsvision.com/Platform/2009-02-03/StorageServer/WorkflowGetProces" +
        "sListEx", RequestNamespace="http://schemas.docsvision.com/Platform/2009-02-03/StorageServer/", ResponseNamespace="http://schemas.docsvision.com/Platform/2009-02-03/StorageServer/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
    [return: System.Xml.Serialization.XmlElementAttribute("processList")]
    public string WorkflowGetProcessListEx(System.Guid sessionId, int States) {
        object[] results = this.Invoke("WorkflowGetProcessListEx", new object[] {
                    sessionId,
                    States});
        return ((string)(results[0]));
    }
    
    /// <remarks/>
    public System.IAsyncResult BeginWorkflowGetProcessListEx(System.Guid sessionId, int States, System.AsyncCallback callback, object asyncState) {
        return this.BeginInvoke("WorkflowGetProcessListEx", new object[] {
                    sessionId,
                    States}, callback, asyncState);
    }
    
    /// <remarks/>
    public string EndWorkflowGetProcessListEx(System.IAsyncResult asyncResult) {
        object[] results = this.EndInvoke(asyncResult);
        return ((string)(results[0]));
    }
    
    /// <remarks/>
    public void WorkflowGetProcessListExAsync(System.Guid sessionId, int States) {
        this.WorkflowGetProcessListExAsync(sessionId, States, null);
    }
    
    /// <remarks/>
    public void WorkflowGetProcessListExAsync(System.Guid sessionId, int States, object userState) {
        if ((this.WorkflowGetProcessListExOperationCompleted == null)) {
            this.WorkflowGetProcessListExOperationCompleted = new System.Threading.SendOrPostCallback(this.OnWorkflowGetProcessListExOperationCompleted);
        }
        this.InvokeAsync("WorkflowGetProcessListEx", new object[] {
                    sessionId,
                    States}, this.WorkflowGetProcessListExOperationCompleted, userState);
    }
    
    private void OnWorkflowGetProcessListExOperationCompleted(object arg) {
        if ((this.WorkflowGetProcessListExCompleted != null)) {
            System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
            this.WorkflowGetProcessListExCompleted(this, new WorkflowGetProcessListExCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
        }
    }
    
    /// <remarks/>
    [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://schemas.docsvision.com/Platform/2009-02-03/StorageServer/WorkflowLogMessag" +
        "e", RequestNamespace="http://schemas.docsvision.com/Platform/2009-02-03/StorageServer/", ResponseNamespace="http://schemas.docsvision.com/Platform/2009-02-03/StorageServer/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
    public void WorkflowLogMessage(System.Guid sessionId, System.Guid processId, int actionType, string action, int priority, string functionName, string changeState, string inputData, string outputData, string details) {
        this.Invoke("WorkflowLogMessage", new object[] {
                    sessionId,
                    processId,
                    actionType,
                    action,
                    priority,
                    functionName,
                    changeState,
                    inputData,
                    outputData,
                    details});
    }
    
    /// <remarks/>
    public System.IAsyncResult BeginWorkflowLogMessage(System.Guid sessionId, System.Guid processId, int actionType, string action, int priority, string functionName, string changeState, string inputData, string outputData, string details, System.AsyncCallback callback, object asyncState) {
        return this.BeginInvoke("WorkflowLogMessage", new object[] {
                    sessionId,
                    processId,
                    actionType,
                    action,
                    priority,
                    functionName,
                    changeState,
                    inputData,
                    outputData,
                    details}, callback, asyncState);
    }
    
    /// <remarks/>
    public void EndWorkflowLogMessage(System.IAsyncResult asyncResult) {
        this.EndInvoke(asyncResult);
    }
    
    /// <remarks/>
    public void WorkflowLogMessageAsync(System.Guid sessionId, System.Guid processId, int actionType, string action, int priority, string functionName, string changeState, string inputData, string outputData, string details) {
        this.WorkflowLogMessageAsync(sessionId, processId, actionType, action, priority, functionName, changeState, inputData, outputData, details, null);
    }
    
    /// <remarks/>
    public void WorkflowLogMessageAsync(System.Guid sessionId, System.Guid processId, int actionType, string action, int priority, string functionName, string changeState, string inputData, string outputData, string details, object userState) {
        if ((this.WorkflowLogMessageOperationCompleted == null)) {
            this.WorkflowLogMessageOperationCompleted = new System.Threading.SendOrPostCallback(this.OnWorkflowLogMessageOperationCompleted);
        }
        this.InvokeAsync("WorkflowLogMessage", new object[] {
                    sessionId,
                    processId,
                    actionType,
                    action,
                    priority,
                    functionName,
                    changeState,
                    inputData,
                    outputData,
                    details}, this.WorkflowLogMessageOperationCompleted, userState);
    }
    
    private void OnWorkflowLogMessageOperationCompleted(object arg) {
        if ((this.WorkflowLogMessageCompleted != null)) {
            System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
            this.WorkflowLogMessageCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
        }
    }
    
    /// <remarks/>
    [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://schemas.docsvision.com/Platform/2009-02-03/StorageServer/WorkflowPauseProc" +
        "ess", RequestNamespace="http://schemas.docsvision.com/Platform/2009-02-03/StorageServer/", ResponseNamespace="http://schemas.docsvision.com/Platform/2009-02-03/StorageServer/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
    public void WorkflowPauseProcess(System.Guid sessionId, System.Guid processId) {
        this.Invoke("WorkflowPauseProcess", new object[] {
                    sessionId,
                    processId});
    }
    
    /// <remarks/>
    public System.IAsyncResult BeginWorkflowPauseProcess(System.Guid sessionId, System.Guid processId, System.AsyncCallback callback, object asyncState) {
        return this.BeginInvoke("WorkflowPauseProcess", new object[] {
                    sessionId,
                    processId}, callback, asyncState);
    }
    
    /// <remarks/>
    public void EndWorkflowPauseProcess(System.IAsyncResult asyncResult) {
        this.EndInvoke(asyncResult);
    }
    
    /// <remarks/>
    public void WorkflowPauseProcessAsync(System.Guid sessionId, System.Guid processId) {
        this.WorkflowPauseProcessAsync(sessionId, processId, null);
    }
    
    /// <remarks/>
    public void WorkflowPauseProcessAsync(System.Guid sessionId, System.Guid processId, object userState) {
        if ((this.WorkflowPauseProcessOperationCompleted == null)) {
            this.WorkflowPauseProcessOperationCompleted = new System.Threading.SendOrPostCallback(this.OnWorkflowPauseProcessOperationCompleted);
        }
        this.InvokeAsync("WorkflowPauseProcess", new object[] {
                    sessionId,
                    processId}, this.WorkflowPauseProcessOperationCompleted, userState);
    }
    
    private void OnWorkflowPauseProcessOperationCompleted(object arg) {
        if ((this.WorkflowPauseProcessCompleted != null)) {
            System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
            this.WorkflowPauseProcessCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
        }
    }
    
    /// <remarks/>
    [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://schemas.docsvision.com/Platform/2009-02-03/StorageServer/WorkflowPreparePr" +
        "ocess", RequestNamespace="http://schemas.docsvision.com/Platform/2009-02-03/StorageServer/", ResponseNamespace="http://schemas.docsvision.com/Platform/2009-02-03/StorageServer/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
    public void WorkflowPrepareProcess(System.Guid sessionId, System.Guid processId) {
        this.Invoke("WorkflowPrepareProcess", new object[] {
                    sessionId,
                    processId});
    }
    
    /// <remarks/>
    public System.IAsyncResult BeginWorkflowPrepareProcess(System.Guid sessionId, System.Guid processId, System.AsyncCallback callback, object asyncState) {
        return this.BeginInvoke("WorkflowPrepareProcess", new object[] {
                    sessionId,
                    processId}, callback, asyncState);
    }
    
    /// <remarks/>
    public void EndWorkflowPrepareProcess(System.IAsyncResult asyncResult) {
        this.EndInvoke(asyncResult);
    }
    
    /// <remarks/>
    public void WorkflowPrepareProcessAsync(System.Guid sessionId, System.Guid processId) {
        this.WorkflowPrepareProcessAsync(sessionId, processId, null);
    }
    
    /// <remarks/>
    public void WorkflowPrepareProcessAsync(System.Guid sessionId, System.Guid processId, object userState) {
        if ((this.WorkflowPrepareProcessOperationCompleted == null)) {
            this.WorkflowPrepareProcessOperationCompleted = new System.Threading.SendOrPostCallback(this.OnWorkflowPrepareProcessOperationCompleted);
        }
        this.InvokeAsync("WorkflowPrepareProcess", new object[] {
                    sessionId,
                    processId}, this.WorkflowPrepareProcessOperationCompleted, userState);
    }
    
    private void OnWorkflowPrepareProcessOperationCompleted(object arg) {
        if ((this.WorkflowPrepareProcessCompleted != null)) {
            System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
            this.WorkflowPrepareProcessCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
        }
    }
    
    /// <remarks/>
    [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://schemas.docsvision.com/Platform/2009-02-03/StorageServer/WorkflowPromotePr" +
        "ocess", RequestNamespace="http://schemas.docsvision.com/Platform/2009-02-03/StorageServer/", ResponseNamespace="http://schemas.docsvision.com/Platform/2009-02-03/StorageServer/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
    public void WorkflowPromoteProcess(System.Guid sessionId, string processId) {
        this.Invoke("WorkflowPromoteProcess", new object[] {
                    sessionId,
                    processId});
    }
    
    /// <remarks/>
    public System.IAsyncResult BeginWorkflowPromoteProcess(System.Guid sessionId, string processId, System.AsyncCallback callback, object asyncState) {
        return this.BeginInvoke("WorkflowPromoteProcess", new object[] {
                    sessionId,
                    processId}, callback, asyncState);
    }
    
    /// <remarks/>
    public void EndWorkflowPromoteProcess(System.IAsyncResult asyncResult) {
        this.EndInvoke(asyncResult);
    }
    
    /// <remarks/>
    public void WorkflowPromoteProcessAsync(System.Guid sessionId, string processId) {
        this.WorkflowPromoteProcessAsync(sessionId, processId, null);
    }
    
    /// <remarks/>
    public void WorkflowPromoteProcessAsync(System.Guid sessionId, string processId, object userState) {
        if ((this.WorkflowPromoteProcessOperationCompleted == null)) {
            this.WorkflowPromoteProcessOperationCompleted = new System.Threading.SendOrPostCallback(this.OnWorkflowPromoteProcessOperationCompleted);
        }
        this.InvokeAsync("WorkflowPromoteProcess", new object[] {
                    sessionId,
                    processId}, this.WorkflowPromoteProcessOperationCompleted, userState);
    }
    
    private void OnWorkflowPromoteProcessOperationCompleted(object arg) {
        if ((this.WorkflowPromoteProcessCompleted != null)) {
            System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
            this.WorkflowPromoteProcessCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
        }
    }
    
    /// <remarks/>
    [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://schemas.docsvision.com/Platform/2009-02-03/StorageServer/WorkflowPromotePr" +
        "ocesses", RequestNamespace="http://schemas.docsvision.com/Platform/2009-02-03/StorageServer/", ResponseNamespace="http://schemas.docsvision.com/Platform/2009-02-03/StorageServer/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
    public void WorkflowPromoteProcesses(System.Guid sessionId, string serviceId, int priority, bool promoteProcessesWithLowerPriority) {
        this.Invoke("WorkflowPromoteProcesses", new object[] {
                    sessionId,
                    serviceId,
                    priority,
                    promoteProcessesWithLowerPriority});
    }
    
    /// <remarks/>
    public System.IAsyncResult BeginWorkflowPromoteProcesses(System.Guid sessionId, string serviceId, int priority, bool promoteProcessesWithLowerPriority, System.AsyncCallback callback, object asyncState) {
        return this.BeginInvoke("WorkflowPromoteProcesses", new object[] {
                    sessionId,
                    serviceId,
                    priority,
                    promoteProcessesWithLowerPriority}, callback, asyncState);
    }
    
    /// <remarks/>
    public void EndWorkflowPromoteProcesses(System.IAsyncResult asyncResult) {
        this.EndInvoke(asyncResult);
    }
    
    /// <remarks/>
    public void WorkflowPromoteProcessesAsync(System.Guid sessionId, string serviceId, int priority, bool promoteProcessesWithLowerPriority) {
        this.WorkflowPromoteProcessesAsync(sessionId, serviceId, priority, promoteProcessesWithLowerPriority, null);
    }
    
    /// <remarks/>
    public void WorkflowPromoteProcessesAsync(System.Guid sessionId, string serviceId, int priority, bool promoteProcessesWithLowerPriority, object userState) {
        if ((this.WorkflowPromoteProcessesOperationCompleted == null)) {
            this.WorkflowPromoteProcessesOperationCompleted = new System.Threading.SendOrPostCallback(this.OnWorkflowPromoteProcessesOperationCompleted);
        }
        this.InvokeAsync("WorkflowPromoteProcesses", new object[] {
                    sessionId,
                    serviceId,
                    priority,
                    promoteProcessesWithLowerPriority}, this.WorkflowPromoteProcessesOperationCompleted, userState);
    }
    
    private void OnWorkflowPromoteProcessesOperationCompleted(object arg) {
        if ((this.WorkflowPromoteProcessesCompleted != null)) {
            System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
            this.WorkflowPromoteProcessesCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
        }
    }
    
    /// <remarks/>
    [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://schemas.docsvision.com/Platform/2009-02-03/StorageServer/WorkflowResumePro" +
        "cess", RequestNamespace="http://schemas.docsvision.com/Platform/2009-02-03/StorageServer/", ResponseNamespace="http://schemas.docsvision.com/Platform/2009-02-03/StorageServer/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
    public void WorkflowResumeProcess(System.Guid sessionId, System.Guid processId) {
        this.Invoke("WorkflowResumeProcess", new object[] {
                    sessionId,
                    processId});
    }
    
    /// <remarks/>
    public System.IAsyncResult BeginWorkflowResumeProcess(System.Guid sessionId, System.Guid processId, System.AsyncCallback callback, object asyncState) {
        return this.BeginInvoke("WorkflowResumeProcess", new object[] {
                    sessionId,
                    processId}, callback, asyncState);
    }
    
    /// <remarks/>
    public void EndWorkflowResumeProcess(System.IAsyncResult asyncResult) {
        this.EndInvoke(asyncResult);
    }
    
    /// <remarks/>
    public void WorkflowResumeProcessAsync(System.Guid sessionId, System.Guid processId) {
        this.WorkflowResumeProcessAsync(sessionId, processId, null);
    }
    
    /// <remarks/>
    public void WorkflowResumeProcessAsync(System.Guid sessionId, System.Guid processId, object userState) {
        if ((this.WorkflowResumeProcessOperationCompleted == null)) {
            this.WorkflowResumeProcessOperationCompleted = new System.Threading.SendOrPostCallback(this.OnWorkflowResumeProcessOperationCompleted);
        }
        this.InvokeAsync("WorkflowResumeProcess", new object[] {
                    sessionId,
                    processId}, this.WorkflowResumeProcessOperationCompleted, userState);
    }
    
    private void OnWorkflowResumeProcessOperationCompleted(object arg) {
        if ((this.WorkflowResumeProcessCompleted != null)) {
            System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
            this.WorkflowResumeProcessCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
        }
    }
    
    /// <remarks/>
    [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://schemas.docsvision.com/Platform/2009-02-03/StorageServer/WorkflowSetProces" +
        "sPriority", RequestNamespace="http://schemas.docsvision.com/Platform/2009-02-03/StorageServer/", ResponseNamespace="http://schemas.docsvision.com/Platform/2009-02-03/StorageServer/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
    public void WorkflowSetProcessPriority(System.Guid sessionId, System.Guid processId, int priority) {
        this.Invoke("WorkflowSetProcessPriority", new object[] {
                    sessionId,
                    processId,
                    priority});
    }
    
    /// <remarks/>
    public System.IAsyncResult BeginWorkflowSetProcessPriority(System.Guid sessionId, System.Guid processId, int priority, System.AsyncCallback callback, object asyncState) {
        return this.BeginInvoke("WorkflowSetProcessPriority", new object[] {
                    sessionId,
                    processId,
                    priority}, callback, asyncState);
    }
    
    /// <remarks/>
    public void EndWorkflowSetProcessPriority(System.IAsyncResult asyncResult) {
        this.EndInvoke(asyncResult);
    }
    
    /// <remarks/>
    public void WorkflowSetProcessPriorityAsync(System.Guid sessionId, System.Guid processId, int priority) {
        this.WorkflowSetProcessPriorityAsync(sessionId, processId, priority, null);
    }
    
    /// <remarks/>
    public void WorkflowSetProcessPriorityAsync(System.Guid sessionId, System.Guid processId, int priority, object userState) {
        if ((this.WorkflowSetProcessPriorityOperationCompleted == null)) {
            this.WorkflowSetProcessPriorityOperationCompleted = new System.Threading.SendOrPostCallback(this.OnWorkflowSetProcessPriorityOperationCompleted);
        }
        this.InvokeAsync("WorkflowSetProcessPriority", new object[] {
                    sessionId,
                    processId,
                    priority}, this.WorkflowSetProcessPriorityOperationCompleted, userState);
    }
    
    private void OnWorkflowSetProcessPriorityOperationCompleted(object arg) {
        if ((this.WorkflowSetProcessPriorityCompleted != null)) {
            System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
            this.WorkflowSetProcessPriorityCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
        }
    }
    
    /// <remarks/>
    [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://schemas.docsvision.com/Platform/2009-02-03/StorageServer/WorkflowSetServic" +
        "eState", RequestNamespace="http://schemas.docsvision.com/Platform/2009-02-03/StorageServer/", ResponseNamespace="http://schemas.docsvision.com/Platform/2009-02-03/StorageServer/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
    public void WorkflowSetServiceState(System.Guid sessionId, string serviceId, WorkflowServiceStateEnum state) {
        this.Invoke("WorkflowSetServiceState", new object[] {
                    sessionId,
                    serviceId,
                    state});
    }
    
    /// <remarks/>
    public System.IAsyncResult BeginWorkflowSetServiceState(System.Guid sessionId, string serviceId, WorkflowServiceStateEnum state, System.AsyncCallback callback, object asyncState) {
        return this.BeginInvoke("WorkflowSetServiceState", new object[] {
                    sessionId,
                    serviceId,
                    state}, callback, asyncState);
    }
    
    /// <remarks/>
    public void EndWorkflowSetServiceState(System.IAsyncResult asyncResult) {
        this.EndInvoke(asyncResult);
    }
    
    /// <remarks/>
    public void WorkflowSetServiceStateAsync(System.Guid sessionId, string serviceId, WorkflowServiceStateEnum state) {
        this.WorkflowSetServiceStateAsync(sessionId, serviceId, state, null);
    }
    
    /// <remarks/>
    public void WorkflowSetServiceStateAsync(System.Guid sessionId, string serviceId, WorkflowServiceStateEnum state, object userState) {
        if ((this.WorkflowSetServiceStateOperationCompleted == null)) {
            this.WorkflowSetServiceStateOperationCompleted = new System.Threading.SendOrPostCallback(this.OnWorkflowSetServiceStateOperationCompleted);
        }
        this.InvokeAsync("WorkflowSetServiceState", new object[] {
                    sessionId,
                    serviceId,
                    state}, this.WorkflowSetServiceStateOperationCompleted, userState);
    }
    
    private void OnWorkflowSetServiceStateOperationCompleted(object arg) {
        if ((this.WorkflowSetServiceStateCompleted != null)) {
            System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
            this.WorkflowSetServiceStateCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
        }
    }
    
    /// <remarks/>
    [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://schemas.docsvision.com/Platform/2009-02-03/StorageServer/WorkflowStartProc" +
        "ess", RequestNamespace="http://schemas.docsvision.com/Platform/2009-02-03/StorageServer/", ResponseNamespace="http://schemas.docsvision.com/Platform/2009-02-03/StorageServer/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
    public void WorkflowStartProcess(System.Guid sessionId, System.Guid processId) {
        this.Invoke("WorkflowStartProcess", new object[] {
                    sessionId,
                    processId});
    }
    
    /// <remarks/>
    public System.IAsyncResult BeginWorkflowStartProcess(System.Guid sessionId, System.Guid processId, System.AsyncCallback callback, object asyncState) {
        return this.BeginInvoke("WorkflowStartProcess", new object[] {
                    sessionId,
                    processId}, callback, asyncState);
    }
    
    /// <remarks/>
    public void EndWorkflowStartProcess(System.IAsyncResult asyncResult) {
        this.EndInvoke(asyncResult);
    }
    
    /// <remarks/>
    public void WorkflowStartProcessAsync(System.Guid sessionId, System.Guid processId) {
        this.WorkflowStartProcessAsync(sessionId, processId, null);
    }
    
    /// <remarks/>
    public void WorkflowStartProcessAsync(System.Guid sessionId, System.Guid processId, object userState) {
        if ((this.WorkflowStartProcessOperationCompleted == null)) {
            this.WorkflowStartProcessOperationCompleted = new System.Threading.SendOrPostCallback(this.OnWorkflowStartProcessOperationCompleted);
        }
        this.InvokeAsync("WorkflowStartProcess", new object[] {
                    sessionId,
                    processId}, this.WorkflowStartProcessOperationCompleted, userState);
    }
    
    private void OnWorkflowStartProcessOperationCompleted(object arg) {
        if ((this.WorkflowStartProcessCompleted != null)) {
            System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
            this.WorkflowStartProcessCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
        }
    }
    
    /// <remarks/>
    [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://schemas.docsvision.com/Platform/2009-02-03/StorageServer/WorkflowStepProce" +
        "ss", RequestNamespace="http://schemas.docsvision.com/Platform/2009-02-03/StorageServer/", ResponseNamespace="http://schemas.docsvision.com/Platform/2009-02-03/StorageServer/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
    public void WorkflowStepProcess(System.Guid sessionId, System.Guid processId) {
        this.Invoke("WorkflowStepProcess", new object[] {
                    sessionId,
                    processId});
    }
    
    /// <remarks/>
    public System.IAsyncResult BeginWorkflowStepProcess(System.Guid sessionId, System.Guid processId, System.AsyncCallback callback, object asyncState) {
        return this.BeginInvoke("WorkflowStepProcess", new object[] {
                    sessionId,
                    processId}, callback, asyncState);
    }
    
    /// <remarks/>
    public void EndWorkflowStepProcess(System.IAsyncResult asyncResult) {
        this.EndInvoke(asyncResult);
    }
    
    /// <remarks/>
    public void WorkflowStepProcessAsync(System.Guid sessionId, System.Guid processId) {
        this.WorkflowStepProcessAsync(sessionId, processId, null);
    }
    
    /// <remarks/>
    public void WorkflowStepProcessAsync(System.Guid sessionId, System.Guid processId, object userState) {
        if ((this.WorkflowStepProcessOperationCompleted == null)) {
            this.WorkflowStepProcessOperationCompleted = new System.Threading.SendOrPostCallback(this.OnWorkflowStepProcessOperationCompleted);
        }
        this.InvokeAsync("WorkflowStepProcess", new object[] {
                    sessionId,
                    processId}, this.WorkflowStepProcessOperationCompleted, userState);
    }
    
    private void OnWorkflowStepProcessOperationCompleted(object arg) {
        if ((this.WorkflowStepProcessCompleted != null)) {
            System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
            this.WorkflowStepProcessCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
        }
    }
    
    /// <remarks/>
    [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://schemas.docsvision.com/Platform/2009-02-03/StorageServer/WorkflowStopProce" +
        "ss", RequestNamespace="http://schemas.docsvision.com/Platform/2009-02-03/StorageServer/", ResponseNamespace="http://schemas.docsvision.com/Platform/2009-02-03/StorageServer/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
    public void WorkflowStopProcess(System.Guid sessionId, System.Guid processId) {
        this.Invoke("WorkflowStopProcess", new object[] {
                    sessionId,
                    processId});
    }
    
    /// <remarks/>
    public System.IAsyncResult BeginWorkflowStopProcess(System.Guid sessionId, System.Guid processId, System.AsyncCallback callback, object asyncState) {
        return this.BeginInvoke("WorkflowStopProcess", new object[] {
                    sessionId,
                    processId}, callback, asyncState);
    }
    
    /// <remarks/>
    public void EndWorkflowStopProcess(System.IAsyncResult asyncResult) {
        this.EndInvoke(asyncResult);
    }
    
    /// <remarks/>
    public void WorkflowStopProcessAsync(System.Guid sessionId, System.Guid processId) {
        this.WorkflowStopProcessAsync(sessionId, processId, null);
    }
    
    /// <remarks/>
    public void WorkflowStopProcessAsync(System.Guid sessionId, System.Guid processId, object userState) {
        if ((this.WorkflowStopProcessOperationCompleted == null)) {
            this.WorkflowStopProcessOperationCompleted = new System.Threading.SendOrPostCallback(this.OnWorkflowStopProcessOperationCompleted);
        }
        this.InvokeAsync("WorkflowStopProcess", new object[] {
                    sessionId,
                    processId}, this.WorkflowStopProcessOperationCompleted, userState);
    }
    
    private void OnWorkflowStopProcessOperationCompleted(object arg) {
        if ((this.WorkflowStopProcessCompleted != null)) {
            System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
            this.WorkflowStopProcessCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
        }
    }
    
    /// <remarks/>
    public new void CancelAsync(object userState) {
        base.CancelAsync(userState);
    }
}

/// <remarks/>
[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.8.3928.0")]
[System.SerializableAttribute()]
[System.Xml.Serialization.XmlTypeAttribute(Namespace="http://schemas.docsvision.com/Platform/2009-02-03/StorageServer/")]
public enum CardStateEnum {
    
    /// <remarks/>
    CARD_STATE_NOT_EXISTING,
    
    /// <remarks/>
    CARD_STATE_EXISTING,
    
    /// <remarks/>
    CARD_STATE_DELETED,
}

/// <remarks/>
[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.8.3928.0")]
[System.SerializableAttribute()]
[System.Xml.Serialization.XmlTypeAttribute(Namespace="http://schemas.docsvision.com/Platform/2009-02-03/StorageServer/")]
public enum CardTypeInfoEnum {
    
    /// <remarks/>
    CARD_TYPE_SCHEMA,
    
    /// <remarks/>
    CARD_TYPE_ICON,
    
    /// <remarks/>
    CARD_TYPE_XSD,
}

/// <remarks/>
[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.8.3928.0")]
[System.SerializableAttribute()]
[System.Xml.Serialization.XmlTypeAttribute(Namespace="http://schemas.docsvision.com/Platform/2009-02-03/StorageServer/")]
public enum RecordStatus {
    
    /// <remarks/>
    OBJECT_STATUS_OPERATIVE,
    
    /// <remarks/>
    OBJECT_STATUS_RECORD,
    
    /// <remarks/>
    OBJECT_STATUS_WITHDRAWN,
}

/// <remarks/>
[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.8.3928.0")]
[System.SerializableAttribute()]
[System.Xml.Serialization.XmlTypeAttribute(Namespace="http://schemas.docsvision.com/Platform/2009-02-03/StorageServer/")]
public enum CryptoDataTypeEnum {
    
    /// <remarks/>
    CRYPTO_SIGNATURE,
    
    /// <remarks/>
    CRYPTO_KEY,
}

/// <remarks/>
[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.8.3928.0")]
[System.SerializableAttribute()]
[System.Diagnostics.DebuggerStepThroughAttribute()]
[System.ComponentModel.DesignerCategoryAttribute("code")]
[System.Xml.Serialization.XmlTypeAttribute(Namespace="http://schemas.docsvision.com/Platform/2009-02-03/StorageServer/")]
public partial class CursorInfo {
    
    private System.Guid idField;
    
    private uint pageCountField;
    
    private uint rowCountField;
    
    private string firstPageField;
    
    private bool usingCompressionField;
    
    /// <remarks/>
    public System.Guid ID {
        get {
            return this.idField;
        }
        set {
            this.idField = value;
        }
    }
    
    /// <remarks/>
    public uint PageCount {
        get {
            return this.pageCountField;
        }
        set {
            this.pageCountField = value;
        }
    }
    
    /// <remarks/>
    public uint RowCount {
        get {
            return this.rowCountField;
        }
        set {
            this.rowCountField = value;
        }
    }
    
    /// <remarks/>
    public string FirstPage {
        get {
            return this.firstPageField;
        }
        set {
            this.firstPageField = value;
        }
    }
    
    /// <remarks/>
    public bool UsingCompression {
        get {
            return this.usingCompressionField;
        }
        set {
            this.usingCompressionField = value;
        }
    }
}

/// <remarks/>
[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.8.3928.0")]
[System.SerializableAttribute()]
[System.Diagnostics.DebuggerStepThroughAttribute()]
[System.ComponentModel.DesignerCategoryAttribute("code")]
[System.Xml.Serialization.XmlTypeAttribute(Namespace="http://schemas.docsvision.com/Platform/2009-02-03/StorageServer/")]
public partial class CursorInfoEx {
    
    private System.Guid idField;
    
    private uint pageCountField;
    
    private uint rowCountField;
    
    private string firstPageField;
    
    private bool usingCompressionField;
    
    private uint pageSizeField;
    
    private uint currentPageField;
    
    private CursorTypeEnum cursorTypeField;
    
    /// <remarks/>
    public System.Guid ID {
        get {
            return this.idField;
        }
        set {
            this.idField = value;
        }
    }
    
    /// <remarks/>
    public uint PageCount {
        get {
            return this.pageCountField;
        }
        set {
            this.pageCountField = value;
        }
    }
    
    /// <remarks/>
    public uint RowCount {
        get {
            return this.rowCountField;
        }
        set {
            this.rowCountField = value;
        }
    }
    
    /// <remarks/>
    public string FirstPage {
        get {
            return this.firstPageField;
        }
        set {
            this.firstPageField = value;
        }
    }
    
    /// <remarks/>
    public bool UsingCompression {
        get {
            return this.usingCompressionField;
        }
        set {
            this.usingCompressionField = value;
        }
    }
    
    /// <remarks/>
    public uint PageSize {
        get {
            return this.pageSizeField;
        }
        set {
            this.pageSizeField = value;
        }
    }
    
    /// <remarks/>
    public uint CurrentPage {
        get {
            return this.currentPageField;
        }
        set {
            this.currentPageField = value;
        }
    }
    
    /// <remarks/>
    public CursorTypeEnum CursorType {
        get {
            return this.cursorTypeField;
        }
        set {
            this.cursorTypeField = value;
        }
    }
}

/// <remarks/>
[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.8.3928.0")]
[System.SerializableAttribute()]
[System.Xml.Serialization.XmlTypeAttribute(Namespace="http://schemas.docsvision.com/Platform/2009-02-03/StorageServer/")]
public enum CursorTypeEnum {
    
    /// <remarks/>
    CURSOR_TYPE_DEFAULT,
    
    /// <remarks/>
    CURSOR_TYPE_STANDARD,
    
    /// <remarks/>
    CURSOR_TYPE_KEYSET,
    
    /// <remarks/>
    CURSOR_TYPE_ICON,
}

/// <remarks/>
[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.8.3928.0")]
[System.SerializableAttribute()]
[System.Diagnostics.DebuggerStepThroughAttribute()]
[System.ComponentModel.DesignerCategoryAttribute("code")]
[System.Xml.Serialization.XmlTypeAttribute(Namespace="http://schemas.docsvision.com/Platform/2009-02-03/StorageServer/")]
public partial class ObjectInfo {
    
    private System.Guid instanceIDField;
    
    private System.Guid sectionTypeIDField;
    
    private System.Guid parentIDField;
    
    /// <remarks/>
    public System.Guid InstanceID {
        get {
            return this.instanceIDField;
        }
        set {
            this.instanceIDField = value;
        }
    }
    
    /// <remarks/>
    public System.Guid SectionTypeID {
        get {
            return this.sectionTypeIDField;
        }
        set {
            this.sectionTypeIDField = value;
        }
    }
    
    /// <remarks/>
    public System.Guid ParentID {
        get {
            return this.parentIDField;
        }
        set {
            this.parentIDField = value;
        }
    }
}

/// <remarks/>
[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.8.3928.0")]
[System.SerializableAttribute()]
[System.Xml.Serialization.XmlTypeAttribute(Namespace="http://schemas.docsvision.com/Platform/2009-02-03/StorageServer/")]
public enum ReadTypeEnum {
    
    /// <remarks/>
    READ_SECTION,
    
    /// <remarks/>
    READ_SUBSECTION,
    
    /// <remarks/>
    READ_TREE,
    
    /// <remarks/>
    READ_TREE_LEVEL,
    
    /// <remarks/>
    READ_FIRST_TREE_LEVEL,
    
    /// <remarks/>
    READ_SEARCH_RESULTS,
}

/// <remarks/>
[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.8.3928.0")]
[System.SerializableAttribute()]
[System.Xml.Serialization.XmlTypeAttribute(Namespace="http://schemas.docsvision.com/Platform/2009-02-03/StorageServer/")]
public enum LockStatusEnum {
    
    /// <remarks/>
    STATUS_FREE,
    
    /// <remarks/>
    STATUS_LOCKED,
    
    /// <remarks/>
    STATUS_CHECKED_OUT,
    
    /// <remarks/>
    STATUS_OWNER_LOCKED,
    
    /// <remarks/>
    STATUS_OWNER_CHECKED_OUT,
}

/// <remarks/>
[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.8.3928.0")]
[System.SerializableAttribute()]
[System.Xml.Serialization.XmlTypeAttribute(Namespace="http://schemas.docsvision.com/Platform/2009-02-03/StorageServer/")]
public enum ResourceTypeEnum {
    
    /// <remarks/>
    CUSTOM,
    
    /// <remarks/>
    CARD,
    
    /// <remarks/>
    FILE,
    
    /// <remarks/>
    ROW,
}

/// <remarks/>
[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.8.3928.0")]
[System.SerializableAttribute()]
[System.Xml.Serialization.XmlTypeAttribute(Namespace="http://schemas.docsvision.com/Platform/2009-02-03/StorageServer/")]
public enum LogStrategyEnum {
    
    /// <remarks/>
    LOG_NO_LOGGING,
    
    /// <remarks/>
    LOG_FILTERED,
    
    /// <remarks/>
    LOG_EVERYTHING,
}

/// <remarks/>
[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.8.3928.0")]
[System.SerializableAttribute()]
[System.Xml.Serialization.XmlTypeAttribute(Namespace="http://schemas.docsvision.com/Platform/2009-02-03/StorageServer/")]
public enum ClearLogStrategyEnum {
    
    /// <remarks/>
    CLEAR_LOG_NEVER,
    
    /// <remarks/>
    CLEAR_LOG_BY_COUNT,
    
    /// <remarks/>
    CLEAR_LOG_BY_DATE,
}

/// <remarks/>
[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.8.3928.0")]
[System.SerializableAttribute()]
[System.Xml.Serialization.XmlTypeAttribute(Namespace="http://schemas.docsvision.com/Platform/2009-02-03/StorageServer/")]
public enum EventTypeEnum {
    
    /// <remarks/>
    EVENT_TYPE_ERROR,
    
    /// <remarks/>
    EVENT_TYPE_INFORMATION,
    
    /// <remarks/>
    EVENT_TYPE_WARNING,
    
    /// <remarks/>
    EVENT_TYPE_AUDIT,
}

/// <remarks/>
[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.8.3928.0")]
[System.SerializableAttribute()]
[System.Xml.Serialization.XmlTypeAttribute(Namespace="http://schemas.docsvision.com/Platform/2009-02-03/StorageServer/")]
public enum NumberStatusEnum {
    
    /// <remarks/>
    NUMBER_STATUS_FREE,
    
    /// <remarks/>
    NUMBER_STATUS_IN_USE,
    
    /// <remarks/>
    NUMBER_STATUS_RESERVED,
    
    /// <remarks/>
    NUMBER_STATUS_NOT_EXISTS,
}

/// <remarks/>
[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.8.3928.0")]
[System.SerializableAttribute()]
[System.Xml.Serialization.XmlTypeAttribute(Namespace="http://schemas.docsvision.com/Platform/2009-02-03/StorageServer/")]
public enum SecureObjectEnum {
    
    /// <remarks/>
    SECURE_ROW,
    
    /// <remarks/>
    SECURE_CARD,
    
    /// <remarks/>
    SECURE_FILE,
    
    /// <remarks/>
    SECURE_OBJECT,
    
    /// <remarks/>
    SECURE_REPORT,
    
    /// <remarks/>
    SECURE_CARDTYPE,
}

/// <remarks/>
[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.8.3928.0")]
[System.SerializableAttribute()]
[System.Xml.Serialization.XmlTypeAttribute(Namespace="http://schemas.docsvision.com/Platform/2009-02-03/StorageServer/")]
public enum ViewSourceEnum {
    
    /// <remarks/>
    VIEW_FROM_FOLDER,
    
    /// <remarks/>
    VIEW_FROM_CARD_TYPE,
    
    /// <remarks/>
    VIEW_FROM_SEARCH,
    
    /// <remarks/>
    VIEW_FROM_DELETED,
    
    /// <remarks/>
    VIEW_FROM_SEARCH_RESULTS,
    
    /// <remarks/>
    VIEW_FROM_INSTANCE,
    
    /// <remarks/>
    VIEW_FROM_LIMITED_FOLDER,
}

/// <remarks/>
[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.8.3928.0")]
[System.SerializableAttribute()]
[System.Xml.Serialization.XmlTypeAttribute(Namespace="http://schemas.docsvision.com/Platform/2009-02-03/StorageServer/")]
public enum WorkflowServiceStateEnum {
    
    /// <remarks/>
    WORKFLOW_SERVICE_STOPPED,
    
    /// <remarks/>
    WORKFLOW_SERVICE_ACTIVE,
    
    /// <remarks/>
    WORKFLOW_SERVICE_RESTARTING,
    
    /// <remarks/>
    WORKFLOW_SERVICE_NOT_REGISTERED,
}

/// <remarks/>
[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.8.3928.0")]
public delegate void HealthCheckCompletedEventHandler(object sender, HealthCheckCompletedEventArgs e);

/// <remarks/>
[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.8.3928.0")]
[System.Diagnostics.DebuggerStepThroughAttribute()]
[System.ComponentModel.DesignerCategoryAttribute("code")]
public partial class HealthCheckCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
    
    private object[] results;
    
    internal HealthCheckCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
            base(exception, cancelled, userState) {
        this.results = results;
    }
    
    /// <remarks/>
    public string Result {
        get {
            this.RaiseExceptionIfNecessary();
            return ((string)(this.results[0]));
        }
    }
}

/// <remarks/>
[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.8.3928.0")]
public delegate void BatchUpdateCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);

/// <remarks/>
[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.8.3928.0")]
public delegate void CardAddToTopicChainCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);

/// <remarks/>
[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.8.3928.0")]
public delegate void CardArchiveCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);

/// <remarks/>
[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.8.3928.0")]
public delegate void CardArchiveGroupCompletedEventHandler(object sender, CardArchiveGroupCompletedEventArgs e);

/// <remarks/>
[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.8.3928.0")]
[System.Diagnostics.DebuggerStepThroughAttribute()]
[System.ComponentModel.DesignerCategoryAttribute("code")]
public partial class CardArchiveGroupCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
    
    private object[] results;
    
    internal CardArchiveGroupCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
            base(exception, cancelled, userState) {
        this.results = results;
    }
    
    /// <remarks/>
    public string Result {
        get {
            this.RaiseExceptionIfNecessary();
            return ((string)(this.results[0]));
        }
    }
}

/// <remarks/>
[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.8.3928.0")]
public delegate void CardCopyCompletedEventHandler(object sender, CardCopyCompletedEventArgs e);

/// <remarks/>
[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.8.3928.0")]
[System.Diagnostics.DebuggerStepThroughAttribute()]
[System.ComponentModel.DesignerCategoryAttribute("code")]
public partial class CardCopyCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
    
    private object[] results;
    
    internal CardCopyCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
            base(exception, cancelled, userState) {
        this.results = results;
    }
    
    /// <remarks/>
    public System.Guid Result {
        get {
            this.RaiseExceptionIfNecessary();
            return ((System.Guid)(this.results[0]));
        }
    }
}

/// <remarks/>
[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.8.3928.0")]
public delegate void CardCopyGroupCompletedEventHandler(object sender, CardCopyGroupCompletedEventArgs e);

/// <remarks/>
[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.8.3928.0")]
[System.Diagnostics.DebuggerStepThroughAttribute()]
[System.ComponentModel.DesignerCategoryAttribute("code")]
public partial class CardCopyGroupCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
    
    private object[] results;
    
    internal CardCopyGroupCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
            base(exception, cancelled, userState) {
        this.results = results;
    }
    
    /// <remarks/>
    public string Result {
        get {
            this.RaiseExceptionIfNecessary();
            return ((string)(this.results[0]));
        }
    }
    
    /// <remarks/>
    public string failedItems {
        get {
            this.RaiseExceptionIfNecessary();
            return ((string)(this.results[1]));
        }
    }
}

/// <remarks/>
[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.8.3928.0")]
public delegate void CardCreateCompletedEventHandler(object sender, CardCreateCompletedEventArgs e);

/// <remarks/>
[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.8.3928.0")]
[System.Diagnostics.DebuggerStepThroughAttribute()]
[System.ComponentModel.DesignerCategoryAttribute("code")]
public partial class CardCreateCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
    
    private object[] results;
    
    internal CardCreateCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
            base(exception, cancelled, userState) {
        this.results = results;
    }
    
    /// <remarks/>
    public System.Guid newInstanceId {
        get {
            this.RaiseExceptionIfNecessary();
            return ((System.Guid)(this.results[0]));
        }
    }
}

/// <remarks/>
[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.8.3928.0")]
public delegate void CardCreateExCompletedEventHandler(object sender, CardCreateExCompletedEventArgs e);

/// <remarks/>
[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.8.3928.0")]
[System.Diagnostics.DebuggerStepThroughAttribute()]
[System.ComponentModel.DesignerCategoryAttribute("code")]
public partial class CardCreateExCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
    
    private object[] results;
    
    internal CardCreateExCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
            base(exception, cancelled, userState) {
        this.results = results;
    }
    
    /// <remarks/>
    public string Result {
        get {
            this.RaiseExceptionIfNecessary();
            return ((string)(this.results[0]));
        }
    }
    
    /// <remarks/>
    public System.Guid newInstanceId {
        get {
            this.RaiseExceptionIfNecessary();
            return ((System.Guid)(this.results[1]));
        }
    }
}

/// <remarks/>
[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.8.3928.0")]
public delegate void CardDearchiveCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);

/// <remarks/>
[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.8.3928.0")]
public delegate void CardDearchiveGroupCompletedEventHandler(object sender, CardDearchiveGroupCompletedEventArgs e);

/// <remarks/>
[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.8.3928.0")]
[System.Diagnostics.DebuggerStepThroughAttribute()]
[System.ComponentModel.DesignerCategoryAttribute("code")]
public partial class CardDearchiveGroupCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
    
    private object[] results;
    
    internal CardDearchiveGroupCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
            base(exception, cancelled, userState) {
        this.results = results;
    }
    
    /// <remarks/>
    public string Result {
        get {
            this.RaiseExceptionIfNecessary();
            return ((string)(this.results[0]));
        }
    }
}

/// <remarks/>
[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.8.3928.0")]
public delegate void CardDeleteCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);

/// <remarks/>
[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.8.3928.0")]
public delegate void CardDeleteGroupCompletedEventHandler(object sender, CardDeleteGroupCompletedEventArgs e);

/// <remarks/>
[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.8.3928.0")]
[System.Diagnostics.DebuggerStepThroughAttribute()]
[System.ComponentModel.DesignerCategoryAttribute("code")]
public partial class CardDeleteGroupCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
    
    private object[] results;
    
    internal CardDeleteGroupCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
            base(exception, cancelled, userState) {
        this.results = results;
    }
    
    /// <remarks/>
    public string Result {
        get {
            this.RaiseExceptionIfNecessary();
            return ((string)(this.results[0]));
        }
    }
}

/// <remarks/>
[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.8.3928.0")]
public delegate void CardGetInfoCompletedEventHandler(object sender, CardGetInfoCompletedEventArgs e);

/// <remarks/>
[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.8.3928.0")]
[System.Diagnostics.DebuggerStepThroughAttribute()]
[System.ComponentModel.DesignerCategoryAttribute("code")]
public partial class CardGetInfoCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
    
    private object[] results;
    
    internal CardGetInfoCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
            base(exception, cancelled, userState) {
        this.results = results;
    }
    
    /// <remarks/>
    public string Result {
        get {
            this.RaiseExceptionIfNecessary();
            return ((string)(this.results[0]));
        }
    }
}

/// <remarks/>
[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.8.3928.0")]
public delegate void CardGetInfoExCompletedEventHandler(object sender, CardGetInfoExCompletedEventArgs e);

/// <remarks/>
[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.8.3928.0")]
[System.Diagnostics.DebuggerStepThroughAttribute()]
[System.ComponentModel.DesignerCategoryAttribute("code")]
public partial class CardGetInfoExCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
    
    private object[] results;
    
    internal CardGetInfoExCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
            base(exception, cancelled, userState) {
        this.results = results;
    }
    
    /// <remarks/>
    public string Result {
        get {
            this.RaiseExceptionIfNecessary();
            return ((string)(this.results[0]));
        }
    }
}

/// <remarks/>
[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.8.3928.0")]
public delegate void CardGetListCompletedEventHandler(object sender, CardGetListCompletedEventArgs e);

/// <remarks/>
[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.8.3928.0")]
[System.Diagnostics.DebuggerStepThroughAttribute()]
[System.ComponentModel.DesignerCategoryAttribute("code")]
public partial class CardGetListCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
    
    private object[] results;
    
    internal CardGetListCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
            base(exception, cancelled, userState) {
        this.results = results;
    }
    
    /// <remarks/>
    public string Result {
        get {
            this.RaiseExceptionIfNecessary();
            return ((string)(this.results[0]));
        }
    }
}

/// <remarks/>
[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.8.3928.0")]
public delegate void CardGetStateCompletedEventHandler(object sender, CardGetStateCompletedEventArgs e);

/// <remarks/>
[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.8.3928.0")]
[System.Diagnostics.DebuggerStepThroughAttribute()]
[System.ComponentModel.DesignerCategoryAttribute("code")]
public partial class CardGetStateCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
    
    private object[] results;
    
    internal CardGetStateCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
            base(exception, cancelled, userState) {
        this.results = results;
    }
    
    /// <remarks/>
    public CardStateEnum Result {
        get {
            this.RaiseExceptionIfNecessary();
            return ((CardStateEnum)(this.results[0]));
        }
    }
}

/// <remarks/>
[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.8.3928.0")]
public delegate void CardLibGetInfoCompletedEventHandler(object sender, CardLibGetInfoCompletedEventArgs e);

/// <remarks/>
[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.8.3928.0")]
[System.Diagnostics.DebuggerStepThroughAttribute()]
[System.ComponentModel.DesignerCategoryAttribute("code")]
public partial class CardLibGetInfoCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
    
    private object[] results;
    
    internal CardLibGetInfoCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
            base(exception, cancelled, userState) {
        this.results = results;
    }
    
    /// <remarks/>
    public string Result {
        get {
            this.RaiseExceptionIfNecessary();
            return ((string)(this.results[0]));
        }
    }
    
    /// <remarks/>
    public bool usingCompression {
        get {
            this.RaiseExceptionIfNecessary();
            return ((bool)(this.results[1]));
        }
    }
}

/// <remarks/>
[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.8.3928.0")]
public delegate void CardLibGetInfoInstallCompletedEventHandler(object sender, CardLibGetInfoInstallCompletedEventArgs e);

/// <remarks/>
[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.8.3928.0")]
[System.Diagnostics.DebuggerStepThroughAttribute()]
[System.ComponentModel.DesignerCategoryAttribute("code")]
public partial class CardLibGetInfoInstallCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
    
    private object[] results;
    
    internal CardLibGetInfoInstallCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
            base(exception, cancelled, userState) {
        this.results = results;
    }
    
    /// <remarks/>
    public string Result {
        get {
            this.RaiseExceptionIfNecessary();
            return ((string)(this.results[0]));
        }
    }
    
    /// <remarks/>
    public bool usingCompression {
        get {
            this.RaiseExceptionIfNecessary();
            return ((bool)(this.results[1]));
        }
    }
}

/// <remarks/>
[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.8.3928.0")]
public delegate void CardLibGetListCompletedEventHandler(object sender, CardLibGetListCompletedEventArgs e);

/// <remarks/>
[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.8.3928.0")]
[System.Diagnostics.DebuggerStepThroughAttribute()]
[System.ComponentModel.DesignerCategoryAttribute("code")]
public partial class CardLibGetListCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
    
    private object[] results;
    
    internal CardLibGetListCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
            base(exception, cancelled, userState) {
        this.results = results;
    }
    
    /// <remarks/>
    public string Result {
        get {
            this.RaiseExceptionIfNecessary();
            return ((string)(this.results[0]));
        }
    }
    
    /// <remarks/>
    public bool usingCompression {
        get {
            this.RaiseExceptionIfNecessary();
            return ((bool)(this.results[1]));
        }
    }
}

/// <remarks/>
[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.8.3928.0")]
public delegate void CardPurgeCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);

/// <remarks/>
[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.8.3928.0")]
public delegate void CardRestoreCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);

/// <remarks/>
[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.8.3928.0")]
public delegate void CardRestoreGroupCompletedEventHandler(object sender, CardRestoreGroupCompletedEventArgs e);

/// <remarks/>
[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.8.3928.0")]
[System.Diagnostics.DebuggerStepThroughAttribute()]
[System.ComponentModel.DesignerCategoryAttribute("code")]
public partial class CardRestoreGroupCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
    
    private object[] results;
    
    internal CardRestoreGroupCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
            base(exception, cancelled, userState) {
        this.results = results;
    }
    
    /// <remarks/>
    public string Result {
        get {
            this.RaiseExceptionIfNecessary();
            return ((string)(this.results[0]));
        }
    }
}

/// <remarks/>
[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.8.3928.0")]
public delegate void CardSetInfoCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);

/// <remarks/>
[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.8.3928.0")]
public delegate void CardSetInfoExCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);

/// <remarks/>
[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.8.3928.0")]
public delegate void CardSetReadStatusCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);

/// <remarks/>
[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.8.3928.0")]
public delegate void CardSetStatusCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);

/// <remarks/>
[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.8.3928.0")]
public delegate void CardTypeGetInfoCompletedEventHandler(object sender, CardTypeGetInfoCompletedEventArgs e);

/// <remarks/>
[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.8.3928.0")]
[System.Diagnostics.DebuggerStepThroughAttribute()]
[System.ComponentModel.DesignerCategoryAttribute("code")]
public partial class CardTypeGetInfoCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
    
    private object[] results;
    
    internal CardTypeGetInfoCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
            base(exception, cancelled, userState) {
        this.results = results;
    }
    
    /// <remarks/>
    public string Result {
        get {
            this.RaiseExceptionIfNecessary();
            return ((string)(this.results[0]));
        }
    }
    
    /// <remarks/>
    public bool usingCompression {
        get {
            this.RaiseExceptionIfNecessary();
            return ((bool)(this.results[1]));
        }
    }
}

/// <remarks/>
[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.8.3928.0")]
public delegate void CardTypeGetListCompletedEventHandler(object sender, CardTypeGetListCompletedEventArgs e);

/// <remarks/>
[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.8.3928.0")]
[System.Diagnostics.DebuggerStepThroughAttribute()]
[System.ComponentModel.DesignerCategoryAttribute("code")]
public partial class CardTypeGetListCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
    
    private object[] results;
    
    internal CardTypeGetListCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
            base(exception, cancelled, userState) {
        this.results = results;
    }
    
    /// <remarks/>
    public string Result {
        get {
            this.RaiseExceptionIfNecessary();
            return ((string)(this.results[0]));
        }
    }
    
    /// <remarks/>
    public bool usingCompression {
        get {
            this.RaiseExceptionIfNecessary();
            return ((bool)(this.results[1]));
        }
    }
}

/// <remarks/>
[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.8.3928.0")]
public delegate void CardTypeSetOptionsCompletedEventHandler(object sender, CardTypeSetOptionsCompletedEventArgs e);

/// <remarks/>
[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.8.3928.0")]
[System.Diagnostics.DebuggerStepThroughAttribute()]
[System.ComponentModel.DesignerCategoryAttribute("code")]
public partial class CardTypeSetOptionsCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
    
    private object[] results;
    
    internal CardTypeSetOptionsCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
            base(exception, cancelled, userState) {
        this.results = results;
    }
    
    /// <remarks/>
    public int options {
        get {
            this.RaiseExceptionIfNecessary();
            return ((int)(this.results[0]));
        }
    }
}

/// <remarks/>
[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.8.3928.0")]
public delegate void CryptoAddObjectCompletedEventHandler(object sender, CryptoAddObjectCompletedEventArgs e);

/// <remarks/>
[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.8.3928.0")]
[System.Diagnostics.DebuggerStepThroughAttribute()]
[System.ComponentModel.DesignerCategoryAttribute("code")]
public partial class CryptoAddObjectCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
    
    private object[] results;
    
    internal CryptoAddObjectCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
            base(exception, cancelled, userState) {
        this.results = results;
    }
    
    /// <remarks/>
    public System.Guid Result {
        get {
            this.RaiseExceptionIfNecessary();
            return ((System.Guid)(this.results[0]));
        }
    }
}

/// <remarks/>
[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.8.3928.0")]
public delegate void CryptoAddObjectExCompletedEventHandler(object sender, CryptoAddObjectExCompletedEventArgs e);

/// <remarks/>
[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.8.3928.0")]
[System.Diagnostics.DebuggerStepThroughAttribute()]
[System.ComponentModel.DesignerCategoryAttribute("code")]
public partial class CryptoAddObjectExCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
    
    private object[] results;
    
    internal CryptoAddObjectExCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
            base(exception, cancelled, userState) {
        this.results = results;
    }
    
    /// <remarks/>
    public System.Guid Result {
        get {
            this.RaiseExceptionIfNecessary();
            return ((System.Guid)(this.results[0]));
        }
    }
}

/// <remarks/>
[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.8.3928.0")]
public delegate void CryptoAddObjectWithIDCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);

/// <remarks/>
[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.8.3928.0")]
public delegate void CryptoDeleteObjectCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);

/// <remarks/>
[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.8.3928.0")]
public delegate void CryptoDeleteObjectByIDCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);

/// <remarks/>
[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.8.3928.0")]
public delegate void CryptoGetObjectCompletedEventHandler(object sender, CryptoGetObjectCompletedEventArgs e);

/// <remarks/>
[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.8.3928.0")]
[System.Diagnostics.DebuggerStepThroughAttribute()]
[System.ComponentModel.DesignerCategoryAttribute("code")]
public partial class CryptoGetObjectCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
    
    private object[] results;
    
    internal CryptoGetObjectCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
            base(exception, cancelled, userState) {
        this.results = results;
    }
    
    /// <remarks/>
    public byte[] Result {
        get {
            this.RaiseExceptionIfNecessary();
            return ((byte[])(this.results[0]));
        }
    }
}

/// <remarks/>
[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.8.3928.0")]
public delegate void CryptoGetObjectByIDCompletedEventHandler(object sender, CryptoGetObjectByIDCompletedEventArgs e);

/// <remarks/>
[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.8.3928.0")]
[System.Diagnostics.DebuggerStepThroughAttribute()]
[System.ComponentModel.DesignerCategoryAttribute("code")]
public partial class CryptoGetObjectByIDCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
    
    private object[] results;
    
    internal CryptoGetObjectByIDCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
            base(exception, cancelled, userState) {
        this.results = results;
    }
    
    /// <remarks/>
    public byte[] Result {
        get {
            this.RaiseExceptionIfNecessary();
            return ((byte[])(this.results[0]));
        }
    }
}

/// <remarks/>
[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.8.3928.0")]
public delegate void CryptoGetObjectInfoCompletedEventHandler(object sender, CryptoGetObjectInfoCompletedEventArgs e);

/// <remarks/>
[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.8.3928.0")]
[System.Diagnostics.DebuggerStepThroughAttribute()]
[System.ComponentModel.DesignerCategoryAttribute("code")]
public partial class CryptoGetObjectInfoCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
    
    private object[] results;
    
    internal CryptoGetObjectInfoCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
            base(exception, cancelled, userState) {
        this.results = results;
    }
    
    /// <remarks/>
    public string Result {
        get {
            this.RaiseExceptionIfNecessary();
            return ((string)(this.results[0]));
        }
    }
}

/// <remarks/>
[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.8.3928.0")]
public delegate void CryptoListObjectsCompletedEventHandler(object sender, CryptoListObjectsCompletedEventArgs e);

/// <remarks/>
[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.8.3928.0")]
[System.Diagnostics.DebuggerStepThroughAttribute()]
[System.ComponentModel.DesignerCategoryAttribute("code")]
public partial class CryptoListObjectsCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
    
    private object[] results;
    
    internal CryptoListObjectsCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
            base(exception, cancelled, userState) {
        this.results = results;
    }
    
    /// <remarks/>
    public string Result {
        get {
            this.RaiseExceptionIfNecessary();
            return ((string)(this.results[0]));
        }
    }
}

/// <remarks/>
[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.8.3928.0")]
public delegate void CursorCloseCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);

/// <remarks/>
[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.8.3928.0")]
public delegate void CursorGetPageCountCompletedEventHandler(object sender, CursorGetPageCountCompletedEventArgs e);

/// <remarks/>
[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.8.3928.0")]
[System.Diagnostics.DebuggerStepThroughAttribute()]
[System.ComponentModel.DesignerCategoryAttribute("code")]
public partial class CursorGetPageCountCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
    
    private object[] results;
    
    internal CursorGetPageCountCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
            base(exception, cancelled, userState) {
        this.results = results;
    }
    
    /// <remarks/>
    public uint Result {
        get {
            this.RaiseExceptionIfNecessary();
            return ((uint)(this.results[0]));
        }
    }
}

/// <remarks/>
[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.8.3928.0")]
public delegate void CursorOpenCardDataCompletedEventHandler(object sender, CursorOpenCardDataCompletedEventArgs e);

/// <remarks/>
[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.8.3928.0")]
[System.Diagnostics.DebuggerStepThroughAttribute()]
[System.ComponentModel.DesignerCategoryAttribute("code")]
public partial class CursorOpenCardDataCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
    
    private object[] results;
    
    internal CursorOpenCardDataCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
            base(exception, cancelled, userState) {
        this.results = results;
    }
    
    /// <remarks/>
    public CursorInfo Result {
        get {
            this.RaiseExceptionIfNecessary();
            return ((CursorInfo)(this.results[0]));
        }
    }
    
    /// <remarks/>
    public long timestamp {
        get {
            this.RaiseExceptionIfNecessary();
            return ((long)(this.results[1]));
        }
    }
}

/// <remarks/>
[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.8.3928.0")]
public delegate void CursorOpenSectionDataCompletedEventHandler(object sender, CursorOpenSectionDataCompletedEventArgs e);

/// <remarks/>
[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.8.3928.0")]
[System.Diagnostics.DebuggerStepThroughAttribute()]
[System.ComponentModel.DesignerCategoryAttribute("code")]
public partial class CursorOpenSectionDataCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
    
    private object[] results;
    
    internal CursorOpenSectionDataCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
            base(exception, cancelled, userState) {
        this.results = results;
    }
    
    /// <remarks/>
    public CursorInfo Result {
        get {
            this.RaiseExceptionIfNecessary();
            return ((CursorInfo)(this.results[0]));
        }
    }
    
    /// <remarks/>
    public long timestamp {
        get {
            this.RaiseExceptionIfNecessary();
            return ((long)(this.results[1]));
        }
    }
}

/// <remarks/>
[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.8.3928.0")]
public delegate void CursorReadPageCompletedEventHandler(object sender, CursorReadPageCompletedEventArgs e);

/// <remarks/>
[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.8.3928.0")]
[System.Diagnostics.DebuggerStepThroughAttribute()]
[System.ComponentModel.DesignerCategoryAttribute("code")]
public partial class CursorReadPageCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
    
    private object[] results;
    
    internal CursorReadPageCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
            base(exception, cancelled, userState) {
        this.results = results;
    }
    
    /// <remarks/>
    public string Result {
        get {
            this.RaiseExceptionIfNecessary();
            return ((string)(this.results[0]));
        }
    }
    
    /// <remarks/>
    public bool usingCompression {
        get {
            this.RaiseExceptionIfNecessary();
            return ((bool)(this.results[1]));
        }
    }
}

/// <remarks/>
[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.8.3928.0")]
public delegate void CursorRefreshCardDataCompletedEventHandler(object sender, CursorRefreshCardDataCompletedEventArgs e);

/// <remarks/>
[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.8.3928.0")]
[System.Diagnostics.DebuggerStepThroughAttribute()]
[System.ComponentModel.DesignerCategoryAttribute("code")]
public partial class CursorRefreshCardDataCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
    
    private object[] results;
    
    internal CursorRefreshCardDataCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
            base(exception, cancelled, userState) {
        this.results = results;
    }
    
    /// <remarks/>
    public CursorInfo Result {
        get {
            this.RaiseExceptionIfNecessary();
            return ((CursorInfo)(this.results[0]));
        }
    }
    
    /// <remarks/>
    public long timestamp {
        get {
            this.RaiseExceptionIfNecessary();
            return ((long)(this.results[1]));
        }
    }
}

/// <remarks/>
[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.8.3928.0")]
public delegate void CursorRefreshSectionDataCompletedEventHandler(object sender, CursorRefreshSectionDataCompletedEventArgs e);

/// <remarks/>
[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.8.3928.0")]
[System.Diagnostics.DebuggerStepThroughAttribute()]
[System.ComponentModel.DesignerCategoryAttribute("code")]
public partial class CursorRefreshSectionDataCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
    
    private object[] results;
    
    internal CursorRefreshSectionDataCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
            base(exception, cancelled, userState) {
        this.results = results;
    }
    
    /// <remarks/>
    public CursorInfo Result {
        get {
            this.RaiseExceptionIfNecessary();
            return ((CursorInfo)(this.results[0]));
        }
    }
    
    /// <remarks/>
    public long timestamp {
        get {
            this.RaiseExceptionIfNecessary();
            return ((long)(this.results[1]));
        }
    }
    
    /// <remarks/>
    public int hash {
        get {
            this.RaiseExceptionIfNecessary();
            return ((int)(this.results[2]));
        }
    }
}

/// <remarks/>
[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.8.3928.0")]
public delegate void DecrementFeatureUsageCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);

/// <remarks/>
[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.8.3928.0")]
public delegate void DynamicFieldCreateCompletedEventHandler(object sender, DynamicFieldCreateCompletedEventArgs e);

/// <remarks/>
[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.8.3928.0")]
[System.Diagnostics.DebuggerStepThroughAttribute()]
[System.ComponentModel.DesignerCategoryAttribute("code")]
public partial class DynamicFieldCreateCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
    
    private object[] results;
    
    internal DynamicFieldCreateCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
            base(exception, cancelled, userState) {
        this.results = results;
    }
    
    /// <remarks/>
    public System.Guid Result {
        get {
            this.RaiseExceptionIfNecessary();
            return ((System.Guid)(this.results[0]));
        }
    }
}

/// <remarks/>
[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.8.3928.0")]
public delegate void DynamicFieldDeleteCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);

/// <remarks/>
[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.8.3928.0")]
public delegate void DynamicFieldGetInfoCompletedEventHandler(object sender, DynamicFieldGetInfoCompletedEventArgs e);

/// <remarks/>
[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.8.3928.0")]
[System.Diagnostics.DebuggerStepThroughAttribute()]
[System.ComponentModel.DesignerCategoryAttribute("code")]
public partial class DynamicFieldGetInfoCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
    
    private object[] results;
    
    internal DynamicFieldGetInfoCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
            base(exception, cancelled, userState) {
        this.results = results;
    }
    
    /// <remarks/>
    public string Result {
        get {
            this.RaiseExceptionIfNecessary();
            return ((string)(this.results[0]));
        }
    }
}

/// <remarks/>
[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.8.3928.0")]
public delegate void DynamicFieldUpdateCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);

/// <remarks/>
[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.8.3928.0")]
public delegate void DynamicMetadataGetInfoCompletedEventHandler(object sender, DynamicMetadataGetInfoCompletedEventArgs e);

/// <remarks/>
[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.8.3928.0")]
[System.Diagnostics.DebuggerStepThroughAttribute()]
[System.ComponentModel.DesignerCategoryAttribute("code")]
public partial class DynamicMetadataGetInfoCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
    
    private object[] results;
    
    internal DynamicMetadataGetInfoCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
            base(exception, cancelled, userState) {
        this.results = results;
    }
    
    /// <remarks/>
    public string Result {
        get {
            this.RaiseExceptionIfNecessary();
            return ((string)(this.results[0]));
        }
    }
}

/// <remarks/>
[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.8.3928.0")]
public delegate void DynamicMetadataUpdateCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);

/// <remarks/>
[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.8.3928.0")]
public delegate void DynamicSectionCreateCompletedEventHandler(object sender, DynamicSectionCreateCompletedEventArgs e);

/// <remarks/>
[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.8.3928.0")]
[System.Diagnostics.DebuggerStepThroughAttribute()]
[System.ComponentModel.DesignerCategoryAttribute("code")]
public partial class DynamicSectionCreateCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
    
    private object[] results;
    
    internal DynamicSectionCreateCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
            base(exception, cancelled, userState) {
        this.results = results;
    }
    
    /// <remarks/>
    public System.Guid Result {
        get {
            this.RaiseExceptionIfNecessary();
            return ((System.Guid)(this.results[0]));
        }
    }
}

/// <remarks/>
[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.8.3928.0")]
public delegate void DynamicSectionDeleteCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);

/// <remarks/>
[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.8.3928.0")]
public delegate void DynamicSectionGetInfoCompletedEventHandler(object sender, DynamicSectionGetInfoCompletedEventArgs e);

/// <remarks/>
[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.8.3928.0")]
[System.Diagnostics.DebuggerStepThroughAttribute()]
[System.ComponentModel.DesignerCategoryAttribute("code")]
public partial class DynamicSectionGetInfoCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
    
    private object[] results;
    
    internal DynamicSectionGetInfoCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
            base(exception, cancelled, userState) {
        this.results = results;
    }
    
    /// <remarks/>
    public string Result {
        get {
            this.RaiseExceptionIfNecessary();
            return ((string)(this.results[0]));
        }
    }
}

/// <remarks/>
[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.8.3928.0")]
public delegate void DynamicSectionUpdateCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);

/// <remarks/>
[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.8.3928.0")]
public delegate void ExtensionExecuteCursorMethodCompletedEventHandler(object sender, ExtensionExecuteCursorMethodCompletedEventArgs e);

/// <remarks/>
[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.8.3928.0")]
[System.Diagnostics.DebuggerStepThroughAttribute()]
[System.ComponentModel.DesignerCategoryAttribute("code")]
public partial class ExtensionExecuteCursorMethodCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
    
    private object[] results;
    
    internal ExtensionExecuteCursorMethodCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
            base(exception, cancelled, userState) {
        this.results = results;
    }
    
    /// <remarks/>
    public CursorInfo Result {
        get {
            this.RaiseExceptionIfNecessary();
            return ((CursorInfo)(this.results[0]));
        }
    }
}

/// <remarks/>
[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.8.3928.0")]
public delegate void ExtensionExecuteMethodCompletedEventHandler(object sender, ExtensionExecuteMethodCompletedEventArgs e);

/// <remarks/>
[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.8.3928.0")]
[System.Diagnostics.DebuggerStepThroughAttribute()]
[System.ComponentModel.DesignerCategoryAttribute("code")]
public partial class ExtensionExecuteMethodCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
    
    private object[] results;
    
    internal ExtensionExecuteMethodCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
            base(exception, cancelled, userState) {
        this.results = results;
    }
    
    /// <remarks/>
    public string Result {
        get {
            this.RaiseExceptionIfNecessary();
            return ((string)(this.results[0]));
        }
    }
}

/// <remarks/>
[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.8.3928.0")]
public delegate void FileArchiveCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);

/// <remarks/>
[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.8.3928.0")]
public delegate void FileArchiveGroupCompletedEventHandler(object sender, FileArchiveGroupCompletedEventArgs e);

/// <remarks/>
[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.8.3928.0")]
[System.Diagnostics.DebuggerStepThroughAttribute()]
[System.ComponentModel.DesignerCategoryAttribute("code")]
public partial class FileArchiveGroupCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
    
    private object[] results;
    
    internal FileArchiveGroupCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
            base(exception, cancelled, userState) {
        this.results = results;
    }
    
    /// <remarks/>
    public string Result {
        get {
            this.RaiseExceptionIfNecessary();
            return ((string)(this.results[0]));
        }
    }
}

/// <remarks/>
[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.8.3928.0")]
public delegate void FileBringOnLineCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);

/// <remarks/>
[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.8.3928.0")]
public delegate void FileBringOnLineGroupCompletedEventHandler(object sender, FileBringOnLineGroupCompletedEventArgs e);

/// <remarks/>
[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.8.3928.0")]
[System.Diagnostics.DebuggerStepThroughAttribute()]
[System.ComponentModel.DesignerCategoryAttribute("code")]
public partial class FileBringOnLineGroupCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
    
    private object[] results;
    
    internal FileBringOnLineGroupCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
            base(exception, cancelled, userState) {
        this.results = results;
    }
    
    /// <remarks/>
    public string Result {
        get {
            this.RaiseExceptionIfNecessary();
            return ((string)(this.results[0]));
        }
    }
}

/// <remarks/>
[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.8.3928.0")]
public delegate void FileCloseCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);

/// <remarks/>
[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.8.3928.0")]
public delegate void FileCopyCompletedEventHandler(object sender, FileCopyCompletedEventArgs e);

/// <remarks/>
[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.8.3928.0")]
[System.Diagnostics.DebuggerStepThroughAttribute()]
[System.ComponentModel.DesignerCategoryAttribute("code")]
public partial class FileCopyCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
    
    private object[] results;
    
    internal FileCopyCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
            base(exception, cancelled, userState) {
        this.results = results;
    }
    
    /// <remarks/>
    public System.Guid Result {
        get {
            this.RaiseExceptionIfNecessary();
            return ((System.Guid)(this.results[0]));
        }
    }
}

/// <remarks/>
[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.8.3928.0")]
public delegate void FileCreateCompletedEventHandler(object sender, FileCreateCompletedEventArgs e);

/// <remarks/>
[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.8.3928.0")]
[System.Diagnostics.DebuggerStepThroughAttribute()]
[System.ComponentModel.DesignerCategoryAttribute("code")]
public partial class FileCreateCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
    
    private object[] results;
    
    internal FileCreateCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
            base(exception, cancelled, userState) {
        this.results = results;
    }
    
    /// <remarks/>
    public System.Guid Result {
        get {
            this.RaiseExceptionIfNecessary();
            return ((System.Guid)(this.results[0]));
        }
    }
}

/// <remarks/>
[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.8.3928.0")]
public delegate void FileCreateExCompletedEventHandler(object sender, FileCreateExCompletedEventArgs e);

/// <remarks/>
[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.8.3928.0")]
[System.Diagnostics.DebuggerStepThroughAttribute()]
[System.ComponentModel.DesignerCategoryAttribute("code")]
public partial class FileCreateExCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
    
    private object[] results;
    
    internal FileCreateExCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
            base(exception, cancelled, userState) {
        this.results = results;
    }
    
    /// <remarks/>
    public System.Guid newFileId {
        get {
            this.RaiseExceptionIfNecessary();
            return ((System.Guid)(this.results[0]));
        }
    }
}

/// <remarks/>
[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.8.3928.0")]
public delegate void FileDearchiveCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);

/// <remarks/>
[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.8.3928.0")]
public delegate void FileDearchiveGroupCompletedEventHandler(object sender, FileDearchiveGroupCompletedEventArgs e);

/// <remarks/>
[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.8.3928.0")]
[System.Diagnostics.DebuggerStepThroughAttribute()]
[System.ComponentModel.DesignerCategoryAttribute("code")]
public partial class FileDearchiveGroupCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
    
    private object[] results;
    
    internal FileDearchiveGroupCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
            base(exception, cancelled, userState) {
        this.results = results;
    }
    
    /// <remarks/>
    public string Result {
        get {
            this.RaiseExceptionIfNecessary();
            return ((string)(this.results[0]));
        }
    }
}

/// <remarks/>
[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.8.3928.0")]
public delegate void FileDeleteCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);

/// <remarks/>
[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.8.3928.0")]
public delegate void FileExistsCompletedEventHandler(object sender, FileExistsCompletedEventArgs e);

/// <remarks/>
[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.8.3928.0")]
[System.Diagnostics.DebuggerStepThroughAttribute()]
[System.ComponentModel.DesignerCategoryAttribute("code")]
public partial class FileExistsCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
    
    private object[] results;
    
    internal FileExistsCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
            base(exception, cancelled, userState) {
        this.results = results;
    }
    
    /// <remarks/>
    public bool Result {
        get {
            this.RaiseExceptionIfNecessary();
            return ((bool)(this.results[0]));
        }
    }
}

/// <remarks/>
[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.8.3928.0")]
public delegate void FileFindCompletedEventHandler(object sender, FileFindCompletedEventArgs e);

/// <remarks/>
[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.8.3928.0")]
[System.Diagnostics.DebuggerStepThroughAttribute()]
[System.ComponentModel.DesignerCategoryAttribute("code")]
public partial class FileFindCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
    
    private object[] results;
    
    internal FileFindCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
            base(exception, cancelled, userState) {
        this.results = results;
    }
    
    /// <remarks/>
    public string Result {
        get {
            this.RaiseExceptionIfNecessary();
            return ((string)(this.results[0]));
        }
    }
}

/// <remarks/>
[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.8.3928.0")]
public delegate void FileGetInfoCompletedEventHandler(object sender, FileGetInfoCompletedEventArgs e);

/// <remarks/>
[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.8.3928.0")]
[System.Diagnostics.DebuggerStepThroughAttribute()]
[System.ComponentModel.DesignerCategoryAttribute("code")]
public partial class FileGetInfoCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
    
    private object[] results;
    
    internal FileGetInfoCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
            base(exception, cancelled, userState) {
        this.results = results;
    }
    
    /// <remarks/>
    public string Result {
        get {
            this.RaiseExceptionIfNecessary();
            return ((string)(this.results[0]));
        }
    }
}

/// <remarks/>
[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.8.3928.0")]
public delegate void FileGetPreviewCompletedEventHandler(object sender, FileGetPreviewCompletedEventArgs e);

/// <remarks/>
[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.8.3928.0")]
[System.Diagnostics.DebuggerStepThroughAttribute()]
[System.ComponentModel.DesignerCategoryAttribute("code")]
public partial class FileGetPreviewCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
    
    private object[] results;
    
    internal FileGetPreviewCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
            base(exception, cancelled, userState) {
        this.results = results;
    }
    
    /// <remarks/>
    public string Result {
        get {
            this.RaiseExceptionIfNecessary();
            return ((string)(this.results[0]));
        }
    }
}

/// <remarks/>
[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.8.3928.0")]
public delegate void FileOpenCompletedEventHandler(object sender, FileOpenCompletedEventArgs e);

/// <remarks/>
[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.8.3928.0")]
[System.Diagnostics.DebuggerStepThroughAttribute()]
[System.ComponentModel.DesignerCategoryAttribute("code")]
public partial class FileOpenCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
    
    private object[] results;
    
    internal FileOpenCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
            base(exception, cancelled, userState) {
        this.results = results;
    }
    
    /// <remarks/>
    public System.Guid Result {
        get {
            this.RaiseExceptionIfNecessary();
            return ((System.Guid)(this.results[0]));
        }
    }
}

/// <remarks/>
[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.8.3928.0")]
public delegate void FileReadCompletedEventHandler(object sender, FileReadCompletedEventArgs e);

/// <remarks/>
[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.8.3928.0")]
[System.Diagnostics.DebuggerStepThroughAttribute()]
[System.ComponentModel.DesignerCategoryAttribute("code")]
public partial class FileReadCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
    
    private object[] results;
    
    internal FileReadCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
            base(exception, cancelled, userState) {
        this.results = results;
    }
    
    /// <remarks/>
    public bool Result {
        get {
            this.RaiseExceptionIfNecessary();
            return ((bool)(this.results[0]));
        }
    }
    
    /// <remarks/>
    public byte[] fileData {
        get {
            this.RaiseExceptionIfNecessary();
            return ((byte[])(this.results[1]));
        }
    }
}

/// <remarks/>
[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.8.3928.0")]
public delegate void FileReplaceCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);

/// <remarks/>
[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.8.3928.0")]
public delegate void FileSetInfoCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);

/// <remarks/>
[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.8.3928.0")]
public delegate void FileTakeOffLineCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);

/// <remarks/>
[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.8.3928.0")]
public delegate void FileTakeOffLineGroupCompletedEventHandler(object sender, FileTakeOffLineGroupCompletedEventArgs e);

/// <remarks/>
[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.8.3928.0")]
[System.Diagnostics.DebuggerStepThroughAttribute()]
[System.ComponentModel.DesignerCategoryAttribute("code")]
public partial class FileTakeOffLineGroupCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
    
    private object[] results;
    
    internal FileTakeOffLineGroupCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
            base(exception, cancelled, userState) {
        this.results = results;
    }
    
    /// <remarks/>
    public string Result {
        get {
            this.RaiseExceptionIfNecessary();
            return ((string)(this.results[0]));
        }
    }
}

/// <remarks/>
[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.8.3928.0")]
public delegate void FileWriteCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);

/// <remarks/>
[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.8.3928.0")]
public delegate void FolderCopyCompletedEventHandler(object sender, FolderCopyCompletedEventArgs e);

/// <remarks/>
[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.8.3928.0")]
[System.Diagnostics.DebuggerStepThroughAttribute()]
[System.ComponentModel.DesignerCategoryAttribute("code")]
public partial class FolderCopyCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
    
    private object[] results;
    
    internal FolderCopyCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
            base(exception, cancelled, userState) {
        this.results = results;
    }
    
    /// <remarks/>
    public System.Guid Result {
        get {
            this.RaiseExceptionIfNecessary();
            return ((System.Guid)(this.results[0]));
        }
    }
}

/// <remarks/>
[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.8.3928.0")]
public delegate void FolderCopyDataCompletedEventHandler(object sender, FolderCopyDataCompletedEventArgs e);

/// <remarks/>
[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.8.3928.0")]
[System.Diagnostics.DebuggerStepThroughAttribute()]
[System.ComponentModel.DesignerCategoryAttribute("code")]
public partial class FolderCopyDataCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
    
    private object[] results;
    
    internal FolderCopyDataCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
            base(exception, cancelled, userState) {
        this.results = results;
    }
    
    /// <remarks/>
    public System.Guid Result {
        get {
            this.RaiseExceptionIfNecessary();
            return ((System.Guid)(this.results[0]));
        }
    }
}

/// <remarks/>
[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.8.3928.0")]
public delegate void FolderCopyExCompletedEventHandler(object sender, FolderCopyExCompletedEventArgs e);

/// <remarks/>
[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.8.3928.0")]
[System.Diagnostics.DebuggerStepThroughAttribute()]
[System.ComponentModel.DesignerCategoryAttribute("code")]
public partial class FolderCopyExCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
    
    private object[] results;
    
    internal FolderCopyExCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
            base(exception, cancelled, userState) {
        this.results = results;
    }
    
    /// <remarks/>
    public System.Guid Result {
        get {
            this.RaiseExceptionIfNecessary();
            return ((System.Guid)(this.results[0]));
        }
    }
}

/// <remarks/>
[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.8.3928.0")]
public delegate void FolderDeleteCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);

/// <remarks/>
[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.8.3928.0")]
public delegate void FolderDeleteCardCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);

/// <remarks/>
[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.8.3928.0")]
public delegate void FolderFindHardLinkCompletedEventHandler(object sender, FolderFindHardLinkCompletedEventArgs e);

/// <remarks/>
[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.8.3928.0")]
[System.Diagnostics.DebuggerStepThroughAttribute()]
[System.ComponentModel.DesignerCategoryAttribute("code")]
public partial class FolderFindHardLinkCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
    
    private object[] results;
    
    internal FolderFindHardLinkCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
            base(exception, cancelled, userState) {
        this.results = results;
    }
    
    /// <remarks/>
    public System.Guid Result {
        get {
            this.RaiseExceptionIfNecessary();
            return ((System.Guid)(this.results[0]));
        }
    }
}

/// <remarks/>
[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.8.3928.0")]
public delegate void FolderGetInfoGroupCompletedEventHandler(object sender, FolderGetInfoGroupCompletedEventArgs e);

/// <remarks/>
[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.8.3928.0")]
[System.Diagnostics.DebuggerStepThroughAttribute()]
[System.ComponentModel.DesignerCategoryAttribute("code")]
public partial class FolderGetInfoGroupCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
    
    private object[] results;
    
    internal FolderGetInfoGroupCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
            base(exception, cancelled, userState) {
        this.results = results;
    }
    
    /// <remarks/>
    public CursorInfo Result {
        get {
            this.RaiseExceptionIfNecessary();
            return ((CursorInfo)(this.results[0]));
        }
    }
}

/// <remarks/>
[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.8.3928.0")]
public delegate void FolderGetShortcutsCompletedEventHandler(object sender, FolderGetShortcutsCompletedEventArgs e);

/// <remarks/>
[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.8.3928.0")]
[System.Diagnostics.DebuggerStepThroughAttribute()]
[System.ComponentModel.DesignerCategoryAttribute("code")]
public partial class FolderGetShortcutsCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
    
    private object[] results;
    
    internal FolderGetShortcutsCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
            base(exception, cancelled, userState) {
        this.results = results;
    }
    
    /// <remarks/>
    public string Result {
        get {
            this.RaiseExceptionIfNecessary();
            return ((string)(this.results[0]));
        }
    }
    
    /// <remarks/>
    public bool usingCompression {
        get {
            this.RaiseExceptionIfNecessary();
            return ((bool)(this.results[1]));
        }
    }
}

/// <remarks/>
[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.8.3928.0")]
public delegate void FolderGetUnreadCountCompletedEventHandler(object sender, FolderGetUnreadCountCompletedEventArgs e);

/// <remarks/>
[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.8.3928.0")]
[System.Diagnostics.DebuggerStepThroughAttribute()]
[System.ComponentModel.DesignerCategoryAttribute("code")]
public partial class FolderGetUnreadCountCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
    
    private object[] results;
    
    internal FolderGetUnreadCountCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
            base(exception, cancelled, userState) {
        this.results = results;
    }
    
    /// <remarks/>
    public int Result {
        get {
            this.RaiseExceptionIfNecessary();
            return ((int)(this.results[0]));
        }
    }
}

/// <remarks/>
[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.8.3928.0")]
public delegate void FolderGetUnreadCountExCompletedEventHandler(object sender, FolderGetUnreadCountExCompletedEventArgs e);

/// <remarks/>
[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.8.3928.0")]
[System.Diagnostics.DebuggerStepThroughAttribute()]
[System.ComponentModel.DesignerCategoryAttribute("code")]
public partial class FolderGetUnreadCountExCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
    
    private object[] results;
    
    internal FolderGetUnreadCountExCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
            base(exception, cancelled, userState) {
        this.results = results;
    }
    
    /// <remarks/>
    public int Result {
        get {
            this.RaiseExceptionIfNecessary();
            return ((int)(this.results[0]));
        }
    }
}

/// <remarks/>
[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.8.3928.0")]
public delegate void FolderMakeHardLinkCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);

/// <remarks/>
[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.8.3928.0")]
public delegate void FolderMarkAllCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);

/// <remarks/>
[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.8.3928.0")]
public delegate void FolderPurgeCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);

/// <remarks/>
[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.8.3928.0")]
public delegate void FolderSetCardDescriptorCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);

/// <remarks/>
[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.8.3928.0")]
public delegate void GetServerDateTimeCompletedEventHandler(object sender, GetServerDateTimeCompletedEventArgs e);

/// <remarks/>
[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.8.3928.0")]
[System.Diagnostics.DebuggerStepThroughAttribute()]
[System.ComponentModel.DesignerCategoryAttribute("code")]
public partial class GetServerDateTimeCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
    
    private object[] results;
    
    internal GetServerDateTimeCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
            base(exception, cancelled, userState) {
        this.results = results;
    }
    
    /// <remarks/>
    public double Result {
        get {
            this.RaiseExceptionIfNecessary();
            return ((double)(this.results[0]));
        }
    }
}

/// <remarks/>
[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.8.3928.0")]
public delegate void IconCreateCompletedEventHandler(object sender, IconCreateCompletedEventArgs e);

/// <remarks/>
[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.8.3928.0")]
[System.Diagnostics.DebuggerStepThroughAttribute()]
[System.ComponentModel.DesignerCategoryAttribute("code")]
public partial class IconCreateCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
    
    private object[] results;
    
    internal IconCreateCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
            base(exception, cancelled, userState) {
        this.results = results;
    }
    
    /// <remarks/>
    public System.Guid Result {
        get {
            this.RaiseExceptionIfNecessary();
            return ((System.Guid)(this.results[0]));
        }
    }
}

/// <remarks/>
[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.8.3928.0")]
public delegate void IconDeleteCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);

/// <remarks/>
[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.8.3928.0")]
public delegate void IconGetInfoGroupCompletedEventHandler(object sender, IconGetInfoGroupCompletedEventArgs e);

/// <remarks/>
[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.8.3928.0")]
[System.Diagnostics.DebuggerStepThroughAttribute()]
[System.ComponentModel.DesignerCategoryAttribute("code")]
public partial class IconGetInfoGroupCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
    
    private object[] results;
    
    internal IconGetInfoGroupCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
            base(exception, cancelled, userState) {
        this.results = results;
    }
    
    /// <remarks/>
    public string Result {
        get {
            this.RaiseExceptionIfNecessary();
            return ((string)(this.results[0]));
        }
    }
    
    /// <remarks/>
    public string failedItems {
        get {
            this.RaiseExceptionIfNecessary();
            return ((string)(this.results[1]));
        }
    }
}

/// <remarks/>
[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.8.3928.0")]
public delegate void IconGetListCompletedEventHandler(object sender, IconGetListCompletedEventArgs e);

/// <remarks/>
[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.8.3928.0")]
[System.Diagnostics.DebuggerStepThroughAttribute()]
[System.ComponentModel.DesignerCategoryAttribute("code")]
public partial class IconGetListCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
    
    private object[] results;
    
    internal IconGetListCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
            base(exception, cancelled, userState) {
        this.results = results;
    }
    
    /// <remarks/>
    public CursorInfoEx Result {
        get {
            this.RaiseExceptionIfNecessary();
            return ((CursorInfoEx)(this.results[0]));
        }
    }
}

/// <remarks/>
[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.8.3928.0")]
public delegate void IconSetInfoCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);

/// <remarks/>
[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.8.3928.0")]
public delegate void IncrementFeatureUsageCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);

/// <remarks/>
[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.8.3928.0")]
public delegate void LabelClearCardCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);

/// <remarks/>
[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.8.3928.0")]
public delegate void LabelCreateCompletedEventHandler(object sender, LabelCreateCompletedEventArgs e);

/// <remarks/>
[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.8.3928.0")]
[System.Diagnostics.DebuggerStepThroughAttribute()]
[System.ComponentModel.DesignerCategoryAttribute("code")]
public partial class LabelCreateCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
    
    private object[] results;
    
    internal LabelCreateCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
            base(exception, cancelled, userState) {
        this.results = results;
    }
    
    /// <remarks/>
    public System.Guid Result {
        get {
            this.RaiseExceptionIfNecessary();
            return ((System.Guid)(this.results[0]));
        }
    }
}

/// <remarks/>
[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.8.3928.0")]
public delegate void LabelDeleteCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);

/// <remarks/>
[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.8.3928.0")]
public delegate void LabelGetListCompletedEventHandler(object sender, LabelGetListCompletedEventArgs e);

/// <remarks/>
[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.8.3928.0")]
[System.Diagnostics.DebuggerStepThroughAttribute()]
[System.ComponentModel.DesignerCategoryAttribute("code")]
public partial class LabelGetListCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
    
    private object[] results;
    
    internal LabelGetListCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
            base(exception, cancelled, userState) {
        this.results = results;
    }
    
    /// <remarks/>
    public string Result {
        get {
            this.RaiseExceptionIfNecessary();
            return ((string)(this.results[0]));
        }
    }
}

/// <remarks/>
[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.8.3928.0")]
public delegate void LabelSetCardCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);

/// <remarks/>
[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.8.3928.0")]
public delegate void LabelSetInfoCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);

/// <remarks/>
[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.8.3928.0")]
public delegate void LinkClearCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);

/// <remarks/>
[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.8.3928.0")]
public delegate void LinkGetCardInfoCompletedEventHandler(object sender, LinkGetCardInfoCompletedEventArgs e);

/// <remarks/>
[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.8.3928.0")]
[System.Diagnostics.DebuggerStepThroughAttribute()]
[System.ComponentModel.DesignerCategoryAttribute("code")]
public partial class LinkGetCardInfoCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
    
    private object[] results;
    
    internal LinkGetCardInfoCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
            base(exception, cancelled, userState) {
        this.results = results;
    }
    
    /// <remarks/>
    public string Result {
        get {
            this.RaiseExceptionIfNecessary();
            return ((string)(this.results[0]));
        }
    }
    
    /// <remarks/>
    public bool usingCompression {
        get {
            this.RaiseExceptionIfNecessary();
            return ((bool)(this.results[1]));
        }
    }
}

/// <remarks/>
[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.8.3928.0")]
public delegate void LinkGetParentCompletedEventHandler(object sender, LinkGetParentCompletedEventArgs e);

/// <remarks/>
[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.8.3928.0")]
[System.Diagnostics.DebuggerStepThroughAttribute()]
[System.ComponentModel.DesignerCategoryAttribute("code")]
public partial class LinkGetParentCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
    
    private object[] results;
    
    internal LinkGetParentCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
            base(exception, cancelled, userState) {
        this.results = results;
    }
    
    /// <remarks/>
    public System.Guid Result {
        get {
            this.RaiseExceptionIfNecessary();
            return ((System.Guid)(this.results[0]));
        }
    }
    
    /// <remarks/>
    public System.Guid sourceRowId {
        get {
            this.RaiseExceptionIfNecessary();
            return ((System.Guid)(this.results[1]));
        }
    }
    
    /// <remarks/>
    public System.Guid sourceFieldId {
        get {
            this.RaiseExceptionIfNecessary();
            return ((System.Guid)(this.results[2]));
        }
    }
    
    /// <remarks/>
    public System.Guid sourceSectionId {
        get {
            this.RaiseExceptionIfNecessary();
            return ((System.Guid)(this.results[3]));
        }
    }
}

/// <remarks/>
[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.8.3928.0")]
public delegate void LockClearCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);

/// <remarks/>
[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.8.3928.0")]
public delegate void LockClearGroupCompletedEventHandler(object sender, LockClearGroupCompletedEventArgs e);

/// <remarks/>
[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.8.3928.0")]
[System.Diagnostics.DebuggerStepThroughAttribute()]
[System.ComponentModel.DesignerCategoryAttribute("code")]
public partial class LockClearGroupCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
    
    private object[] results;
    
    internal LockClearGroupCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
            base(exception, cancelled, userState) {
        this.results = results;
    }
    
    /// <remarks/>
    public string Result {
        get {
            this.RaiseExceptionIfNecessary();
            return ((string)(this.results[0]));
        }
    }
}

/// <remarks/>
[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.8.3928.0")]
public delegate void LockGetInfoCompletedEventHandler(object sender, LockGetInfoCompletedEventArgs e);

/// <remarks/>
[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.8.3928.0")]
[System.Diagnostics.DebuggerStepThroughAttribute()]
[System.ComponentModel.DesignerCategoryAttribute("code")]
public partial class LockGetInfoCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
    
    private object[] results;
    
    internal LockGetInfoCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
            base(exception, cancelled, userState) {
        this.results = results;
    }
    
    /// <remarks/>
    public LockStatusEnum Result {
        get {
            this.RaiseExceptionIfNecessary();
            return ((LockStatusEnum)(this.results[0]));
        }
    }
    
    /// <remarks/>
    public string ownerName {
        get {
            this.RaiseExceptionIfNecessary();
            return ((string)(this.results[1]));
        }
    }
}

/// <remarks/>
[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.8.3928.0")]
public delegate void LockGetListCompletedEventHandler(object sender, LockGetListCompletedEventArgs e);

/// <remarks/>
[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.8.3928.0")]
[System.Diagnostics.DebuggerStepThroughAttribute()]
[System.ComponentModel.DesignerCategoryAttribute("code")]
public partial class LockGetListCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
    
    private object[] results;
    
    internal LockGetListCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
            base(exception, cancelled, userState) {
        this.results = results;
    }
    
    /// <remarks/>
    public string Result {
        get {
            this.RaiseExceptionIfNecessary();
            return ((string)(this.results[0]));
        }
    }
    
    /// <remarks/>
    public bool usingCompression {
        get {
            this.RaiseExceptionIfNecessary();
            return ((bool)(this.results[1]));
        }
    }
}

/// <remarks/>
[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.8.3928.0")]
public delegate void LockSetCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);

/// <remarks/>
[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.8.3928.0")]
public delegate void LogClearCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);

/// <remarks/>
[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.8.3928.0")]
public delegate void LogFindCompletedEventHandler(object sender, LogFindCompletedEventArgs e);

/// <remarks/>
[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.8.3928.0")]
[System.Diagnostics.DebuggerStepThroughAttribute()]
[System.ComponentModel.DesignerCategoryAttribute("code")]
public partial class LogFindCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
    
    private object[] results;
    
    internal LogFindCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
            base(exception, cancelled, userState) {
        this.results = results;
    }
    
    /// <remarks/>
    public CursorInfo Result {
        get {
            this.RaiseExceptionIfNecessary();
            return ((CursorInfo)(this.results[0]));
        }
    }
}

/// <remarks/>
[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.8.3928.0")]
public delegate void LogGetStrategyCompletedEventHandler(object sender, LogGetStrategyCompletedEventArgs e);

/// <remarks/>
[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.8.3928.0")]
[System.Diagnostics.DebuggerStepThroughAttribute()]
[System.ComponentModel.DesignerCategoryAttribute("code")]
public partial class LogGetStrategyCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
    
    private object[] results;
    
    internal LogGetStrategyCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
            base(exception, cancelled, userState) {
        this.results = results;
    }
    
    /// <remarks/>
    public LogStrategyEnum Result {
        get {
            this.RaiseExceptionIfNecessary();
            return ((LogStrategyEnum)(this.results[0]));
        }
    }
    
    /// <remarks/>
    public ClearLogStrategyEnum clearLogStrategy {
        get {
            this.RaiseExceptionIfNecessary();
            return ((ClearLogStrategyEnum)(this.results[1]));
        }
    }
    
    /// <remarks/>
    public int clearLogMaxCount {
        get {
            this.RaiseExceptionIfNecessary();
            return ((int)(this.results[2]));
        }
    }
    
    /// <remarks/>
    public int clearLogCutCount {
        get {
            this.RaiseExceptionIfNecessary();
            return ((int)(this.results[3]));
        }
    }
    
    /// <remarks/>
    public int clearLogCutDays {
        get {
            this.RaiseExceptionIfNecessary();
            return ((int)(this.results[4]));
        }
    }
}

/// <remarks/>
[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.8.3928.0")]
public delegate void LogReadCompletedEventHandler(object sender, LogReadCompletedEventArgs e);

/// <remarks/>
[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.8.3928.0")]
[System.Diagnostics.DebuggerStepThroughAttribute()]
[System.ComponentModel.DesignerCategoryAttribute("code")]
public partial class LogReadCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
    
    private object[] results;
    
    internal LogReadCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
            base(exception, cancelled, userState) {
        this.results = results;
    }
    
    /// <remarks/>
    public string Result {
        get {
            this.RaiseExceptionIfNecessary();
            return ((string)(this.results[0]));
        }
    }
}

/// <remarks/>
[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.8.3928.0")]
public delegate void LogReadExCompletedEventHandler(object sender, LogReadExCompletedEventArgs e);

/// <remarks/>
[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.8.3928.0")]
[System.Diagnostics.DebuggerStepThroughAttribute()]
[System.ComponentModel.DesignerCategoryAttribute("code")]
public partial class LogReadExCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
    
    private object[] results;
    
    internal LogReadExCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
            base(exception, cancelled, userState) {
        this.results = results;
    }
    
    /// <remarks/>
    public string Result {
        get {
            this.RaiseExceptionIfNecessary();
            return ((string)(this.results[0]));
        }
    }
}

/// <remarks/>
[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.8.3928.0")]
public delegate void LogSetStrategyCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);

/// <remarks/>
[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.8.3928.0")]
public delegate void LogWriteCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);

/// <remarks/>
[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.8.3928.0")]
public delegate void LogWriteExCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);

/// <remarks/>
[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.8.3928.0")]
public delegate void NumAllocateNumberCompletedEventHandler(object sender, NumAllocateNumberCompletedEventArgs e);

/// <remarks/>
[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.8.3928.0")]
[System.Diagnostics.DebuggerStepThroughAttribute()]
[System.ComponentModel.DesignerCategoryAttribute("code")]
public partial class NumAllocateNumberCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
    
    private object[] results;
    
    internal NumAllocateNumberCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
            base(exception, cancelled, userState) {
        this.results = results;
    }
    
    /// <remarks/>
    public System.Guid Result {
        get {
            this.RaiseExceptionIfNecessary();
            return ((System.Guid)(this.results[0]));
        }
    }
}

/// <remarks/>
[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.8.3928.0")]
public delegate void NumAllocateNumbersCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);

/// <remarks/>
[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.8.3928.0")]
public delegate void NumChangeLeftBoundCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);

/// <remarks/>
[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.8.3928.0")]
public delegate void NumChangeRightBoundCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);

/// <remarks/>
[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.8.3928.0")]
public delegate void NumGetFirstFreeCompletedEventHandler(object sender, NumGetFirstFreeCompletedEventArgs e);

/// <remarks/>
[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.8.3928.0")]
[System.Diagnostics.DebuggerStepThroughAttribute()]
[System.ComponentModel.DesignerCategoryAttribute("code")]
public partial class NumGetFirstFreeCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
    
    private object[] results;
    
    internal NumGetFirstFreeCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
            base(exception, cancelled, userState) {
        this.results = results;
    }
    
    /// <remarks/>
    public int Result {
        get {
            this.RaiseExceptionIfNecessary();
            return ((int)(this.results[0]));
        }
    }
    
    /// <remarks/>
    public System.Guid NumberId {
        get {
            this.RaiseExceptionIfNecessary();
            return ((System.Guid)(this.results[1]));
        }
    }
}

/// <remarks/>
[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.8.3928.0")]
public delegate void NumGetLastFreeCompletedEventHandler(object sender, NumGetLastFreeCompletedEventArgs e);

/// <remarks/>
[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.8.3928.0")]
[System.Diagnostics.DebuggerStepThroughAttribute()]
[System.ComponentModel.DesignerCategoryAttribute("code")]
public partial class NumGetLastFreeCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
    
    private object[] results;
    
    internal NumGetLastFreeCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
            base(exception, cancelled, userState) {
        this.results = results;
    }
    
    /// <remarks/>
    public int Result {
        get {
            this.RaiseExceptionIfNecessary();
            return ((int)(this.results[0]));
        }
    }
    
    /// <remarks/>
    public System.Guid NumberId {
        get {
            this.RaiseExceptionIfNecessary();
            return ((System.Guid)(this.results[1]));
        }
    }
}

/// <remarks/>
[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.8.3928.0")]
public delegate void NumGetNumberByIDCompletedEventHandler(object sender, NumGetNumberByIDCompletedEventArgs e);

/// <remarks/>
[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.8.3928.0")]
[System.Diagnostics.DebuggerStepThroughAttribute()]
[System.ComponentModel.DesignerCategoryAttribute("code")]
public partial class NumGetNumberByIDCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
    
    private object[] results;
    
    internal NumGetNumberByIDCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
            base(exception, cancelled, userState) {
        this.results = results;
    }
    
    /// <remarks/>
    public int Result {
        get {
            this.RaiseExceptionIfNecessary();
            return ((int)(this.results[0]));
        }
    }
}

/// <remarks/>
[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.8.3928.0")]
public delegate void NumGetNumberIDCompletedEventHandler(object sender, NumGetNumberIDCompletedEventArgs e);

/// <remarks/>
[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.8.3928.0")]
[System.Diagnostics.DebuggerStepThroughAttribute()]
[System.ComponentModel.DesignerCategoryAttribute("code")]
public partial class NumGetNumberIDCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
    
    private object[] results;
    
    internal NumGetNumberIDCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
            base(exception, cancelled, userState) {
        this.results = results;
    }
    
    /// <remarks/>
    public System.Guid Result {
        get {
            this.RaiseExceptionIfNecessary();
            return ((System.Guid)(this.results[0]));
        }
    }
}

/// <remarks/>
[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.8.3928.0")]
public delegate void NumGetNumberInfoCompletedEventHandler(object sender, NumGetNumberInfoCompletedEventArgs e);

/// <remarks/>
[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.8.3928.0")]
[System.Diagnostics.DebuggerStepThroughAttribute()]
[System.ComponentModel.DesignerCategoryAttribute("code")]
public partial class NumGetNumberInfoCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
    
    private object[] results;
    
    internal NumGetNumberInfoCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
            base(exception, cancelled, userState) {
        this.results = results;
    }
    
    /// <remarks/>
    public string Result {
        get {
            this.RaiseExceptionIfNecessary();
            return ((string)(this.results[0]));
        }
    }
}

/// <remarks/>
[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.8.3928.0")]
public delegate void NumGetNumbersStatusCompletedEventHandler(object sender, NumGetNumbersStatusCompletedEventArgs e);

/// <remarks/>
[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.8.3928.0")]
[System.Diagnostics.DebuggerStepThroughAttribute()]
[System.ComponentModel.DesignerCategoryAttribute("code")]
public partial class NumGetNumbersStatusCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
    
    private object[] results;
    
    internal NumGetNumbersStatusCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
            base(exception, cancelled, userState) {
        this.results = results;
    }
    
    /// <remarks/>
    public CursorInfo Result {
        get {
            this.RaiseExceptionIfNecessary();
            return ((CursorInfo)(this.results[0]));
        }
    }
}

/// <remarks/>
[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.8.3928.0")]
public delegate void NumGetNumberStatusCompletedEventHandler(object sender, NumGetNumberStatusCompletedEventArgs e);

/// <remarks/>
[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.8.3928.0")]
[System.Diagnostics.DebuggerStepThroughAttribute()]
[System.ComponentModel.DesignerCategoryAttribute("code")]
public partial class NumGetNumberStatusCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
    
    private object[] results;
    
    internal NumGetNumberStatusCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
            base(exception, cancelled, userState) {
        this.results = results;
    }
    
    /// <remarks/>
    public NumberStatusEnum Result {
        get {
            this.RaiseExceptionIfNecessary();
            return ((NumberStatusEnum)(this.results[0]));
        }
    }
}

/// <remarks/>
[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.8.3928.0")]
public delegate void NumReleaseNumberCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);

/// <remarks/>
[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.8.3928.0")]
public delegate void NumReleaseNumberByIDCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);

/// <remarks/>
[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.8.3928.0")]
public delegate void NumReleaseNumbersCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);

/// <remarks/>
[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.8.3928.0")]
public delegate void ReportGetDataCompletedEventHandler(object sender, ReportGetDataCompletedEventArgs e);

/// <remarks/>
[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.8.3928.0")]
[System.Diagnostics.DebuggerStepThroughAttribute()]
[System.ComponentModel.DesignerCategoryAttribute("code")]
public partial class ReportGetDataCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
    
    private object[] results;
    
    internal ReportGetDataCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
            base(exception, cancelled, userState) {
        this.results = results;
    }
    
    /// <remarks/>
    public CursorInfo Result {
        get {
            this.RaiseExceptionIfNecessary();
            return ((CursorInfo)(this.results[0]));
        }
    }
}

/// <remarks/>
[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.8.3928.0")]
public delegate void ReportGetInfoCompletedEventHandler(object sender, ReportGetInfoCompletedEventArgs e);

/// <remarks/>
[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.8.3928.0")]
[System.Diagnostics.DebuggerStepThroughAttribute()]
[System.ComponentModel.DesignerCategoryAttribute("code")]
public partial class ReportGetInfoCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
    
    private object[] results;
    
    internal ReportGetInfoCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
            base(exception, cancelled, userState) {
        this.results = results;
    }
    
    /// <remarks/>
    public string Result {
        get {
            this.RaiseExceptionIfNecessary();
            return ((string)(this.results[0]));
        }
    }
}

/// <remarks/>
[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.8.3928.0")]
public delegate void ReportGetListCompletedEventHandler(object sender, ReportGetListCompletedEventArgs e);

/// <remarks/>
[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.8.3928.0")]
[System.Diagnostics.DebuggerStepThroughAttribute()]
[System.ComponentModel.DesignerCategoryAttribute("code")]
public partial class ReportGetListCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
    
    private object[] results;
    
    internal ReportGetListCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
            base(exception, cancelled, userState) {
        this.results = results;
    }
    
    /// <remarks/>
    public string Result {
        get {
            this.RaiseExceptionIfNecessary();
            return ((string)(this.results[0]));
        }
    }
}

/// <remarks/>
[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.8.3928.0")]
public delegate void RowCopyCompletedEventHandler(object sender, RowCopyCompletedEventArgs e);

/// <remarks/>
[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.8.3928.0")]
[System.Diagnostics.DebuggerStepThroughAttribute()]
[System.ComponentModel.DesignerCategoryAttribute("code")]
public partial class RowCopyCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
    
    private object[] results;
    
    internal RowCopyCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
            base(exception, cancelled, userState) {
        this.results = results;
    }
    
    /// <remarks/>
    public System.Guid Result {
        get {
            this.RaiseExceptionIfNecessary();
            return ((System.Guid)(this.results[0]));
        }
    }
}

/// <remarks/>
[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.8.3928.0")]
public delegate void RowCreateCompletedEventHandler(object sender, RowCreateCompletedEventArgs e);

/// <remarks/>
[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.8.3928.0")]
[System.Diagnostics.DebuggerStepThroughAttribute()]
[System.ComponentModel.DesignerCategoryAttribute("code")]
public partial class RowCreateCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
    
    private object[] results;
    
    internal RowCreateCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
            base(exception, cancelled, userState) {
        this.results = results;
    }
    
    /// <remarks/>
    public System.Guid Result {
        get {
            this.RaiseExceptionIfNecessary();
            return ((System.Guid)(this.results[0]));
        }
    }
}

/// <remarks/>
[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.8.3928.0")]
public delegate void RowDeleteCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);

/// <remarks/>
[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.8.3928.0")]
public delegate void RowExistsCompletedEventHandler(object sender, RowExistsCompletedEventArgs e);

/// <remarks/>
[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.8.3928.0")]
[System.Diagnostics.DebuggerStepThroughAttribute()]
[System.ComponentModel.DesignerCategoryAttribute("code")]
public partial class RowExistsCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
    
    private object[] results;
    
    internal RowExistsCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
            base(exception, cancelled, userState) {
        this.results = results;
    }
    
    /// <remarks/>
    public bool Result {
        get {
            this.RaiseExceptionIfNecessary();
            return ((bool)(this.results[0]));
        }
    }
}

/// <remarks/>
[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.8.3928.0")]
public delegate void RowGetDataCompletedEventHandler(object sender, RowGetDataCompletedEventArgs e);

/// <remarks/>
[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.8.3928.0")]
[System.Diagnostics.DebuggerStepThroughAttribute()]
[System.ComponentModel.DesignerCategoryAttribute("code")]
public partial class RowGetDataCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
    
    private object[] results;
    
    internal RowGetDataCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
            base(exception, cancelled, userState) {
        this.results = results;
    }
    
    /// <remarks/>
    public string Result {
        get {
            this.RaiseExceptionIfNecessary();
            return ((string)(this.results[0]));
        }
    }
    
    /// <remarks/>
    public bool usingCompression {
        get {
            this.RaiseExceptionIfNecessary();
            return ((bool)(this.results[1]));
        }
    }
}

/// <remarks/>
[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.8.3928.0")]
public delegate void RowGetDataByInstanceIDCompletedEventHandler(object sender, RowGetDataByInstanceIDCompletedEventArgs e);

/// <remarks/>
[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.8.3928.0")]
[System.Diagnostics.DebuggerStepThroughAttribute()]
[System.ComponentModel.DesignerCategoryAttribute("code")]
public partial class RowGetDataByInstanceIDCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
    
    private object[] results;
    
    internal RowGetDataByInstanceIDCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
            base(exception, cancelled, userState) {
        this.results = results;
    }
    
    /// <remarks/>
    public string Result {
        get {
            this.RaiseExceptionIfNecessary();
            return ((string)(this.results[0]));
        }
    }
    
    /// <remarks/>
    public bool usingCompression {
        get {
            this.RaiseExceptionIfNecessary();
            return ((bool)(this.results[1]));
        }
    }
}

/// <remarks/>
[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.8.3928.0")]
public delegate void RowGetHierarchyCompletedEventHandler(object sender, RowGetHierarchyCompletedEventArgs e);

/// <remarks/>
[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.8.3928.0")]
[System.Diagnostics.DebuggerStepThroughAttribute()]
[System.ComponentModel.DesignerCategoryAttribute("code")]
public partial class RowGetHierarchyCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
    
    private object[] results;
    
    internal RowGetHierarchyCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
            base(exception, cancelled, userState) {
        this.results = results;
    }
    
    /// <remarks/>
    public string Result {
        get {
            this.RaiseExceptionIfNecessary();
            return ((string)(this.results[0]));
        }
    }
}

/// <remarks/>
[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.8.3928.0")]
public delegate void RowGetInfoCompletedEventHandler(object sender, RowGetInfoCompletedEventArgs e);

/// <remarks/>
[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.8.3928.0")]
[System.Diagnostics.DebuggerStepThroughAttribute()]
[System.ComponentModel.DesignerCategoryAttribute("code")]
public partial class RowGetInfoCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
    
    private object[] results;
    
    internal RowGetInfoCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
            base(exception, cancelled, userState) {
        this.results = results;
    }
    
    /// <remarks/>
    public System.Guid Result {
        get {
            this.RaiseExceptionIfNecessary();
            return ((System.Guid)(this.results[0]));
        }
    }
    
    /// <remarks/>
    public System.Guid parentRowId {
        get {
            this.RaiseExceptionIfNecessary();
            return ((System.Guid)(this.results[1]));
        }
    }
    
    /// <remarks/>
    public System.Guid parentTreeRowId {
        get {
            this.RaiseExceptionIfNecessary();
            return ((System.Guid)(this.results[2]));
        }
    }
}

/// <remarks/>
[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.8.3928.0")]
public delegate void RowMoveCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);

/// <remarks/>
[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.8.3928.0")]
public delegate void RowSetDataCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);

/// <remarks/>
[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.8.3928.0")]
public delegate void SearchCardsCompletedEventHandler(object sender, SearchCardsCompletedEventArgs e);

/// <remarks/>
[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.8.3928.0")]
[System.Diagnostics.DebuggerStepThroughAttribute()]
[System.ComponentModel.DesignerCategoryAttribute("code")]
public partial class SearchCardsCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
    
    private object[] results;
    
    internal SearchCardsCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
            base(exception, cancelled, userState) {
        this.results = results;
    }
    
    /// <remarks/>
    public string Result {
        get {
            this.RaiseExceptionIfNecessary();
            return ((string)(this.results[0]));
        }
    }
    
    /// <remarks/>
    public bool usingCompression {
        get {
            this.RaiseExceptionIfNecessary();
            return ((bool)(this.results[1]));
        }
    }
}

/// <remarks/>
[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.8.3928.0")]
public delegate void SearchCardsExCompletedEventHandler(object sender, SearchCardsExCompletedEventArgs e);

/// <remarks/>
[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.8.3928.0")]
[System.Diagnostics.DebuggerStepThroughAttribute()]
[System.ComponentModel.DesignerCategoryAttribute("code")]
public partial class SearchCardsExCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
    
    private object[] results;
    
    internal SearchCardsExCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
            base(exception, cancelled, userState) {
        this.results = results;
    }
    
    /// <remarks/>
    public CursorInfo Result {
        get {
            this.RaiseExceptionIfNecessary();
            return ((CursorInfo)(this.results[0]));
        }
    }
}

/// <remarks/>
[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.8.3928.0")]
public delegate void SearchCardsToFolderCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);

/// <remarks/>
[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.8.3928.0")]
public delegate void SearchCardsToStoreCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);

/// <remarks/>
[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.8.3928.0")]
public delegate void SearchCreateCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);

/// <remarks/>
[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.8.3928.0")]
public delegate void SearchDeleteCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);

/// <remarks/>
[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.8.3928.0")]
public delegate void SearchRowsCompletedEventHandler(object sender, SearchRowsCompletedEventArgs e);

/// <remarks/>
[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.8.3928.0")]
[System.Diagnostics.DebuggerStepThroughAttribute()]
[System.ComponentModel.DesignerCategoryAttribute("code")]
public partial class SearchRowsCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
    
    private object[] results;
    
    internal SearchRowsCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
            base(exception, cancelled, userState) {
        this.results = results;
    }
    
    /// <remarks/>
    public string Result {
        get {
            this.RaiseExceptionIfNecessary();
            return ((string)(this.results[0]));
        }
    }
    
    /// <remarks/>
    public bool usingCompression {
        get {
            this.RaiseExceptionIfNecessary();
            return ((bool)(this.results[1]));
        }
    }
}

/// <remarks/>
[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.8.3928.0")]
public delegate void SearchWordResolveCompletedEventHandler(object sender, SearchWordResolveCompletedEventArgs e);

/// <remarks/>
[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.8.3928.0")]
[System.Diagnostics.DebuggerStepThroughAttribute()]
[System.ComponentModel.DesignerCategoryAttribute("code")]
public partial class SearchWordResolveCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
    
    private object[] results;
    
    internal SearchWordResolveCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
            base(exception, cancelled, userState) {
        this.results = results;
    }
    
    /// <remarks/>
    public string Result {
        get {
            this.RaiseExceptionIfNecessary();
            return ((string)(this.results[0]));
        }
    }
}

/// <remarks/>
[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.8.3928.0")]
public delegate void SecurityCheckAccessCompletedEventHandler(object sender, SecurityCheckAccessCompletedEventArgs e);

/// <remarks/>
[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.8.3928.0")]
[System.Diagnostics.DebuggerStepThroughAttribute()]
[System.ComponentModel.DesignerCategoryAttribute("code")]
public partial class SecurityCheckAccessCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
    
    private object[] results;
    
    internal SecurityCheckAccessCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
            base(exception, cancelled, userState) {
        this.results = results;
    }
    
    /// <remarks/>
    public bool Result {
        get {
            this.RaiseExceptionIfNecessary();
            return ((bool)(this.results[0]));
        }
    }
}

/// <remarks/>
[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.8.3928.0")]
public delegate void SecurityCheckAccessExCompletedEventHandler(object sender, SecurityCheckAccessExCompletedEventArgs e);

/// <remarks/>
[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.8.3928.0")]
[System.Diagnostics.DebuggerStepThroughAttribute()]
[System.ComponentModel.DesignerCategoryAttribute("code")]
public partial class SecurityCheckAccessExCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
    
    private object[] results;
    
    internal SecurityCheckAccessExCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
            base(exception, cancelled, userState) {
        this.results = results;
    }
    
    /// <remarks/>
    public bool Result {
        get {
            this.RaiseExceptionIfNecessary();
            return ((bool)(this.results[0]));
        }
    }
    
    /// <remarks/>
    public uint grantedMask {
        get {
            this.RaiseExceptionIfNecessary();
            return ((uint)(this.results[1]));
        }
    }
}

/// <remarks/>
[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.8.3928.0")]
public delegate void SecurityGetObjectDescriptorCompletedEventHandler(object sender, SecurityGetObjectDescriptorCompletedEventArgs e);

/// <remarks/>
[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.8.3928.0")]
[System.Diagnostics.DebuggerStepThroughAttribute()]
[System.ComponentModel.DesignerCategoryAttribute("code")]
public partial class SecurityGetObjectDescriptorCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
    
    private object[] results;
    
    internal SecurityGetObjectDescriptorCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
            base(exception, cancelled, userState) {
        this.results = results;
    }
    
    /// <remarks/>
    public byte[] Result {
        get {
            this.RaiseExceptionIfNecessary();
            return ((byte[])(this.results[0]));
        }
    }
}

/// <remarks/>
[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.8.3928.0")]
public delegate void SecurityGetObjectDescriptorExCompletedEventHandler(object sender, SecurityGetObjectDescriptorExCompletedEventArgs e);

/// <remarks/>
[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.8.3928.0")]
[System.Diagnostics.DebuggerStepThroughAttribute()]
[System.ComponentModel.DesignerCategoryAttribute("code")]
public partial class SecurityGetObjectDescriptorExCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
    
    private object[] results;
    
    internal SecurityGetObjectDescriptorExCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
            base(exception, cancelled, userState) {
        this.results = results;
    }
    
    /// <remarks/>
    public byte[] Result {
        get {
            this.RaiseExceptionIfNecessary();
            return ((byte[])(this.results[0]));
        }
    }
}

/// <remarks/>
[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.8.3928.0")]
public delegate void SecurityGetSchemaCompletedEventHandler(object sender, SecurityGetSchemaCompletedEventArgs e);

/// <remarks/>
[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.8.3928.0")]
[System.Diagnostics.DebuggerStepThroughAttribute()]
[System.ComponentModel.DesignerCategoryAttribute("code")]
public partial class SecurityGetSchemaCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
    
    private object[] results;
    
    internal SecurityGetSchemaCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
            base(exception, cancelled, userState) {
        this.results = results;
    }
    
    /// <remarks/>
    public string Result {
        get {
            this.RaiseExceptionIfNecessary();
            return ((string)(this.results[0]));
        }
    }
}

/// <remarks/>
[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.8.3928.0")]
public delegate void SecurityIsAdminCompletedEventHandler(object sender, SecurityIsAdminCompletedEventArgs e);

/// <remarks/>
[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.8.3928.0")]
[System.Diagnostics.DebuggerStepThroughAttribute()]
[System.ComponentModel.DesignerCategoryAttribute("code")]
public partial class SecurityIsAdminCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
    
    private object[] results;
    
    internal SecurityIsAdminCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
            base(exception, cancelled, userState) {
        this.results = results;
    }
    
    /// <remarks/>
    public bool Result {
        get {
            this.RaiseExceptionIfNecessary();
            return ((bool)(this.results[0]));
        }
    }
}

/// <remarks/>
[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.8.3928.0")]
public delegate void SecuritySetObjectDescriptorCompletedEventHandler(object sender, SecuritySetObjectDescriptorCompletedEventArgs e);

/// <remarks/>
[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.8.3928.0")]
[System.Diagnostics.DebuggerStepThroughAttribute()]
[System.ComponentModel.DesignerCategoryAttribute("code")]
public partial class SecuritySetObjectDescriptorCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
    
    private object[] results;
    
    internal SecuritySetObjectDescriptorCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
            base(exception, cancelled, userState) {
        this.results = results;
    }
    
    /// <remarks/>
    public System.Guid Result {
        get {
            this.RaiseExceptionIfNecessary();
            return ((System.Guid)(this.results[0]));
        }
    }
    
    /// <remarks/>
    public byte[] newDescBytes {
        get {
            this.RaiseExceptionIfNecessary();
            return ((byte[])(this.results[1]));
        }
    }
}

/// <remarks/>
[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.8.3928.0")]
public delegate void SecuritySetObjectDescriptorExCompletedEventHandler(object sender, SecuritySetObjectDescriptorExCompletedEventArgs e);

/// <remarks/>
[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.8.3928.0")]
[System.Diagnostics.DebuggerStepThroughAttribute()]
[System.ComponentModel.DesignerCategoryAttribute("code")]
public partial class SecuritySetObjectDescriptorExCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
    
    private object[] results;
    
    internal SecuritySetObjectDescriptorExCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
            base(exception, cancelled, userState) {
        this.results = results;
    }
    
    /// <remarks/>
    public System.Guid Result {
        get {
            this.RaiseExceptionIfNecessary();
            return ((System.Guid)(this.results[0]));
        }
    }
    
    /// <remarks/>
    public byte[] newDescBytes {
        get {
            this.RaiseExceptionIfNecessary();
            return ((byte[])(this.results[1]));
        }
    }
}

/// <remarks/>
[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.8.3928.0")]
public delegate void SessionGetListCompletedEventHandler(object sender, SessionGetListCompletedEventArgs e);

/// <remarks/>
[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.8.3928.0")]
[System.Diagnostics.DebuggerStepThroughAttribute()]
[System.ComponentModel.DesignerCategoryAttribute("code")]
public partial class SessionGetListCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
    
    private object[] results;
    
    internal SessionGetListCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
            base(exception, cancelled, userState) {
        this.results = results;
    }
    
    /// <remarks/>
    public string Result {
        get {
            this.RaiseExceptionIfNecessary();
            return ((string)(this.results[0]));
        }
    }
}

/// <remarks/>
[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.8.3928.0")]
public delegate void SessionGetSettingsCompletedEventHandler(object sender, SessionGetSettingsCompletedEventArgs e);

/// <remarks/>
[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.8.3928.0")]
[System.Diagnostics.DebuggerStepThroughAttribute()]
[System.ComponentModel.DesignerCategoryAttribute("code")]
public partial class SessionGetSettingsCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
    
    private object[] results;
    
    internal SessionGetSettingsCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
            base(exception, cancelled, userState) {
        this.results = results;
    }
    
    /// <remarks/>
    public string Result {
        get {
            this.RaiseExceptionIfNecessary();
            return ((string)(this.results[0]));
        }
    }
}

/// <remarks/>
[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.8.3928.0")]
public delegate void SessionKeepAliveCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);

/// <remarks/>
[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.8.3928.0")]
public delegate void SessionLoginCompletedEventHandler(object sender, SessionLoginCompletedEventArgs e);

/// <remarks/>
[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.8.3928.0")]
[System.Diagnostics.DebuggerStepThroughAttribute()]
[System.ComponentModel.DesignerCategoryAttribute("code")]
public partial class SessionLoginCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
    
    private object[] results;
    
    internal SessionLoginCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
            base(exception, cancelled, userState) {
        this.results = results;
    }
    
    /// <remarks/>
    public System.Guid Result {
        get {
            this.RaiseExceptionIfNecessary();
            return ((System.Guid)(this.results[0]));
        }
    }
    
    /// <remarks/>
    public string userSettings {
        get {
            this.RaiseExceptionIfNecessary();
            return ((string)(this.results[1]));
        }
    }
}

/// <remarks/>
[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.8.3928.0")]
public delegate void SessionLoginExCompletedEventHandler(object sender, SessionLoginExCompletedEventArgs e);

/// <remarks/>
[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.8.3928.0")]
[System.Diagnostics.DebuggerStepThroughAttribute()]
[System.ComponentModel.DesignerCategoryAttribute("code")]
public partial class SessionLoginExCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
    
    private object[] results;
    
    internal SessionLoginExCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
            base(exception, cancelled, userState) {
        this.results = results;
    }
    
    /// <remarks/>
    public System.Guid Result {
        get {
            this.RaiseExceptionIfNecessary();
            return ((System.Guid)(this.results[0]));
        }
    }
    
    /// <remarks/>
    public CursorInfo sessionLoginResponse {
        get {
            this.RaiseExceptionIfNecessary();
            return ((CursorInfo)(this.results[1]));
        }
    }
}

/// <remarks/>
[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.8.3928.0")]
public delegate void SessionLoginCustomCompletedEventHandler(object sender, SessionLoginCustomCompletedEventArgs e);

/// <remarks/>
[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.8.3928.0")]
[System.Diagnostics.DebuggerStepThroughAttribute()]
[System.ComponentModel.DesignerCategoryAttribute("code")]
public partial class SessionLoginCustomCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
    
    private object[] results;
    
    internal SessionLoginCustomCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
            base(exception, cancelled, userState) {
        this.results = results;
    }
    
    /// <remarks/>
    public System.Guid Result {
        get {
            this.RaiseExceptionIfNecessary();
            return ((System.Guid)(this.results[0]));
        }
    }
    
    /// <remarks/>
    public CursorInfo sessionLoginResponse {
        get {
            this.RaiseExceptionIfNecessary();
            return ((CursorInfo)(this.results[1]));
        }
    }
}

/// <remarks/>
[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.8.3928.0")]
public delegate void SessionLogoutCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);

/// <remarks/>
[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.8.3928.0")]
public delegate void SessionSetSettingsCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);

/// <remarks/>
[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.8.3928.0")]
public delegate void SessionTerminateCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);

/// <remarks/>
[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.8.3928.0")]
public delegate void SessionUpdateOfflineStateCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);

/// <remarks/>
[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.8.3928.0")]
public delegate void TransformCreateCompletedEventHandler(object sender, TransformCreateCompletedEventArgs e);

/// <remarks/>
[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.8.3928.0")]
[System.Diagnostics.DebuggerStepThroughAttribute()]
[System.ComponentModel.DesignerCategoryAttribute("code")]
public partial class TransformCreateCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
    
    private object[] results;
    
    internal TransformCreateCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
            base(exception, cancelled, userState) {
        this.results = results;
    }
    
    /// <remarks/>
    public System.Guid Result {
        get {
            this.RaiseExceptionIfNecessary();
            return ((System.Guid)(this.results[0]));
        }
    }
}

/// <remarks/>
[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.8.3928.0")]
public delegate void TransformDeleteCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);

/// <remarks/>
[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.8.3928.0")]
public delegate void TransformGetDataCompletedEventHandler(object sender, TransformGetDataCompletedEventArgs e);

/// <remarks/>
[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.8.3928.0")]
[System.Diagnostics.DebuggerStepThroughAttribute()]
[System.ComponentModel.DesignerCategoryAttribute("code")]
public partial class TransformGetDataCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
    
    private object[] results;
    
    internal TransformGetDataCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
            base(exception, cancelled, userState) {
        this.results = results;
    }
    
    /// <remarks/>
    public string Result {
        get {
            this.RaiseExceptionIfNecessary();
            return ((string)(this.results[0]));
        }
    }
    
    /// <remarks/>
    public bool usingCompression {
        get {
            this.RaiseExceptionIfNecessary();
            return ((bool)(this.results[1]));
        }
    }
}

/// <remarks/>
[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.8.3928.0")]
public delegate void TransformGetDataExCompletedEventHandler(object sender, TransformGetDataExCompletedEventArgs e);

/// <remarks/>
[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.8.3928.0")]
[System.Diagnostics.DebuggerStepThroughAttribute()]
[System.ComponentModel.DesignerCategoryAttribute("code")]
public partial class TransformGetDataExCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
    
    private object[] results;
    
    internal TransformGetDataExCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
            base(exception, cancelled, userState) {
        this.results = results;
    }
    
    /// <remarks/>
    public string Result {
        get {
            this.RaiseExceptionIfNecessary();
            return ((string)(this.results[0]));
        }
    }
    
    /// <remarks/>
    public bool usingCompression {
        get {
            this.RaiseExceptionIfNecessary();
            return ((bool)(this.results[1]));
        }
    }
}

/// <remarks/>
[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.8.3928.0")]
public delegate void TransformGetListCompletedEventHandler(object sender, TransformGetListCompletedEventArgs e);

/// <remarks/>
[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.8.3928.0")]
[System.Diagnostics.DebuggerStepThroughAttribute()]
[System.ComponentModel.DesignerCategoryAttribute("code")]
public partial class TransformGetListCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
    
    private object[] results;
    
    internal TransformGetListCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
            base(exception, cancelled, userState) {
        this.results = results;
    }
    
    /// <remarks/>
    public string Result {
        get {
            this.RaiseExceptionIfNecessary();
            return ((string)(this.results[0]));
        }
    }
}

/// <remarks/>
[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.8.3928.0")]
public delegate void TransformSetDataCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);

/// <remarks/>
[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.8.3928.0")]
public delegate void TransformSetInfoCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);

/// <remarks/>
[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.8.3928.0")]
public delegate void UserProfileGetAccountCompletedEventHandler(object sender, UserProfileGetAccountCompletedEventArgs e);

/// <remarks/>
[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.8.3928.0")]
[System.Diagnostics.DebuggerStepThroughAttribute()]
[System.ComponentModel.DesignerCategoryAttribute("code")]
public partial class UserProfileGetAccountCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
    
    private object[] results;
    
    internal UserProfileGetAccountCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
            base(exception, cancelled, userState) {
        this.results = results;
    }
    
    /// <remarks/>
    public string Result {
        get {
            this.RaiseExceptionIfNecessary();
            return ((string)(this.results[0]));
        }
    }
}

/// <remarks/>
[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.8.3928.0")]
public delegate void UserProfileGetInfoCompletedEventHandler(object sender, UserProfileGetInfoCompletedEventArgs e);

/// <remarks/>
[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.8.3928.0")]
[System.Diagnostics.DebuggerStepThroughAttribute()]
[System.ComponentModel.DesignerCategoryAttribute("code")]
public partial class UserProfileGetInfoCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
    
    private object[] results;
    
    internal UserProfileGetInfoCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
            base(exception, cancelled, userState) {
        this.results = results;
    }
    
    /// <remarks/>
    public string Result {
        get {
            this.RaiseExceptionIfNecessary();
            return ((string)(this.results[0]));
        }
    }
    
    /// <remarks/>
    public System.Guid userRefId {
        get {
            this.RaiseExceptionIfNecessary();
            return ((System.Guid)(this.results[1]));
        }
    }
}

/// <remarks/>
[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.8.3928.0")]
public delegate void UserProfileSetInfoCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);

/// <remarks/>
[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.8.3928.0")]
public delegate void ViewCreateCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);

/// <remarks/>
[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.8.3928.0")]
public delegate void ViewDeleteCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);

/// <remarks/>
[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.8.3928.0")]
public delegate void ViewGetDataCompletedEventHandler(object sender, ViewGetDataCompletedEventArgs e);

/// <remarks/>
[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.8.3928.0")]
[System.Diagnostics.DebuggerStepThroughAttribute()]
[System.ComponentModel.DesignerCategoryAttribute("code")]
public partial class ViewGetDataCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
    
    private object[] results;
    
    internal ViewGetDataCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
            base(exception, cancelled, userState) {
        this.results = results;
    }
    
    /// <remarks/>
    public CursorInfo Result {
        get {
            this.RaiseExceptionIfNecessary();
            return ((CursorInfo)(this.results[0]));
        }
    }
}

/// <remarks/>
[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.8.3928.0")]
public delegate void ViewGetDataExCompletedEventHandler(object sender, ViewGetDataExCompletedEventArgs e);

/// <remarks/>
[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.8.3928.0")]
[System.Diagnostics.DebuggerStepThroughAttribute()]
[System.ComponentModel.DesignerCategoryAttribute("code")]
public partial class ViewGetDataExCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
    
    private object[] results;
    
    internal ViewGetDataExCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
            base(exception, cancelled, userState) {
        this.results = results;
    }
    
    /// <remarks/>
    public CursorInfo Result {
        get {
            this.RaiseExceptionIfNecessary();
            return ((CursorInfo)(this.results[0]));
        }
    }
}

/// <remarks/>
[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.8.3928.0")]
public delegate void ViewReadDataCompletedEventHandler(object sender, ViewReadDataCompletedEventArgs e);

/// <remarks/>
[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.8.3928.0")]
[System.Diagnostics.DebuggerStepThroughAttribute()]
[System.ComponentModel.DesignerCategoryAttribute("code")]
public partial class ViewReadDataCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
    
    private object[] results;
    
    internal ViewReadDataCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
            base(exception, cancelled, userState) {
        this.results = results;
    }
    
    /// <remarks/>
    public CursorInfoEx Result {
        get {
            this.RaiseExceptionIfNecessary();
            return ((CursorInfoEx)(this.results[0]));
        }
    }
}

/// <remarks/>
[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.8.3928.0")]
public delegate void ViewReadDataExCompletedEventHandler(object sender, ViewReadDataExCompletedEventArgs e);

/// <remarks/>
[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.8.3928.0")]
[System.Diagnostics.DebuggerStepThroughAttribute()]
[System.ComponentModel.DesignerCategoryAttribute("code")]
public partial class ViewReadDataExCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
    
    private object[] results;
    
    internal ViewReadDataExCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
            base(exception, cancelled, userState) {
        this.results = results;
    }
    
    /// <remarks/>
    public CursorInfoEx Result {
        get {
            this.RaiseExceptionIfNecessary();
            return ((CursorInfoEx)(this.results[0]));
        }
    }
    
    /// <remarks/>
    public string xmlResponse {
        get {
            this.RaiseExceptionIfNecessary();
            return ((string)(this.results[1]));
        }
    }
}

/// <remarks/>
[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.8.3928.0")]
public delegate void WorkflowGetActiveProcessesCompletedEventHandler(object sender, WorkflowGetActiveProcessesCompletedEventArgs e);

/// <remarks/>
[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.8.3928.0")]
[System.Diagnostics.DebuggerStepThroughAttribute()]
[System.ComponentModel.DesignerCategoryAttribute("code")]
public partial class WorkflowGetActiveProcessesCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
    
    private object[] results;
    
    internal WorkflowGetActiveProcessesCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
            base(exception, cancelled, userState) {
        this.results = results;
    }
    
    /// <remarks/>
    public CursorInfo Result {
        get {
            this.RaiseExceptionIfNecessary();
            return ((CursorInfo)(this.results[0]));
        }
    }
}

/// <remarks/>
[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.8.3928.0")]
public delegate void WorkflowGetProcessInfoCompletedEventHandler(object sender, WorkflowGetProcessInfoCompletedEventArgs e);

/// <remarks/>
[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.8.3928.0")]
[System.Diagnostics.DebuggerStepThroughAttribute()]
[System.ComponentModel.DesignerCategoryAttribute("code")]
public partial class WorkflowGetProcessInfoCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
    
    private object[] results;
    
    internal WorkflowGetProcessInfoCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
            base(exception, cancelled, userState) {
        this.results = results;
    }
    
    /// <remarks/>
    public string Result {
        get {
            this.RaiseExceptionIfNecessary();
            return ((string)(this.results[0]));
        }
    }
}

/// <remarks/>
[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.8.3928.0")]
public delegate void WorkflowGetProcessListCompletedEventHandler(object sender, WorkflowGetProcessListCompletedEventArgs e);

/// <remarks/>
[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.8.3928.0")]
[System.Diagnostics.DebuggerStepThroughAttribute()]
[System.ComponentModel.DesignerCategoryAttribute("code")]
public partial class WorkflowGetProcessListCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
    
    private object[] results;
    
    internal WorkflowGetProcessListCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
            base(exception, cancelled, userState) {
        this.results = results;
    }
    
    /// <remarks/>
    public string Result {
        get {
            this.RaiseExceptionIfNecessary();
            return ((string)(this.results[0]));
        }
    }
}

/// <remarks/>
[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.8.3928.0")]
public delegate void WorkflowGetProcessListExCompletedEventHandler(object sender, WorkflowGetProcessListExCompletedEventArgs e);

/// <remarks/>
[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.8.3928.0")]
[System.Diagnostics.DebuggerStepThroughAttribute()]
[System.ComponentModel.DesignerCategoryAttribute("code")]
public partial class WorkflowGetProcessListExCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
    
    private object[] results;
    
    internal WorkflowGetProcessListExCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
            base(exception, cancelled, userState) {
        this.results = results;
    }
    
    /// <remarks/>
    public string Result {
        get {
            this.RaiseExceptionIfNecessary();
            return ((string)(this.results[0]));
        }
    }
}

/// <remarks/>
[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.8.3928.0")]
public delegate void WorkflowLogMessageCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);

/// <remarks/>
[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.8.3928.0")]
public delegate void WorkflowPauseProcessCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);

/// <remarks/>
[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.8.3928.0")]
public delegate void WorkflowPrepareProcessCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);

/// <remarks/>
[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.8.3928.0")]
public delegate void WorkflowPromoteProcessCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);

/// <remarks/>
[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.8.3928.0")]
public delegate void WorkflowPromoteProcessesCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);

/// <remarks/>
[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.8.3928.0")]
public delegate void WorkflowResumeProcessCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);

/// <remarks/>
[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.8.3928.0")]
public delegate void WorkflowSetProcessPriorityCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);

/// <remarks/>
[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.8.3928.0")]
public delegate void WorkflowSetServiceStateCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);

/// <remarks/>
[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.8.3928.0")]
public delegate void WorkflowStartProcessCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);

/// <remarks/>
[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.8.3928.0")]
public delegate void WorkflowStepProcessCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);

/// <remarks/>
[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.8.3928.0")]
public delegate void WorkflowStopProcessCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);
